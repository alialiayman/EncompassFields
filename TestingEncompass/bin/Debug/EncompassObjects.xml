<?xml version="1.0"?>
<doc>
    <assembly>
        <name>EncompassObjects</name>
    </assembly>
    <members>
        <member name="T:EllieMae.Encompass.BusinessEnums.AdjustableRateType">
            <summary>
            Represents a single adjustable rate type that can be selected for a loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.EnumItem">
            <summary>
            Provides a base class for all Business Enumeration items in the Encompass Object Model.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.EnumItem.ToString">
            <summary>
            Provides a string representation of the current item.
            </summary>
            <returns>The name of the current item.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.EnumItem.Equals(System.Object)">
            <summary>
            Compares two enumeration values to see if they represent the same value.
            </summary>
            <param name="obj">The EnumItem object to which to compare the current object.</param>
            <returns>Returns <c>true</c> if the objects are of the same EnumItem-derived
            type and they have the same ID, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.EnumItem.GetHashCode">
            <summary>
            Provides a hash value for the current object for use in a Hashtable.
            </summary>
            <returns>A hash value for the current object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.EnumItem.op_Equality(EllieMae.Encompass.BusinessEnums.EnumItem,EllieMae.Encompass.BusinessEnums.EnumItem)">
            <summary>
            Provides an equality operator for two EnumItem-derived objects.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>Returns <c>true</c> if the two instances represent the same
            enumeration item. That is, they must have the same derived type and
            the same ID. Returns <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.EnumItem.op_Inequality(EllieMae.Encompass.BusinessEnums.EnumItem,EllieMae.Encompass.BusinessEnums.EnumItem)">
            <summary>
            Provides an inequality operator for two EnumItem-derived objects.
            </summary>
            <param name="a">The first object to compare.</param>
            <param name="b">The second object to compare.</param>
            <returns>Returns <c>true</c> if the two instances represent different
            enumeration items. Two EnumItems are different if they are instances of
            different derived types or if they have different IDs. 
            Returns <c>true</c> otherwise.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.EnumItem.ID">
            <summary>
            Gets the unique ID of the current item within the enumeration.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.EnumItem.Name">
            <summary>
            Gets the descriptive name of the item.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.IAdjustableRateType">
            <summary>
            Interface for ContactStatus class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.AdjustableRateType.TypeCode">
            <summary>
            Gets the type identifier for the ARM type.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.AdjustableRateTypes">
            <summary>
            Represents the collection of adjustable rate types.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.EnumBase">
            <summary>
            Provides a base class for all Business Enumerations in the Encompass Object Model.
            Not meant for use outside of the Encompass API.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.EnumBase.GetEnumerator">
            <summary>
            Returns an enumerator for iterating over the items in the list.
            </summary>
            <returns>An IEnumerator object for the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.EnumBase.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the items in the list into an Array, starting at the specified index.
            </summary>
            <param name="array">The array into which to copy the list's contents. The
            array must be able to hold objects of the appropriate type.</param>
            <param name="index">The index of the array at which copying is started.</param>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.EnumBase.IsSynchronized">
            <summary>
            Gets a flag indicating if access to the object is synchronized across threads.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.EnumBase.Count">
            <summary>
            Returns the number of items in the list.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.EnumBase.SyncRoot">
            <summary>
            An object to use for synchronized access to this list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.IAdjustableRateTypes">
            <summary>
            Interface for AdjustableRateTypes class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.AdjustableRateTypes.GetItemByID(System.Int32)">
            <summary>Provides access to the <see cref="T:EllieMae.Encompass.BusinessEnums.AdjustableRateType">AdjustableRateType</see> with the specified ID value.</summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.AdjustableRateTypes.GetItemByName(System.String)">
            <summary>Provides access to the <see cref="T:EllieMae.Encompass.BusinessEnums.AdjustableRateType">AdjustableRateType</see> with the specified name.</summary>
            <param name="name">The name of the item being retrieved (case insensitive).</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.AdjustableRateTypes.GetItemByTypeCode(System.String)">
            <summary>Provides access to the <see cref="T:EllieMae.Encompass.BusinessEnums.AdjustableRateType">AdjustableRateType</see> with the specified TypeCode.</summary>
            <param name="typeCode">The TypeCode of the item being retrieved (case insensitive).</param>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.AdjustableRateTypes.Item(System.Int32)">
            <summary>Provides access to the <see cref="T:EllieMae.Encompass.BusinessEnums.AdjustableRateType">AdjustableRateType</see> with the specified index.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.BizCategories">
            <summary>
            The BizCategories class represents the set of all Business Categories defined
            for the system. Business Categories are used to classify <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact">BizContact</see>s
            into Appraisers, Lenders, etc.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.IBizCategories">
            <summary>
            Interface for BizCategories class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.BizCategories.GetItemByID(System.Int32)">
            <summary>Provides access to the <see cref="T:EllieMae.Encompass.BusinessEnums.BizCategory">BizCategory</see> with the specified ID value.</summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.BizCategories.GetItemByName(System.String)">
            <summary>Provides access to the <see cref="T:EllieMae.Encompass.BusinessEnums.BizCategory">BizCategory</see> with the specified name.</summary>
            <param name="name">The name of the item being retrieved (case insensitive).</param>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.BizCategories.Item(System.Int32)">
            <summary>Provides access to the <see cref="T:EllieMae.Encompass.BusinessEnums.BizCategory">BizCategory</see> with the specified index.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.BizCategory">
            <summary>
            The BizCategory represents a single Business Category to which a <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact">BizContact</see>
            can be assigned. Every category has a unique numeric ID as well as a displayable name.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.IBizCategory">
            <summary>
            Interface for BizCategory class.
            </summary>
            <exclude/>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.ContactStatus">
            <summary>
            The ContactStatus represents a single Business Category to which a <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact">BizContact</see>
            can be assigned. Every category has a unique numeric ID as well as a displayable name.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.IContactStatus">
            <summary>
            Interface for ContactStatus class.
            </summary>
            <exclude/>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.ContactStatuses">
            <summary>
            The ContactStatuses class represents the set of all Business Categories defined
            for the system. Business Categories are used to classify <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact">BizContact</see>s
            into Appraisers, Lenders, etc.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.IContactStatuses">
            <summary>
            Interface for ContactStatuses class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.ContactStatuses.GetItemByID(System.Int32)">
            <summary>Provides access to the <see cref="T:EllieMae.Encompass.BusinessEnums.ContactStatus">ContactStatus</see> with the specified ID value.</summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.ContactStatuses.GetItemByName(System.String)">
            <summary>Provides access to the <see cref="T:EllieMae.Encompass.BusinessEnums.ContactStatus">ContactStatus</see> with the specified name.</summary>
            <param name="name">The name of the item being retrieved (case insensitive).</param>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.ContactStatuses.Item(System.Int32)">
            <summary>Provides access to the <see cref="T:EllieMae.Encompass.BusinessEnums.ContactStatus">ContactStatus</see> with the specified index.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.SRPTableTemplate">
            <summary>
            The SRPTableTemplate class represents an SRP Table template as configured in Encompass' Secondary Setup Settings
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.ISRPTableTemplate">
            <summary>
            Interface for SRPTableTemplate class
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.SRPTableTemplate.Name">
            <summary>
            Gets Name of the Template.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.SRPTableTemplate.Description">
            <summary>
            Gets the Description of Template.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.SRPTableTemplate.GUID">
            <summary>
            Gets the GUID of Template
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.SRPTableTemplates">
            <summary>
            The SRPTableTemplates class represents the set of all SRP Table Templates defined in Encompass settings.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.ISRPTableTemplates">
            <summary>
            Interface for SRPTableTemplates class
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.SRPTableTemplates.Item(System.String)">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessEnums.SRPTableTemplate">SRPTableTemplate</see> by its name.
            </summary>
            <param name="name">The name of the <see cref="T:EllieMae.Encompass.BusinessEnums.SRPTableTemplate">SRPTableTemplate</see> in the list.</param>
            <returns>The selected <see cref="T:EllieMae.Encompass.BusinessEnums.SRPTableTemplate">SRPTableTemplate</see></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.SRPTableTemplates.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessEnums.SRPTableTemplate">SRPTableTemplate</see> by its index.
            </summary>
            <param name="index">The index of the <see cref="T:EllieMae.Encompass.BusinessEnums.SRPTableTemplate">SRPTableTemplate</see> in the list.</param>
            <returns>The selected <see cref="T:EllieMae.Encompass.BusinessEnums.SRPTableTemplate">SRPTableTemplate</see></returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.FeeManagementRecord">
            <summary>
            The FeeManagementRecord represents a single 2010 Itemization Fee as defined in Encompass settings
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.IFeeManagementRecord">
            <summary>
            Interface for the FeeManagementRecord class
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.FeeManagementRecord.Unwrap">
            <summary>
            Provides access to the underlying FeeManagementRecord
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.FeeManagementRecord.MaventFeeName">
            <summary>
            Gets the name of the mapped Mavent compliance fee.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.FeeManagementRecord.FeeSource">
            <summary>
            Get the source (user) fee.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.FeeManagementRecord.For800">
            <summary>
            Gets a flag indicating if this fee is used for HUD Section 800
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.FeeManagementRecord.For900">
            <summary>
            Gets a flag indicating if this fee is used for HUD Section 900
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.FeeManagementRecord.For1000">
            <summary>
            Gets a flag indicating if this fee is used for HUD Section 1000
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.FeeManagementRecord.For1100">
            <summary>
            Gets a flag indicating if this fee is used for HUD Section 1100
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.FeeManagementRecord.For1200">
            <summary>
            Gets a flag indicating if this fee is used for HUD Section 1200
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.FeeManagementRecord.For1300">
            <summary>
            Gets a flag indicating if this fee is used for HUD Section 1300
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.FeeManagementRecords">
            <summary>
            The FeeManagementRecords class represents all of the fees that exist in the exist in the
            2010 Itemization Fee Management section of the Encompass settings
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.IFeeManagementRecords">
            <summary>
            Interface for the FeeManagementRecords class
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.FeeManagementRecords.Item(System.String)">
            <summary>
            Provides access to the <see cref="T:EllieMae.Encompass.BusinessEnums.FeeManagementRecord">FeeManagementRecord</see> with the specified name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.InvestorContact">
            <summary>
            The InvestorContact class represents an Investor Contact on an Investor Template defined in Encompass settings.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorContact.ContactType">
            <summary>
            Gets the type of the InvestorContact
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorContact.EntityName">
            <summary>
            Gets the EntityName of the InvestorContact
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorContact.ContactName">
            <summary>
            Gets the ContactName of the InvestorContact
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorContact.Street1">
            <summary>
            Gets the Street1 of the InvestorContact
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorContact.Street2">
            <summary>
            Gets the Street2 of the InvestorContact
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorContact.City">
            <summary>
            Gets the City of the InvestorContact
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorContact.State">
            <summary>
            Gets the State of the InvestorContact
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorContact.PhoneNumber">
            <summary>
            Gets the PhoneNumber of the InvestorContact
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorContact.FaxNumber">
            <summary>
            Gets the FaxNumber of the InvestorContact
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorContact.EmailAddress">
            <summary>
            Gets the EmailAddress of the InvestorContact
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorContact.WebSite">
            <summary>
            Gets the WebSite of the InvestorContact
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.InvestorContacts">
            <summary>
            The InvestorContacts class represents the set of all Investor Contacts defined
            for the current <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorTemplate">InvestorTemplate</see>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.IInvestorContacts">
            <summary>
            Interface for InvestorContacts class
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorContacts.Item(EllieMae.Encompass.BusinessEnums.InvestorContactType)">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorContact">InvestorContact</see> by it's <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorContactType">InvestorContactType</see>.
            </summary>
            <param name="contactType">The index of the <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorContact">InvestorContact</see> in the list.</param>
            <returns>The selected <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorContactType">InvestorContactType</see> enum value for the <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorContact">InvestorContact</see></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorContacts.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorContact">InvestorContact</see> by it's index.
            </summary>
            <param name="index">The index of the <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorContact">InvestorContact</see> in the list.</param>
            <returns>The selected <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorContact">InvestorContact</see></returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.InvestorContactType">
            <summary>
            Enum that defines the type of contact of a <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorContact">InvestorContact</see>
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.InvestorTemplate">
            <summary>
            The InvestorTemplate class represents an investor template as configured in Encompass' Secondary Setup Settings
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.IInvestorTemplate">
            <summary>
            Interface for InvestorTemplate class
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorTemplate.BulkSale">
            <summary>
            Gets if the investor is for bulk sale.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorTemplate.DeliveryTimeFrame">
            <summary>
            Gets the delivery time frame for the investor as number of days.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorTemplate.TypeOfPurchaser">
            <summary>
            Gets the type of HMDA purchaser.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorTemplate.Contacts">
            <summary>
            Gets the collection of all <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorContacts">InvestorContact</see>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.InvestorTemplates">
            <summary>
            The InvestorTemplates class represents the set of all Investor Templates defined in Encompass settings.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.IInvestorTemplates">
            <summary>
            Interface for InvestorTemplates class
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorTemplates.Item(System.String)">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorTemplate">InvestorTemplate</see> by its name.
            </summary>
            <param name="name">The name of the <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorTemplate">InvestorTemplate</see> in the list.</param>
            <returns>The selected <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorTemplate">InvestorTemplate</see></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.InvestorTemplates.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorTemplate">InvestorTemplate</see> by its index.
            </summary>
            <param name="index">The index of the <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorTemplate">InvestorTemplate</see> in the list.</param>
            <returns>The selected <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorTemplate">InvestorTemplate</see></returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.Milestone">
            <summary>
            The Milestone represents a single event in the lifetime of a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan">Loan</see>.
            </summary>
            <remarks>See the remarks for the <see cref="T:EllieMae.Encompass.BusinessEnums.Milestones">Milestones</see> class
            for a complete list of the predefined milestones and their sequence in the 
            loan's lifetime.</remarks>
            <example>
      The following code displays all of the Milestone information for a loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Events;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan using its GUID
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");

      // Get the first milestone from the processing sequence
      Milestone ms = session.Loans.Milestones.First;

      while (ms != null)
      {
         // Get the loan's MilestoneEvent for the current milestone
         MilestoneEvent entry = loan.Log.MilestoneEvents.GetEventForMilestone(ms.Name);

         if (entry != null)
         {
            if (entry.Completed)
               Console.WriteLine("Milestone " + ms.Name + " was completed on " + entry.Date);
            else if (entry.Date != null)
               Console.WriteLine("Milestone " + ms.Name + " is scheduled for completion on " + entry.Date);
            else
               Console.WriteLine("Milestone " + ms.Name + " is not currently scheduled for completion");
         }

         // Move to the next Milestone in the sequence
         ms = ms.Next;
      }

      // Close the loan
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.IMilestone">
            <summary>
            Interface for Milestone class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.Milestone.OccursBefore(EllieMae.Encompass.BusinessEnums.Milestone)">
            <summary>
            Determines if the current milestone occurs before the one specified
            </summary>
            <param name="ms">The milestone to compare against the current milestone.
            A <c>null</c> value will always result in this function returning <c>false</c>.</param>
            <returns>Returns <c>true</c> if the current milestone occurs earlier in
            the loan lifetime sequence than the specified milestone, <c>false</c> otherwise.
            </returns>
            <remarks>In languages that support operator overloading, this is equivalent
            to the less-than (&lt;) operator.</remarks>
            <example>
      The following code checks if a loans has been sent to processing by determining
      if its last completed milestone occurs on or after the Processing milestone
      in the loan lifetime sequence.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Events;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open the desired loan
      LoanIdentityList ids = session.Loans.Folders["My Pipeline"].GetContents();
   
      // Get the Processing milestone
      Milestone processing = session.Loans.Milestones.Processing;

      foreach (LoanIdentity id in ids)
      {
         // Open the loan
         Loan loan = session.Loans.Open(id.Guid);
      
         // Check if it's been sent to processing
         Milestone ms = session.Loans.Milestones.GetItemByName(loan.Log.MilestoneEvents.LastCompletedEvent.MilestoneName);
         
         if ((ms != null) && (ms.OccursOnOrAfter(processing)))
            Console.WriteLine("The loan " + id.ToString() + " has already been sent to processing");

         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.Milestone.OccursOnOrBefore(EllieMae.Encompass.BusinessEnums.Milestone)">
            <summary>
            Determines if the current milestone occurs before the one specified or is the
            same as the specified one.
            </summary>
            <param name="ms">The milestone to compare against the current milestone.
            A <c>null</c> value will always result in this function returning <c>false</c>.</param>
            <returns>Returns <c>true</c> if the current milestone occurs earlier in
            the loan lifetime sequence than or is the same as the specified milestone, 
            <c>false</c> otherwise.
            </returns>
            <remarks>In languages that support operator overloading, this is equivalent
            to the less-than-or-equals (&lt;=) operator.</remarks>
            <example>
      The following code checks if a loans has been sent to processing by determining
      if its last completed milestone occurs on or after the Processing milestone
      in the loan lifetime sequence.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Events;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open the desired loan
      LoanIdentityList ids = session.Loans.Folders["My Pipeline"].GetContents();
   
      // Get the Processing milestone
      Milestone processing = session.Loans.Milestones.Processing;

      foreach (LoanIdentity id in ids)
      {
         // Open the loan
         Loan loan = session.Loans.Open(id.Guid);
      
         // Check if it's been sent to processing
         Milestone ms = session.Loans.Milestones.GetItemByName(loan.Log.MilestoneEvents.LastCompletedEvent.MilestoneName);
         
         if ((ms != null) && (ms.OccursOnOrAfter(processing)))
            Console.WriteLine("The loan " + id.ToString() + " has already been sent to processing");

         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.Milestone.OccursAfter(EllieMae.Encompass.BusinessEnums.Milestone)">
            <summary>
            Determines if the current milestone occurs after the one specified
            </summary>
            <param name="ms">The milestone to compare against the current milestone.
            A <c>null</c> value will always result in this function returning <c>false</c>.</param>
            <returns>Returns <c>true</c> if the current milestone occurs later in
            the loan lifetime sequence than the specified milestone, <c>false</c> otherwise.
            </returns>
            <remarks>In languages that support operator overloading, this is equivalent
            to the greater-than (&gt;) operator.</remarks>
            <example>
      The following code checks if a loans has been sent to processing by determining
      if its last completed milestone occurs on or after the Processing milestone
      in the loan lifetime sequence.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Events;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open the desired loan
      LoanIdentityList ids = session.Loans.Folders["My Pipeline"].GetContents();
   
      // Get the Processing milestone
      Milestone processing = session.Loans.Milestones.Processing;

      foreach (LoanIdentity id in ids)
      {
         // Open the loan
         Loan loan = session.Loans.Open(id.Guid);
      
         // Check if it's been sent to processing
         Milestone ms = session.Loans.Milestones.GetItemByName(loan.Log.MilestoneEvents.LastCompletedEvent.MilestoneName);
         
         if ((ms != null) && (ms.OccursOnOrAfter(processing)))
            Console.WriteLine("The loan " + id.ToString() + " has already been sent to processing");

         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.Milestone.OccursOnOrAfter(EllieMae.Encompass.BusinessEnums.Milestone)">
            <summary>
            Determines if the current milestone occurs after the one specified or is the same
            as the one specified.
            </summary>
            <param name="ms">The milestone to compare against the current milestone.
            A <c>null</c> value will always result in this function returning <c>false</c>.</param>
            <returns>Returns <c>true</c> if the current milestone occurs later in
            the loan lifetime sequence than or is the same as the specified milestone, 
            <c>false</c> otherwise.
            </returns>
            <remarks>In languages that support operator overloading, this is equivalent
            to the greater-than-or-equals (&gt;=) operator.</remarks>
            <example>
      The following code checks if a loans has been sent to processing by determining
      if its last completed milestone occurs on or after the Processing milestone
      in the loan lifetime sequence.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Events;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open the desired loan
      LoanIdentityList ids = session.Loans.Folders["My Pipeline"].GetContents();
   
      // Get the Processing milestone
      Milestone processing = session.Loans.Milestones.Processing;

      foreach (LoanIdentity id in ids)
      {
         // Open the loan
         Loan loan = session.Loans.Open(id.Guid);
      
         // Check if it's been sent to processing
         Milestone ms = session.Loans.Milestones.GetItemByName(loan.Log.MilestoneEvents.LastCompletedEvent.MilestoneName);
         
         if ((ms != null) && (ms.OccursOnOrAfter(processing)))
            Console.WriteLine("The loan " + id.ToString() + " has already been sent to processing");

         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.Milestone.op_GreaterThan(EllieMae.Encompass.BusinessEnums.Milestone,EllieMae.Encompass.BusinessEnums.Milestone)">
            <summary>
            Compares two milestones to determine if one is after the other in the
            loan lifetime sequence.
            </summary>
            <param name="m1">The first Milestone to compare.</param>
            <param name="m2">The second Milestone to compare.</param>
            <returns>Returns true if <code>m1</code> occurs after <code>m2</code>
            in the loan lifetime sequence.</returns>
            <remarks>This operator will return false if either operand is null.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.Milestone.op_GreaterThanOrEqual(EllieMae.Encompass.BusinessEnums.Milestone,EllieMae.Encompass.BusinessEnums.Milestone)">
            <summary>
            Compares two milestones to determine if they are equal or if one occurs after 
            the other in the loan lifetime sequence.
            </summary>
            <param name="m1">The first Milestone to compare.</param>
            <param name="m2">The second Milestone to compare.</param>
            <returns>Returns true if <code>m1</code> and <code>m2</code> are the same
            milestone or if <code>m1</code> occurs after <code>m2</code>
            in the loan lifetime sequence.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.Milestone.op_LessThan(EllieMae.Encompass.BusinessEnums.Milestone,EllieMae.Encompass.BusinessEnums.Milestone)">
            <summary>
            Compares two milestones to determine if one occurs prior 
            the other in the loan lifetime sequence.
            </summary>
            <param name="m1">The first Milestone to compare.</param>
            <param name="m2">The second Milestone to compare.</param>
            <returns>Returns true if <code>m1</code> occurs before <code>m2</code>
            in the loan lifetime sequence.</returns>
            <remarks>This operator will return true if either operand is null.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.Milestone.op_LessThanOrEqual(EllieMae.Encompass.BusinessEnums.Milestone,EllieMae.Encompass.BusinessEnums.Milestone)">
            <summary>
            Compares two milestones to determine if they are equal or if one occurs before 
            the other in the loan lifetime sequence.
            </summary>
            <param name="m1">The first Milestone to compare.</param>
            <param name="m2">The second Milestone to compare.</param>
            <returns>Returns true if <code>m1</code> and <code>m2</code> are the same
            milestone or if <code>m1</code> occurs before <code>m2</code>
            in the loan lifetime sequence.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.Milestone.MilestoneID">
            <summary>
            MilestoneID for the Milestone
            <remarks>A number value indicates a "core" Milestone. A GUID value indicates a "custom" Milestone.</remarks>
            </summary>
            <remarks>This value will be the same even when the name of the Milestone is changed.
            It will match with the value of MilestoneEvent.MilestoneID of a loan even when the names are different.</remarks>
            <example>
      The following compares the Milestone name from the MilestoneEvent of the Loan to the Milestone name in Encompass settings.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Events;

class LoanReader
{
   public static void Main()
   {
      Session session = new Session();
      session.Start("localhost", "admin", "password");


      Loan loan = session.Loans.Open("{391cc4f4-e7e0-44d5-91f4-01c0d240cdae}");
      foreach (MilestoneEvent msEvt in loan.Log.MilestoneEvents)
      {
          Milestone ms = session.Loans.Milestones.GetItemByMilestoneID(msEvt.MilestoneID);
          Console.WriteLine(msEvt.MilestoneName);
          if (msEvt.MilestoneName != ms.Name)
            Console.WriteLine("\tThe Milestone " + msEvt.MilestoneName + " has been renamed to " + ms.Name);
      }

      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.Milestone.Next">
            <summary>
            Gets the next non-archived milestone in the milestone sequence that defines the lifetime of a loan.
            </summary>
            <example>
      The following code displays all of the Milestone information for a loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Events;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan using its GUID
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");

      // Get the first milestone from the processing sequence
      Milestone ms = session.Loans.Milestones.First;

      while (ms != null)
      {
         // Get the loan's MilestoneEvent for the current milestone
         MilestoneEvent entry = loan.Log.MilestoneEvents.GetEventForMilestone(ms.Name);

         if (entry != null)
         {
            if (entry.Completed)
               Console.WriteLine("Milestone " + ms.Name + " was completed on " + entry.Date);
            else if (entry.Date != null)
               Console.WriteLine("Milestone " + ms.Name + " is scheduled for completion on " + entry.Date);
            else
               Console.WriteLine("Milestone " + ms.Name + " is not currently scheduled for completion");
         }

         // Move to the next Milestone in the sequence
         ms = ms.Next;
      }

      // Close the loan
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.Milestone.Previous">
            <summary>
            Gets the previous non-archived milestone in the milestone sequence that defines the lifetime of a loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.Milestone.IsCustom">
            <summary>
            Gets a flag indicating if this is a custom milestone.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.Milestone.IsArchived">
            <summary>
            Gets a flag indicating if the milestone is archived
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.Milestone.CoreMilestone">
            <summary>
            Gets the core milestone with which a custom milestone is associated.
            </summary>
            <remarks>This property returns <c>null</c> if the current Milestone
            is not a custom milestone.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.Milestones">
            <summary>
            The Milestones class represents the set of all events (milestones) that can occur during the
            lifetime of a loan.
            </summary>
            <remarks>
            During the lifetime of a loan, the following milestones are achieved by loans
            in this order by default:
            <list type="bullet">
            <item>Started</item>
            <item>Processing</item>
            <item>Submittal</item>
            <item>Approval</item>
            <item>Docs Signing</item>
            <item>Funding</item>
            <item>Completion</item>
            </list>
            The values above are the milestones that exist by default and are common to every loan unless renamed or
            reordered. Additionally, every Encompass system can define its own set of custom milestones, additional
            stages in the lifetime sequence that are unique to the company's business process.
            <p>The milestones defined for any given loan are determined when the loan is first created. 
            At that point, whatever milestones are defined in the source
            Encompass system determined the lifetime sequence for that loan unless a MilestoneTemplate is applied to the loan.
            Thus, it is possible to have loans with different milestone sequences</p>
            <p>The values above represent the names of the default milestones and can be used 
            with the <see cref="M:EllieMae.Encompass.BusinessEnums.Milestones.GetItemByName(System.String)">GetItemByName()</see> function to
            retrieve a particular milestone. Alternatively, you may use the <see cref="P:EllieMae.Encompass.BusinessEnums.Milestones.First">First</see>
            property to obtain a reference to the first milestone (Started) and then use the 
            <see cref="P:EllieMae.Encompass.BusinessEnums.Milestone.Next">Next</see> and <see cref="P:EllieMae.Encompass.BusinessEnums.Milestone.Previous">Previous</see>
            properties to traverse the non-archived milestone sequence in order. However, keep in mind that the set of milestones 
            currently defined in the system may be different than those which are defined for any particular loan.</p>
            <para>
            When iterating over the entire Milestons collection the archived Milestones will be included and the end of the list.
            </para>
            </remarks>
            <example>
      The following code displays all of the Milestone information for a loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Events;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan using its GUID
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");

      // Get the first milestone from the processing sequence
      Milestone ms = session.Loans.Milestones.First;

      while (ms != null)
      {
         // Get the loan's MilestoneEvent for the current milestone
         MilestoneEvent entry = loan.Log.MilestoneEvents.GetEventForMilestone(ms.Name);

         if (entry != null)
         {
            if (entry.Completed)
               Console.WriteLine("Milestone " + ms.Name + " was completed on " + entry.Date);
            else if (entry.Date != null)
               Console.WriteLine("Milestone " + ms.Name + " is scheduled for completion on " + entry.Date);
            else
               Console.WriteLine("Milestone " + ms.Name + " is not currently scheduled for completion");
         }

         // Move to the next Milestone in the sequence
         ms = ms.Next;
      }

      // Close the loan
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.IMilestones">
            <summary>
            Interface for Milestones class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.Milestones.GetItemByID(System.Int32)">
            <summary>Provides access to the <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone">Milestone</see> with the specified index.</summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.Milestones.GetItemByName(System.String)">
            <summary>Provides access to the <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone">Milestone</see> with the specified name.</summary>
            <param name="name">The name of the item being retrieved (case insensitive).</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.Milestones.GetItemByMilestoneID(System.String)">
            <summary>
            Provides access to the <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone">Milestone</see> by the MilestoneID
            </summary>
            <param name="milestoneID"></param>
            <returns></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.Milestones.First">
            <summary>
            Returns the first Milestone in the sequence of Milestones that loans pass through.
            </summary>
            <example>
      The following code displays all of the Milestone information for a loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Events;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan using its GUID
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");

      // Get the first milestone from the processing sequence
      Milestone ms = session.Loans.Milestones.First;

      while (ms != null)
      {
         // Get the loan's MilestoneEvent for the current milestone
         MilestoneEvent entry = loan.Log.MilestoneEvents.GetEventForMilestone(ms.Name);

         if (entry != null)
         {
            if (entry.Completed)
               Console.WriteLine("Milestone " + ms.Name + " was completed on " + entry.Date);
            else if (entry.Date != null)
               Console.WriteLine("Milestone " + ms.Name + " is scheduled for completion on " + entry.Date);
            else
               Console.WriteLine("Milestone " + ms.Name + " is not currently scheduled for completion");
         }

         // Move to the next Milestone in the sequence
         ms = ms.Next;
      }

      // Close the loan
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.Milestones.Item(System.Int32)">
            <summary>Provides access to the <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone">Milestone</see> with the specified index.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.Milestones.Started">
            <summary>
            Gets the Started milestone.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.Milestones.Processing">
            <summary>
            Gets the Processing milestone.
            <exception cref="T:System.Exception">Thrown when the Processing <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone">Milestone</see>
            is not found due to being renamed</exception>
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.Milestones.Submittal">
            <summary>
            Gets the Submittal milestone.
            <exception cref="T:System.Exception">Thrown when the Submittal <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone">Milestone</see>
            is not found due to being renamed</exception>
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.Milestones.Approval">
            <summary>
            Gets the Approval milestone.
            <exception cref="T:System.Exception">Thrown when the Approval <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone">Milestone</see>
            is not found due to being renamed</exception>
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.Milestones.DocsSigning">
            <summary>
            Gets the Docs Signing milestone.
            <exception cref="T:System.Exception">Thrown when the Docs Signing <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone">Milestone</see>
            is not found due to being renamed.</exception>
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.Milestones.Funding">
            <summary>
            Gets the Funding milestone.
            <exception cref="T:System.Exception">Thrown when the Funding <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone">Milestone</see>
            is not found due to being renamed.</exception>
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.Milestones.Completion">
            <summary>
            Gets the Completion milestone.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate">
            <summary>
            Represents a milestone template, which is a sequence of milestones which can be applied
            to a loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.IMilestoneTemplate">
            <summary>
            Interface for MilestoneTemplate class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.MilestoneTemplate.SortIndex">
            <summary>
            Gets the sort index of the template.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.MilestoneTemplate.Active">
            <summary>
            Gets the state of the template.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.MilestoneTemplate.TemplateMilestones">
            <summary>
            Gets the list of all <see cref="T:EllieMae.Encompass.BusinessEnums.TemplateMilestone">TemplateMilestone</see> for the MilestoneTemplate
            </summary>
            <example>
The following code lists the channels that the MilestoneTemplate apples to.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class MilestoneTemplateSample
{
  public static void Main()
  {
    // Open the session to the remote server
    Session session = new Session();
    session.Start("myserver", "mary", "maryspwd");
    
    // Open a loan using its GUID
    Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
    
    // Gets the MilestoneEvent for a each TemplateMilestone
    foreach (TemplateMilestone tm in this.currentLoan.MilestoneTemplate.TemplateMilestones)
    {
        Milestone ms = session.Loans.Milestones.GetItemByID(tm.ID);
        MilestoneEvent mEv = loan.Log.MilestoneEvents.GetEventForMilestone(ms.Name);
        Console.WriteLine(string.Format("The Milestone {0} completed.", mEv.Completed ? "is" : "is not");
    }
    
     // Close the loan
     loan.Close();
    
     // End the session to gracefully disconnect from the server
     session.End();
    
  }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.MilestoneTemplate.Condition">
            <summary>
            Get the loan conditions used to determine if the MilestoneTemplate matches the loan data.
            </summary>
            <example>
The following code lists the details of the loan condition 
that is used to apply a MilestoneTemplate.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class MilestoneTemplateSample
{
  public static void Main()
  {
    // Open the session to the remote server
    Session session = new Session();
    session.Start("myserver", "mary", "maryspwd");
    
    // Open a loan using its GUID
    Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
    
    // Get the Loan's current MilestoneTemplate
    MilestoneTemplate mt = loan.MilestoneTemplate;

    // Print the Condition details  
    switch (mt.Condition.ConditionType)
    {
        case TemplateConditionType.None:
            Console.WriteLine("The MilestoneTemplate has no condition.");
            break;
        case TemplateConditionType.LoanPurpose:
        case TemplateConditionType.LoanType:
             Console.WriteLine(string.Format("The condition is {0} = {1}.", mt.Condition.ConditionType.ToString(), mt.Condition.Condition));
             break;
        case TemplateConditionType.AdvancedCondition:
              Console.WriteLine("The advanced condition is " + mt.Condition.AdvancedCondition);
              break;
    }
    
     // Close the loan
     loan.Close();
    
     // End the session to gracefully disconnect from the server
     session.End();
    
  }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.MilestoneTemplate.Channels">
            <summary>
            Returns the channels that the MilestoneTemplate applies to.
            </summary>
            <example>
The following code lists the channels that the MilestoneTemplate apples to.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects.Loans;

class MilestoneTemplateSample
{
  public static void Main()
  {
    // Open the session to the remote server
    Session session = new Session();
    session.Start("myserver", "mary", "maryspwd");
    
    // Get a MilestoneTemplate
    MilestoneTemplate mt = session.Loans.MilestoneTemplates.GetItemByName("Test Template");

    // Print out all the channels for the MilestoneTemplate    
    foreach (TemplateChannel tc in mt.Channels)
      Console.WriteLine("MilestoneTemplate applies to channel: " + tc.ToString());
    
     // End the session to gracefully disconnect from the server
     session.End();
    
  }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.TemplateChannel">
            <summary>
            Enum for the possible Channels used on a MilestoneTemplate
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplates">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate">MilestoneTemplate</see>s as configured for the Encompass system.
            This includes active as well as non active <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate">MilestoneTemplate</see>s.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.IMilestoneTemplates">
            <summary>
            Interface for MilestoneTemplates class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.MilestoneTemplates.GetItemByName(System.String)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate">MilestoneTemplate</see> by name.
            </summary>
            <param name="itemName">The name of the <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate">MilestoneTemplate</see></param>
            <returns>The selected <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate">MilestoneTemplate</see></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.MilestoneTemplates.GetItemByID(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate">MilestoneTemplate</see> by it's ID.
            </summary>
            <param name="itemId">The ID of the <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate">MilestoneTemplate</see></param>
            <returns>The selected <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate">MilestoneTemplate</see></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.MilestoneTemplates.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate">MilestoneTemplate</see> by it's index.
            </summary>
            <param name="index">The index of the <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate">MilestoneTemplate</see> in the list.</param>
            <returns>The selected <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate">MilestoneTemplate</see></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.MilestoneTemplates.DefaultTemplate">
            <summary>
            Direct access to the Default MilestoneTemplate
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.TradePriceAdjustmentTemplate">
            <summary>
            The TradePriceAdjustmentTemplate class represents a Trade Price adjustment template as configured in Encompass' Secondary Setup Settings
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.ITradePriceAdjustmentTemplate">
            <summary>
            Interface for PriceAdjustmentTemplate class
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.TradePriceAdjustmentTemplate.Name">
            <summary>
            Gets Name of the Template.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.TradePriceAdjustmentTemplate.Description">
            <summary>
            Gets the Description of Template.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.TradePriceAdjustmentTemplate.GUID">
            <summary>
            Gets the GUID of Template
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.TradePriceAdjustmentTemplates">
            <summary>
            The TradePriceAdjustmentTemplates class represents the set of all Trade Price Adjustment Templates defined in Encompass settings.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.ITradePriceAdjustmentTemplates">
            <summary>
            Interface for PriceAdjustmentTemplates class
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.TradePriceAdjustmentTemplates.Item(System.String)">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessEnums.TradePriceAdjustmentTemplate">TradePriceAdjustmentTemplate</see> by its name.
            </summary>
            <param name="name">The name of the <see cref="T:EllieMae.Encompass.BusinessEnums.TradePriceAdjustmentTemplate">TradePriceAdjustmentTemplate</see> in the list.</param>
            <returns>The selected <see cref="T:EllieMae.Encompass.BusinessEnums.TradePriceAdjustmentTemplate">TradePriceAdjustmentTemplate</see></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.TradePriceAdjustmentTemplates.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessEnums.TradePriceAdjustmentTemplate">TradePriceAdjustmentTemplate</see> by its index.
            </summary>
            <param name="index">The index of the <see cref="T:EllieMae.Encompass.BusinessEnums.TradePriceAdjustmentTemplate">TradePriceAdjustmentTemplate</see> in the list.</param>
            <returns>The selected <see cref="T:EllieMae.Encompass.BusinessEnums.TradePriceAdjustmentTemplate">TradePriceAdjustmentTemplate</see></returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.TemplateMilestone">
            <summary>
            The TemplateMilestone represents a single Milestone that is part of a <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate"/>.
            <remarks>The ID and Name properties refer to the ID and Name of the associated <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone"/>. 
            As a result the ID and Name properties could appear out of order.</remarks>
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.ITemplateMilestone">
            <summary>
            Interface for Milestone class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.TemplateMilestone.op_GreaterThan(EllieMae.Encompass.BusinessEnums.TemplateMilestone,EllieMae.Encompass.BusinessEnums.TemplateMilestone)">
            <summary>
            Compares two TemplateMilestone to determine if one is after the other in the
            MilestoneTemplate.
            </summary>
            <param name="tm1">The first TemplateMilestone to compare.</param>
            <param name="tm2">The second TemplateMilestone to compare.</param>
            <returns>Returns true if <code>tm1</code> occurs after <code>tm2</code>
            in the MilestoneTemplate.</returns>
            <remarks>This operator will return false if either operand is null.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.TemplateMilestone.op_GreaterThanOrEqual(EllieMae.Encompass.BusinessEnums.TemplateMilestone,EllieMae.Encompass.BusinessEnums.TemplateMilestone)">
            <summary>
            Compares two TemplateMilestone to determine if they are equal or if one occurs after 
            the other in the MilestoneTemplate.
            </summary>
            <param name="tm1">The first TemplateMilestone to compare.</param>
            <param name="tm2">The second TemplateMilestone to compare.</param>
            <returns>Returns true if <code>tm1</code> and <code>tm2</code> are the same
            milestone or if <code>tm1</code> occurs after <code>tm2</code>
            in the MilestoneTemplate.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.TemplateMilestone.op_LessThan(EllieMae.Encompass.BusinessEnums.TemplateMilestone,EllieMae.Encompass.BusinessEnums.TemplateMilestone)">
            <summary>
            Compares two TemplateMilestone to determine if one occurs prior 
            the other in the MilestoneTemplate.
            </summary>
            <param name="tm1">The first MilestoneTemplate to compare.</param>
            <param name="tm2">The second MilestoneTemplate to compare.</param>
            <returns>Returns true if <code>tm1</code> occurs before <code>tm2</code>
            in the MilestoneTemplate.</returns>
            <remarks>This operator will return true if either operand is null.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.TemplateMilestone.op_LessThanOrEqual(EllieMae.Encompass.BusinessEnums.TemplateMilestone,EllieMae.Encompass.BusinessEnums.TemplateMilestone)">
            <summary>
            Compares two TemplateMilestone to determine if they are equal or if one occurs before 
            the MilestoneTemplate.
            </summary>
            <param name="tm1">The first MilestoneTemplate to compare.</param>
            <param name="tm2">The second MilestoneTemplate to compare.</param>
            <returns>Returns true if <code>tm1</code> and <code>tm2</code> are the same
            milestone or if <code>tm1</code> occurs before <code>tm2</code>
            in the MilestoneTemplate.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.TemplateMilestone.MilestoneID">
            <summary>
            MilestoneID for the Milestone
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.TemplateMilestone.DaysToComplete">
            <summary>
            Returns the number of days to completeion for the Milestone as part of the  <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate"/>.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.TemplateMilestone.Previous">
            <summary>
            Gets the previous TemplateMilestone in the <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate"/> sequence that defines the lifetime of a loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.TemplateMilestone.Next">
            <summary>
            Gets the next TemplateMilestone in the <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate"/> sequence that defines the lifetime of a loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.TemplateMilestones">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessEnums.TemplateMilestone">TemplateMilestone</see>s that 
            belong to a <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate">MilestoneTemplate</see> as configured for the Encompass system.
            </summary>
            <example>
The following code lists the channels that the MilestoneTemplate apples to.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class MilestoneTemplateSample
{
  public static void Main()
  {
    // Open the session to the remote server
    Session session = new Session();
    session.Start("myserver", "mary", "maryspwd");
    
    // Open a loan using its GUID
    Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
    
    // Gets the MilestoneEvent for a each TemplateMilestone
    foreach (TemplateMilestone tm in this.currentLoan.MilestoneTemplate.TemplateMilestones)
    {
        Milestone ms = session.Loans.Milestones.GetItemByID(tm.ID);
        MilestoneEvent mEv = loan.Log.MilestoneEvents.GetEventForMilestone(ms.Name);
        Console.WriteLine(string.Format("The Milestone {0} completed.", mEv.Completed ? "is" : "is not");
    }
    
     // Close the loan
     loan.Close();
    
     // End the session to gracefully disconnect from the server
     session.End();
    
  }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessEnums.ITemplateMilestones">
            <summary>
            Interface for TemplateMilestones class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.TemplateMilestones.GetItemByID(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessEnums.TemplateMilestone">TemplateMilestone</see> by it's ID.
            </summary>
            <param name="itemId">The ID of the <see cref="T:EllieMae.Encompass.BusinessEnums.TemplateMilestone">TemplateMilestone</see></param>
            <returns>The selected <see cref="T:EllieMae.Encompass.BusinessEnums.TemplateMilestone">TemplateMilestone</see></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessEnums.TemplateMilestones.GetItemByName(System.String)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessEnums.TemplateMilestone">TemplateMilestone</see> by name.
            </summary>
            <param name="itemName">The name of the <see cref="T:EllieMae.Encompass.BusinessEnums.TemplateMilestone">TemplateMilestone</see></param>
            <returns>The selected <see cref="T:EllieMae.Encompass.BusinessEnums.TemplateMilestone">TemplateMilestone</see></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.TemplateMilestones.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessEnums.TemplateMilestone">TemplateMilestone</see> by it's index.
            </summary>
            <param name="index">The index of the <see cref="T:EllieMae.Encompass.BusinessEnums.TemplateMilestone">TemplateMilestone</see> in the list.</param>
            <returns>The selected <see cref="T:EllieMae.Encompass.BusinessEnums.TemplateMilestone">TemplateMilestone</see></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessEnums.TemplateMilestones.First">
            <summary>
            Returns the first TemplateMilestone in the sequence of TemplateMilestones for a MilestoneTemplate.
            </summary>
            <example>
      The following code displays all of the Milestone information for a loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Events;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan using its GUID
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");

      // Get the first milestone from the processing sequence
      Milestone ms = session.Loans.Milestones.First;

      while (ms != null)
      {
         // Get the loan's MilestoneEvent for the current milestone
         MilestoneEvent entry = loan.Log.MilestoneEvents.GetEventForMilestone(ms.Name);

         if (entry != null)
         {
            if (entry.Completed)
               Console.WriteLine("Milestone " + ms.Name + " was completed on " + entry.Date);
            else if (entry.Date != null)
               Console.WriteLine("Milestone " + ms.Name + " is scheduled for completion on " + entry.Date);
            else
               Console.WriteLine("Milestone " + ms.Name + " is not currently scheduled for completion");
         }

         // Move to the next Milestone in the sequence
         ms = ms.Next;
      }

      // Close the loan
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Calendar.Appointment">
            <summary>
            Represents a single appointment in a user's calendar.
            </summary>
            <example>
The following code creates a new appointment and enables a reminder for
one hour before the appointment begins.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.Query;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new appointment in the calendar tha will start 3 hours from now
      Appointment appt = session.Calendar.CreateAppointment(DateTime.Now.AddHours(3), 
         DateTime.Now.AddHours(4));

      // Set the appointments properties
      appt.Subject = "Meet with Margaret Taylor re: rate lock";
      appt.Location = "220 W. Grand Ave.";
      
      // Set a reminder for an hour before the appointment
      appt.ReminderEnabled = true;
      appt.ReminderInterval = 60;

      // Fetch the contact to attach to this appointment
      StringFieldCriterion fnCri = new StringFieldCriterion();
      fnCri.FieldName = "Contact.FirstName";
      fnCri.Value = "Margaret";

      StringFieldCriterion lnCri = new StringFieldCriterion();
      lnCri.FieldName = "Contact.LastName";
      lnCri.Value = "Taylor";

      ContactList contacts = session.Contacts.Query(fnCri.And(lnCri), ContactLoanMatchType.None, 
         ContactType.Borrower);

      // Add the contacts to the appointment
      for (int i = 0; i < contacts.Count; i++)
         appt.Contacts.Add(contacts[i]);

      // Save the changes to the appointment
      appt.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.Client.SessionBoundObject">
            <summary>
            Provides a base class for all objects which are tied to a given Session.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.SessionBoundObject.Session">
            <summary>
            Gets the Session object to which the current object is attached.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Calendar.IAppointment">
            <summary>
            Interface for Appointment class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.IsNew">
            <summary>
            Indicates if the Appointment has not yet been saved to the Encompass server.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.Commit">
            <summary>
            Commits the changes to the appointment to the Encompass server.
            </summary>
            <example>
The following code locates all appointments scheduled for today and reschedules
them for tomorrow.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Retrieve all appointments which are scheduled for today
      AppointmentList appts = session.Calendar.GetAppointmentsForDate(DateTime.Today);

      // For each appointment, move the appointment's start date to tomorrow
      foreach (Appointment appt in appts)
      {
         // Get the length of the appointment so we can preserve it
         TimeSpan span = appt.EndTime - appt.StartTime;

         // Advance the appointment to the same time tomorrow
         appt.StartTime = DateTime.Today.AddDays(1) + appt.StartTime.TimeOfDay;
         appt.EndTime = appt.StartTime + span;

         // Save the changes
         appt.Commit();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.Delete">
            <summary>
            Deletes the current appointment from the server.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.Refresh">
            <summary>
            Refreshes the object from the Encompass Server.
            </summary>
            <remarks>Any changes made to this object since the last call to <see cref="M:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.Commit"/>
            will be lost. Attempting to invoke this method on an Appointment for which <see cref="M:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.IsNew"/>
            returns <c>true</c> will result in an exception.</remarks>
        </member>
        <member name="E:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.Committed">
            <summary>Event indicating that the object has been committed to the server.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.ID">
            <summary>
            Gets the unique identifier for this appointment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.Subject">
            <summary>
            Gets or sets the subject for the Appointment.
            </summary>
            <example>
The following code creates a new appointment and enables a reminder for
one hour before the appointment begins.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.Query;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new appointment in the calendar tha will start 3 hours from now
      Appointment appt = session.Calendar.CreateAppointment(DateTime.Now.AddHours(3), 
         DateTime.Now.AddHours(4));

      // Set the appointments properties
      appt.Subject = "Meet with Margaret Taylor re: rate lock";
      appt.Location = "220 W. Grand Ave.";
      
      // Set a reminder for an hour before the appointment
      appt.ReminderEnabled = true;
      appt.ReminderInterval = 60;

      // Fetch the contact to attach to this appointment
      StringFieldCriterion fnCri = new StringFieldCriterion();
      fnCri.FieldName = "Contact.FirstName";
      fnCri.Value = "Margaret";

      StringFieldCriterion lnCri = new StringFieldCriterion();
      lnCri.FieldName = "Contact.LastName";
      lnCri.Value = "Taylor";

      ContactList contacts = session.Contacts.Query(fnCri.And(lnCri), ContactLoanMatchType.None, 
         ContactType.Borrower);

      // Add the contacts to the appointment
      for (int i = 0; i < contacts.Count; i++)
         appt.Contacts.Add(contacts[i]);

      // Save the changes to the appointment
      appt.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.StartTime">
            <summary>
            Gets or sets the start date and time for the Appointment.
            </summary>
            <remarks>If you set the <c>StartTime</c> of an appointment to be after the <c>EndTime</c>,
            the <c>EndTime</c> will be automatically adjusted to be concurrent with the <c>StartTime</c>.
            </remarks>
            <example>
The following code locates all appointments scheduled for today and reschedules
them for tomorrow.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Retrieve all appointments which are scheduled for today
      AppointmentList appts = session.Calendar.GetAppointmentsForDate(DateTime.Today);

      // For each appointment, move the appointment's start date to tomorrow
      foreach (Appointment appt in appts)
      {
         // Get the length of the appointment so we can preserve it
         TimeSpan span = appt.EndTime - appt.StartTime;

         // Advance the appointment to the same time tomorrow
         appt.StartTime = DateTime.Today.AddDays(1) + appt.StartTime.TimeOfDay;
         appt.EndTime = appt.StartTime + span;

         // Save the changes
         appt.Commit();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.EndTime">
            <summary>
            Gets or sets the date and time at which the appointment ends.
            </summary>
            <remarks>If you set the <c>EndTime</c> of an appointment to be prior to the <c>StartTime</c>,
            the <c>StartTime</c> will be automatically adjusted to be concurrent with the <c>EndTime</c>.
            </remarks>
            <example>
The following code locates all appointments scheduled for today and reschedules
them for tomorrow.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Retrieve all appointments which are scheduled for today
      AppointmentList appts = session.Calendar.GetAppointmentsForDate(DateTime.Today);

      // For each appointment, move the appointment's start date to tomorrow
      foreach (Appointment appt in appts)
      {
         // Get the length of the appointment so we can preserve it
         TimeSpan span = appt.EndTime - appt.StartTime;

         // Advance the appointment to the same time tomorrow
         appt.StartTime = DateTime.Today.AddDays(1) + appt.StartTime.TimeOfDay;
         appt.EndTime = appt.StartTime + span;

         // Save the changes
         appt.Commit();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.Location">
            <summary>
            Gets or sets the description for the Appointment.
            </summary>
            <example>
The following code creates a new appointment and enables a reminder for
one hour before the appointment begins.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.Query;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new appointment in the calendar tha will start 3 hours from now
      Appointment appt = session.Calendar.CreateAppointment(DateTime.Now.AddHours(3), 
         DateTime.Now.AddHours(4));

      // Set the appointments properties
      appt.Subject = "Meet with Margaret Taylor re: rate lock";
      appt.Location = "220 W. Grand Ave.";
      
      // Set a reminder for an hour before the appointment
      appt.ReminderEnabled = true;
      appt.ReminderInterval = 60;

      // Fetch the contact to attach to this appointment
      StringFieldCriterion fnCri = new StringFieldCriterion();
      fnCri.FieldName = "Contact.FirstName";
      fnCri.Value = "Margaret";

      StringFieldCriterion lnCri = new StringFieldCriterion();
      lnCri.FieldName = "Contact.LastName";
      lnCri.Value = "Taylor";

      ContactList contacts = session.Contacts.Query(fnCri.And(lnCri), ContactLoanMatchType.None, 
         ContactType.Borrower);

      // Add the contacts to the appointment
      for (int i = 0; i < contacts.Count; i++)
         appt.Contacts.Add(contacts[i]);

      // Save the changes to the appointment
      appt.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.Comments">
            <summary>
            Gets or sets the comments for the Appointment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.BarColor">
            <summary>
            Gets or sets the color of the appointment's bar in the calendar view.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.AllDayEvent">
            <summary>
            Gets or sets a flag indicating if the event is an all-day event.
            </summary>
            <example>
The following code removes all appointment from the calendar which have
already ended.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a temp list to hold the appointments to delete
      AppointmentList appts = session.Calendar.GetAllAppointments();

      // Loop through the appoints to find any in the past
      foreach (Appointment appt in appts)
      {
         bool delete = false;
      
         // Handle all-day event specially since their end date is the final full
         // day of the event.
         if (appt.AllDayEvent)
         {
            if (appt.EndTime < DateTime.Today)
               delete = true;
         }
         else
         {
            if (appt.EndTime < DateTime.Now)
               delete = true;
         }
         
         // Delete the appointment if required
         if (delete)
            appt.Delete();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.ReminderEnabled">
            <summary>
            Gets or sets a flag indicating if a reminder should be shown for this event.
            </summary>
            <example>
The following code creates a new appointment and enables a reminder for
one hour before the appointment begins.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.Query;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new appointment in the calendar tha will start 3 hours from now
      Appointment appt = session.Calendar.CreateAppointment(DateTime.Now.AddHours(3), 
         DateTime.Now.AddHours(4));

      // Set the appointments properties
      appt.Subject = "Meet with Margaret Taylor re: rate lock";
      appt.Location = "220 W. Grand Ave.";
      
      // Set a reminder for an hour before the appointment
      appt.ReminderEnabled = true;
      appt.ReminderInterval = 60;

      // Fetch the contact to attach to this appointment
      StringFieldCriterion fnCri = new StringFieldCriterion();
      fnCri.FieldName = "Contact.FirstName";
      fnCri.Value = "Margaret";

      StringFieldCriterion lnCri = new StringFieldCriterion();
      lnCri.FieldName = "Contact.LastName";
      lnCri.Value = "Taylor";

      ContactList contacts = session.Contacts.Query(fnCri.And(lnCri), ContactLoanMatchType.None, 
         ContactType.Borrower);

      // Add the contacts to the appointment
      for (int i = 0; i < contacts.Count; i++)
         appt.Contacts.Add(contacts[i]);

      // Save the changes to the appointment
      appt.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.ReminderInterval">
            <summary>
            Gets or sets the number of minutes prior to the appointment for the reminder to
            be displayed.
            </summary>
            <remarks>This property will return -1 if the <see cref="P:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.ReminderEnabled"/>
            property is <c>false</c>.
            <p>This property can only take on values that represent a whole number minutes (if &lt; 60),
            hours (if &gt;= 60 and &lt; 1440), or days (if &gt;= 1440). Attempts to set this value to something
            which does not fit this criteria will result in the value being rounded down to the nearest hour
            or day.</p>
            <p>For example, setting this property to the value 330 (5 hours and 30 minutes) would
            result in the interval being rounded down to 300 (5 hours).</p>
            </remarks>
            <example>
The following code displays all appointments which have a reminder set and
are within the reminder period.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get a list of all current and future appointments
      AppointmentList appts = session.Calendar.GetAppointmentsInRange(DateTime.Now,
         DateTime.MaxValue);

      // Get all appointments which are within their reminder period
      foreach (Appointment appt in session.Calendar.GetAllAppointments())
      {
         // If the appointment is in the future but the reminder time is
         // in the past, print a notification
         if (appt.ReminderEnabled && 
            (appt.StartTime > DateTime.Now) && 
            (appt.StartTime.AddMinutes(-appt.ReminderInterval) <= DateTime.Now))
            {
               Console.WriteLine("Reminder: " + appt.Subject + " starts at " + appt.StartTime);
            }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.ReminderActive">
            <summary>
            Indicates if the appointment's reminder is currently in effect.
            </summary>
            <remarks>This property returns <c>true</c> if the appointment's reminder is
            enabled and the current time is within the <see cref="P:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.ReminderInterval"/>
            of the appointment's <see cref="P:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.StartTime"/>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.Contacts">
            <summary>
            Gets the collection of contacts associated with this appointment.
            </summary>
            <example>
The following code creates a new appointment and enables a reminder for
one hour before the appointment begins.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.Query;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new appointment in the calendar tha will start 3 hours from now
      Appointment appt = session.Calendar.CreateAppointment(DateTime.Now.AddHours(3), 
         DateTime.Now.AddHours(4));

      // Set the appointments properties
      appt.Subject = "Meet with Margaret Taylor re: rate lock";
      appt.Location = "220 W. Grand Ave.";
      
      // Set a reminder for an hour before the appointment
      appt.ReminderEnabled = true;
      appt.ReminderInterval = 60;

      // Fetch the contact to attach to this appointment
      StringFieldCriterion fnCri = new StringFieldCriterion();
      fnCri.FieldName = "Contact.FirstName";
      fnCri.Value = "Margaret";

      StringFieldCriterion lnCri = new StringFieldCriterion();
      lnCri.FieldName = "Contact.LastName";
      lnCri.Value = "Taylor";

      ContactList contacts = session.Contacts.Query(fnCri.And(lnCri), ContactLoanMatchType.None, 
         ContactType.Borrower);

      // Add the contacts to the appointment
      for (int i = 0; i < contacts.Count; i++)
         appt.Contacts.Add(contacts[i]);

      // Save the changes to the appointment
      appt.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Calendar.AppointmentContacts">
            <summary>
            Provides access to the set of contacts related to an appointment.
            </summary>
            <example>
The following code display all of the days appointments along with the related
contact information.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.Query;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the current days appointments
      AppointmentList appts = session.Calendar.GetAppointmentsForDate(DateTime.Today);

      // Print each one out
      foreach (Appointment appt in appts)
      {
         // Write the start and end times and the appointment's subject
         Console.WriteLine(appt.StartTime + " - " + appt.EndTime + ": " + appt.Subject);

         // Now display all the related contacts with their home phone numbers
         for (int i = 0; i < appt.Contacts.Count; i++)
         {
            Contact contact = appt.Contacts[i];
            Console.WriteLine("   " + contact.FirstName + " " + contact.LastName +
               " " + contact.HomePhone);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Calendar.IAppointmentContacts">
            <summary>
            Interface for AppointmentContacts class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Calendar.AppointmentContacts.Add(EllieMae.Encompass.BusinessObjects.Contacts.Contact)">
            <summary>
            Adds a contact to the collection.
            </summary>
            <param name="contact">The contact to be added.</param>
            <example>
The following code creates a new appointment to meet with a contact.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.Query;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new appointment in the calendar tha will start 3 hours from now
      Appointment appt = session.Calendar.CreateAppointment(DateTime.Now.AddHours(3), DateTime.Now.AddHours(4));

      // Set the appointments properties
      appt.Subject = "Meet with Margaret Taylor re: rate lock";
      appt.Location = "220 W. Grand Ave.";
      
      // Set a reminder for an hour before the appointment
      appt.ReminderEnabled = true;
      appt.ReminderInterval = 60;

      // Fetch the contact to attach to this appointment
      StringFieldCriterion fnCri = new StringFieldCriterion();
      fnCri.FieldName = "Contact.FirstName";
      fnCri.Value = "Margaret";

      StringFieldCriterion lnCri = new StringFieldCriterion();
      lnCri.FieldName = "Contact.LastName";
      lnCri.Value = "Taylor";

      ContactList contacts = session.Contacts.Query(fnCri.And(lnCri), ContactLoanMatchType.None, 
         ContactType.Borrower);

      // Add the contacts to the appointment
      for (int i = 0; i < contacts.Count; i++)
         appt.Contacts.Add(contacts[i]);

      // Save the changes to the appointment
      appt.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Calendar.AppointmentContacts.Remove(EllieMae.Encompass.BusinessObjects.Contacts.Contact)">
            <summary>
            Removes a contact from the appointment.
            </summary>
            <param name="contact">The contact to be removed.</param>
            <example>
The following code clears the associated contact information for an 
appointment.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.Query;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Loop over the appointments in a calendar, looking for a specific appointment
      AppointmentList appts = session.Calendar.GetAllAppointments();

      foreach (Appointment appt in appts)
         if (appt.Subject == "Meeting with Joan")
         {
            for (int i = appt.Contacts.Count - 1; i >=0; i--)
               appt.Contacts.Remove(appt.Contacts[i]);

            // Save the changes to the appointment
            appt.Commit();
         }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Calendar.AppointmentContacts.Clear">
            <summary>
            Clears all of the associated contacts for the appointment.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Calendar.AppointmentContacts.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>An IEnumerator object for iterating over the set of contacts.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Calendar.AppointmentContacts.Count">
            <summary>
            Gets the number of contacts associated with this appointment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Calendar.AppointmentContacts.Item(System.Int32)">
            <summary>
            Gets a contact from the collection by index.
            </summary>
            <example>
The following code display all of the days appointments along with the related
contact information.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.Query;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the current days appointments
      AppointmentList appts = session.Calendar.GetAppointmentsForDate(DateTime.Today);

      // Print each one out
      foreach (Appointment appt in appts)
      {
         // Write the start and end times and the appointment's subject
         Console.WriteLine(appt.StartTime + " - " + appt.EndTime + ": " + appt.Subject);

         // Now display all the related contacts with their home phone numbers
         for (int i = 0; i < appt.Contacts.Count; i++)
         {
            Contact contact = appt.Contacts[i];
            Console.WriteLine("   " + contact.FirstName + " " + contact.LastName +
               " " + contact.HomePhone);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Calendar.Calendar">
            <summary>
            Provides access to the user's calendar.
            </summary>
            <example>
The following code display all of the appointments for the currently 
logged in user.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get all of the current user's appointments and display them
      // Mark items which are in a reminder state with a "*"
      AppointmentList appts = session.Calendar.GetAllAppointments();

      foreach (Appointment appt in appts)
      {
         // Flag any appointment which is currently within its reminder period
         if (appt.ReminderActive)
            Console.Write("* ");

         Console.WriteLine(appt.StartTime + " - " + appt.EndTime + ": " + appt.Subject);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Calendar.ICalendar">
            <summary>
            Interface for Calendar class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Calendar.Calendar.OpenAppointment(System.Int32)">
            <summary>
            Retrieves an appointment from the calendar with the specified ID.
            </summary>
            <param name="apptId">The <see cref="P:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.ID"/> of the Appointment.</param>
            <returns>The specified <see cref="T:EllieMae.Encompass.BusinessObjects.Calendar.Appointment"/> object, or <c>null</c>
            if no appointment exists with the specified ID.</returns>
            <remarks>Attempting to retrieve an appointment which does not belong to the
            currently logged in user will result in a <c>null</c> return value.</remarks>
            <example>
The following code retrieves a specific appointment and moves the appointment
time ahead by an hour.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open the appointment specified on the command line
      Appointment appt = session.Calendar.OpenAppointment(int.Parse(args[0]));

      // Make sure the appointment exists
      if (appt == null)
      {
         Console.WriteLine("The specified appointment does not exist.");
         return;
      }

      // Move the time forward by an hour, starting with the End Time
      appt.EndTime = appt.EndTime.AddHours(1);
      appt.StartTime = appt.StartTime.AddHours(1);

      // Save the changes to the appointment
      appt.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Calendar.Calendar.CreateAppointment(System.DateTime,System.DateTime)">
            <summary>
            Creates a new appointment in the calendar.
            </summary>
            <param name="startDate">The starting date and time for the appointment.</param>
            <param name="endDate">The ending date and time for the appointment.</param>
            <returns>The new <see cref="T:EllieMae.Encompass.BusinessObjects.Calendar.Appointment"/> object.</returns>
            <remarks>The returned Appointment object is unsaved and will not be
            persisted to the Encompass Server until the <see cref="M:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.Commit"/>
            method is invoked.</remarks>
            <example>
The following code demonstrates how to add a new Appointment to the 
current user's Calendar.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.Query;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new appointment in the calendar tha will start 3 hours from now
      Appointment appt = session.Calendar.CreateAppointment(DateTime.Now.AddHours(3), DateTime.Now.AddHours(4));

      // Set the appointments properties
      appt.Subject = "Meet with Margaret Taylor re: rate lock";
      appt.Location = "220 W. Grand Ave.";
      
      // Set a reminder for an hour before the appointment
      appt.ReminderEnabled = true;
      appt.ReminderInterval = 60;

      // Fetch the contact to attach to this appointment
      StringFieldCriterion fnCri = new StringFieldCriterion();
      fnCri.FieldName = "Contact.FirstName";
      fnCri.Value = "Margaret";

      StringFieldCriterion lnCri = new StringFieldCriterion();
      lnCri.FieldName = "Contact.LastName";
      lnCri.Value = "Taylor";

      ContactList contacts = session.Contacts.Query(fnCri.And(lnCri), ContactLoanMatchType.None, 
         ContactType.Borrower);

      // Add the contacts to the appointment
      for (int i = 0; i < contacts.Count; i++)
         appt.Contacts.Add(contacts[i]);

      // Save the changes to the appointment
      appt.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Calendar.Calendar.CreateAppointmentForUser(EllieMae.Encompass.BusinessObjects.Users.User,System.DateTime,System.DateTime)">
            <summary>
            Creates a new appointment for the specified user.
            </summary>
            <param name="user">The user for whom the appointment is to be scheduled.</param>
            <param name="startDate">The starting date and time for the appointment.</param>
            <param name="endDate">The ending date and time for the appointment.</param>
            <remarks>The returned Appointment object is unsaved and will not be
            persisted to the Encompass Server until the <see cref="M:EllieMae.Encompass.BusinessObjects.Calendar.Appointment.Commit"/>
            method is invoked.
            <p>This method can only be invoked by users with the Administrator persona.</p>
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Calendar.Calendar.GetAllAppointments">
            <summary>
            Retrieves all of the appointments for the current user.
            </summary>
            <returns>An <see cref="T:EllieMae.Encompass.Collections.AppointmentList"/> containing all appointments,
            past and present, for the current user.</returns>
            <remarks>The returned list will be sorted based on the appointments' start times.
            However, all-day events may be sequenced anywhere within the set of events which occur
            on the same day.
            <note type="implementnotes">If the user has a large number of appointments, this
            call may require significant time to complete.</note></remarks>
            <example>
The following code display all of the appointments for the currently 
logged in user.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get all of the current user's appointments and display them
      // Mark items which are in a reminder state with a "*"
      AppointmentList appts = session.Calendar.GetAllAppointments();

      foreach (Appointment appt in appts)
      {
         // Flag any appointment which is currently within its reminder period
         if (appt.ReminderActive)
            Console.Write("* ");

         Console.WriteLine(appt.StartTime + " - " + appt.EndTime + ": " + appt.Subject);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Calendar.Calendar.GetAllAppointmentsForUser(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Retrieves a list of all the appointments for a specified user.
            </summary>
            <param name="user">The user for whom the appointments are to be retrieved.</param>
            <returns>An <see cref="T:EllieMae.Encompass.Collections.AppointmentList"/> containing all appointments,
            past and present, for the specified user.</returns>
            <remarks>The returned list will be sorted based on the appointments' start times.
            However, all-day events may be sequenced anywhere within the set of events which occur
            on the same day.
            <p>This method can only be invoked by users with the Administrator persona.</p>
            <note type="implementnotes">If the user has a large number of appointments, this
            call may require significant time to complete.</note></remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Calendar.Calendar.GetAppointmentsForDate(System.DateTime)">
            <summary>
            Retrieves all of the appointments that occur during a specified date.
            </summary>
            <param name="apptDate">The date for which appointments will be retrieved.</param>
            <returns>An <see cref="T:EllieMae.Encompass.Collections.AppointmentList"/> containing all appointments for
            the specified date.</returns>
            <example>
The following code retrieves today's calendar for the current user and moves
all meetings currently scheduled to occur in the "Meeting Room" to the
"Board Room".
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open the appointment specified on the command line
      AppointmentList appts = session.Calendar.GetAppointmentsForDate(DateTime.Today);

      foreach (Appointment appt in appts)
      {
         // If the meeting is in the "Meeting Room", change it's location and save it
         if (appt.Location == "Meeting Room")
         {
            appt.Location = "Board Room";
            appt.Commit();
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Calendar.Calendar.GetAppointmentsForUserOnDate(EllieMae.Encompass.BusinessObjects.Users.User,System.DateTime)">
            <summary>
            Retrieves all of a user's appointments that occur during a specified date.
            </summary>
            <param name="user">The user for whom you are fetching the appointments.</param>
            <param name="apptDate">The date for which appointments will be retrieved.</param>
            <returns>An <see cref="T:EllieMae.Encompass.Collections.AppointmentList"/> containing all appointments for
            the specified date.</returns>
            <remarks>This method can only be invoked by users with the Administrator persona.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Calendar.Calendar.GetAppointmentsInRange(System.DateTime,System.DateTime)">
            <summary>
            Retrieves all appointments that occur within a specified time range.
            </summary>
            <param name="rangeBegin">The start of the date/time range.</param>
            <param name="rangeEnd">The end of the date/time range.</param>
            <returns>An <see cref="T:EllieMae.Encompass.Collections.AppointmentList"/> that contains all appointments
            from the Calendar which begin and/or end in the specified time range.  
            Appointments which begin exctly at the time specified by the <c>rangeEnd</c>
            parameter are not included in the result set. In other words, the date range used
            is denoted as [<c>rangeBegin</c>, <c>rangeEnd</c>).
            </returns>
            <example>
The following code demonstrates how to determine what appointments the current
user has in a specified time range.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Calendar;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Check what appointments are going on during the next hour
      AppointmentList appts = session.Calendar.GetAppointmentsInRange(DateTime.Now, 
         DateTime.Now.AddHours(1));

      // Print them to the console
      for (int i = 0; i < appts.Count; i++)
         Console.WriteLine(appts[i].StartTime + " - " + appts[i].EndTime + ": " + 
            appts[i].Subject);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Calendar.Calendar.GetAppointmentsForUserInRange(EllieMae.Encompass.BusinessObjects.Users.User,System.DateTime,System.DateTime)">
            <summary>
            Retrieves all appointments for the specified user that occur within a specified time range.
            </summary>
            <param name="user">The user for whom the appointments are scheduled.</param>
            <param name="rangeBegin">The start of the date/time range.</param>
            <param name="rangeEnd">The end of the date/time range.</param>
            <returns>An <see cref="T:EllieMae.Encompass.Collections.AppointmentList"/> that contains all appointments
            from the Calendar which begin and/or end in the specified time range.  
            Appointments which begin exctly at the time specified by the <c>rangeEnd</c>
            parameter are not included in the result set. In other words, the date range used
            is denoted as [<c>rangeBegin</c>, <c>rangeEnd</c>).
            </returns>
            <remarks>This method can only be invoked by users with the Administrator persona.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CustomFields">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CustomField">CustomField</see> 
            for an <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization">ExternalOrganization</see>
            </summary>
            <example>
      The following code sets UseParentInfo to false, outputs the current value of the custom field,
      sets a new value and commits the changes to the ExternalOrganization.
      <code>
        <![CDATA[
using System;
using System.IO;
using System.Linq;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class CustomFields
{
  public static void Main()
  {
    // Open the session to the remote server. We will need to be logged 
    // in as an Administrator to modify the user accounts.
    Session session = new Session();
    session.Start("myserver", "admin", "adminpwd");

    //Use the organization name as method argument, and here using false to indicate this organization is not using its parent's information
    ExternalOrganization_SetCustomFields(session, "Test Child 1", false);

    // End the session to gracefully disconnect from the server
    session.End();
  }

  private static void ExternalOrganization_SetCustomFields(Session session, string ExternalOrganizationName, bool UseParentInfo)
  {
    // Fetch all of the organizations, in order to get the ExternalID
    ExternalOrganizationList orgs = session.Organizations.GetAllExternalOrganizations();

    // Get the Organziation by its organization name
    ExternalOrganization externalOrg = orgs.Cast<ExternalOrganization>().FirstOrDefault(org => org.OrganizationName == ExternalOrganizationName);

    // Check if it is parent or not. Then followed by to see if it is going to use parent info, if yes , commit and return; 
    // Otherwise continue to retrieve and the value
    if (externalOrg.ParentOrganizationID != 0)
    {
      if (UseParentInfo)
      {
        externalOrg.CustomFields.UseParentInfo = true;
        externalOrg.Commit();
        return;
      }
      else
      {
        externalOrg.CustomFields.UseParentInfo = false;
      }
    }

    // Retrieve the current organization's Zip Code value first
    CustomFields customFields = externalOrg.CustomFields;

    // Retrieve the value of customized field:  CUSTOMIZED_ZIP_CODE_FIELD
    CustomField targetField = customFields.FirstOrDefault(CF => CF.FieldName == "CUSTOMIZED_ZIP_CODE_FIELD");
    Console.Write("targetField:" + targetField.FieldValue);

    // Set a new value for this field
    targetField.FieldValue = "12345";

    // Commit the change for this field 
    externalOrg.Commit();

  }
}

]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CustomFields.UseParentInfo">
            <summary>
            Gets and sets if the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CustomField">CustomField</see> is coming from 
            the parent <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization">ExternalOrganization</see>
            </summary>
            <remarks>Setting this value to true will update all fields with the values of the parent.
            </remarks>
            <exception cref="T:System.Exception">Throws an exception if attempting to set a top level 
            company to use parent info.</exception>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CustomFields.Item(System.String)">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CustomField">CustomField</see>
            by field name.
            </summary>
            <param name="fieldName">Name of the field</param>
            <returns>A <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CustomField">CustomField</see></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CustomFields.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CustomField">CustomField</see>
            by the index in the collection.
            </summary>
            <param name="index"></param>
            <returns>A <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CustomField">CustomField</see></returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CustomField">
            <summary>
            Represents a single CustomField for an 
            <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization">ExternalOrganization</see>
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CustomField.FieldOptions">
            <summary>
            Returns all possible values for a drop down box field.
            </summary>
            <remarks>The array will be empty unless the field is a drop down field.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CustomField.FieldName">
            <summary>
            Gets the name of the custom field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CustomField.FieldValue">
            <summary>
            Gets and sets value of the custom field.
            </summary>
            <exception cref="T:System.Exception">Throws exception if setting a value when using 
            parent info.</exception>
            <exception cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.FieldValidationException">Throws excpetion if the new value 
            isn't valid for the field type.</exception>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalBanks">
            <summary>
            Represents a single external bank
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.IExternalBanks">
            <summary>
            Interface for IExternalBanks class
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalBanks.BankID">
            <summary>
            gets external bankID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalBanks.BankName">
            <summary>
            gets externalBankName
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalBanks.Address">
            <summary>
            gets address
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalBanks.Address1">
            <summary>
            gets Address1
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalBanks.City">
            <summary>
            gets city
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalBanks.State">
            <summary>
            gets state
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalBanks.Zip">
            <summary>
            gets zip
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalBanks.ContactName">
            <summary>
            gets ContactName
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalBanks.ContactEmail">
            <summary>
            gets ContactEmail
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalBanks.ContactPhone">
            <summary>
            gets ContactPhone
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalBanks.ContactFax">
            <summary>
            gets ContactFax
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalBanks.ABANumber">
            <summary>
            gets ABANumber
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalBanks.DateAdded">
            <summary>
            gets DateAdded
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDBAName">
            <summary>
            Represents a single External DBA Name.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.IExternalDBAName">
            <summary>
            Interface for IExternalDBAName class to support External DBA Name
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDBAName.ExternalOrgID">
            <summary>
            Gets ExternalOrgID of the DBA record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDBAName.DBAID">
            <summary>
            Gets DBAID of the DBA record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDBAName.Name">
            <summary>
            Gets or sets Name of the DBA record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDBAName.SetAsDefault">
            <summary>
            Gets or sets whether the DBA is default
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDBAName.SortIndex">
            <summary>
            Gets or sets SortIndex of the DBA record
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings">
            <summary>
            Represent ExternalDocumentsSettings Class
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.IExternalDocumentsSettings">
            <summary>
            IExternalDocumentsSettings
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.guid">
            <summary>
            Private Properties
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.#ctor">
            <summary>
            Public Constructor
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.ToList(System.Collections.Generic.List{EllieMae.EMLite.ClientServer.ExternalOriginatorManagement.DocumentSettingInfo})">
            <summary>
            Create Document List
            </summary>
            <param name="documents"></param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.ToDictionary(System.Collections.Generic.Dictionary{System.Int32,System.Collections.Generic.List{EllieMae.EMLite.ClientServer.ExternalOriginatorManagement.DocumentSettingInfo}})">
            <summary>
            Create Document Dictionary
            </summary>
            <param name="documents"></param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.#ctor(EllieMae.EMLite.ClientServer.ExternalOriginatorManagement.DocumentSettingInfo)">
            <summary>
            Constructor
            </summary>
            <param name="docSetting"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.ToDocumentSettingInfoObj(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings)">
            <summary>
            Transform ExternalDocumentSettings Object to DocumentSettingInfo Object
            </summary>
            <param name="docSetting"></param>
            <returns></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.Guid">
            <summary>
            Guid of the document
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.ExternalOrgId">
            <summary>
            External Org ID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.AddedBy">
            <summary>
            AddedBy UserId for the document
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.Active">
            <summary>
            Document Active Flag
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.DefaultActive">
            <summary>
            Default Active Flag
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.FileName">
            <summary>
            File Name
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.DisplayName">
            <summary>
            Display Name
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.Category">
            <summary>
            Category
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.Channel">
            <summary>
            Channel - Enum Type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.DateAdded">
            <summary>
            Date Added
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.StartDate">
            <summary>
            Start Date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.EndDate">
            <summary>
            End Date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.AvailbleAllTPO">
            <summary>
            Available to All TPO
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.IsArchive">
            <summary>
            IsArchive Flag
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.IsDefault">
            <summary>
            IsDefault Flag
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.Status">
            <summary>
            Status Enum Type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.DefaultStatus">
            <summary>
            Default Status Enum Type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.AssignCount">
            <summary>
            Assign Count
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.FileSize">
            <summary>
            File Size
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.SortId">
            <summary>
            Sort ID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.ChannelStr">
            <summary>
            Channel String
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings.StatusStr">
            <summary>
            Status String
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees">
            <summary>
            Represents a single External fees.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.IExternalFees">
            <summary>
            Interface for IExternalFees class to support External Fees
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.FeeManagementID">
            <summary>
            Gets the FeeManagementID of the Fee record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.ExternalOrgID">
            <summary>
            Gets the ExternalOrgID of the Fee record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.FeeName">
            <summary>
            Gets or sets the Name of the Fee record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.Description">
            <summary>
            Gets or sets the Description of the Fee record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.Code">
            <summary>
            Gets or sets the Code of the Fee record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.Channel">
            <summary>
            Gets or sets the Channel of the Fee record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.StartDate">
            <summary>
            Gets or sets the Start Date of the Fee record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.EndDate">
            <summary>
            Gets or sets the End Date of the Fee record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.Condition">
            <summary>
            Gets the condition of the Fee record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.AdvancedCode">
            <summary>
            Gets the Advanced Code of the Fee record
            </summary>
            
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.AdvancedCodeXml">
            <summary>
            Gets the Advanced Code Xml of the Fee record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.FeePercent">
            <summary>
            Gets or sets the Fee Percent of the Fee record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.FeeAmount">
            <summary>
            Gets or sets the Fee Amount of the Fee record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.FeeBasedOn">
            <summary>
            Gets or sets the Fee Based On of the Fee record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.CreatedBy">
            <summary>
            Gets or sets the Created By of the Fee record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.DateCreated">
            <summary>
            Gets or sets the Creation Date of the Fee record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.UpdatedBy">
            <summary>
            Gets or sets the Updated By of the Fee record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.DateUpdated">
            <summary>
            Gets or sets the Date Updated of the Fee record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees.Status">
            <summary>
            Gets the status of the Fee record
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CurrentCompanyStatus">
            <summary>
            Represents a single External company status setting
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CurrentCompanyStatus.ToString">
            <summary>
            Return Status Name
            </summary>
            <returns>Status Name</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CurrentCompanyStatus.StatusName">
            <summary>
            Gets StatusName
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CurrentCompanyStatus.ID">
            <summary>
            Gets ID
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.RateSheet">
            <summary>
            Represents a single External EPPS rate sheet
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.RateSheet.ToString">
            <summary>
            Return Status Name
            </summary>
            <returns>Status Name</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.RateSheet.StatusName">
            <summary>
            Gets StatusName
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.RateSheet.ID">
            <summary>
            Gets ID
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CurrentContactStatus">
            <summary>
            Represents a single External user status setting
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CurrentContactStatus.ToString">
            <summary>
            Return Status Name
            </summary>
            <returns>Status Name</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CurrentContactStatus.StatusName">
            <summary>
            Gets StatusName
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CurrentContactStatus.ID">
            <summary>
            Gets ID
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CompanyRating">
            <summary>
            Represents a single External Company rating setting
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CompanyRating.ToString">
            <summary>
            Return Status Name
            </summary>
            <returns>Status Name</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CompanyRating.StatusName">
            <summary>
            Gets StatusName
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CompanyRating.ID">
            <summary>
            Gets ID
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.AttachmentCategory">
            <summary>
            Represents a single External attachment category setting
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.AttachmentCategory.ToString">
            <summary>
            Return Status Name
            </summary>
            <returns>Status Name</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.AttachmentCategory.StatusName">
            <summary>
            Gets StatusName
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.AttachmentCategory.ID">
            <summary>
            Gets ID
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.PriceGroup">
            <summary>
            Represents a single External price group setting
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.PriceGroup.ToString">
            <summary>
            Return Status Name
            </summary>
            <returns>Status Name</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.PriceGroup.StatusName">
            <summary>
            Gets StatusName
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.PriceGroup.StatusCode">
            <summary>
            Gets StatusCode
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.PriceGroup.ID">
            <summary>
            Gets ID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.DocumentCategory.CategoryName">
            <summary>
            Gets StatusName
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.DocumentCategory.ID">
            <summary>
            Gets ID
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrlManager.AddSiteUrl(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl)">
            <summary>
            Method to add Site Url
            </summary>
            <param name="url"><see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl">ExternalSiteUrl</see> to add.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrlManager.DeleteSiteUrl(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl)">
            <summary>
            Method to delete site url
            </summary>
            <param name="url"><see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl">ExternalSiteUrl</see> to delete.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrlManager.UpdateSiteUrl(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl)">
            <summary>
            Method to update site url
            </summary>
            <param name="url"><see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl">ExternalSiteUrl</see> to update.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrlManager.GetSiteUrls">
            <summary>
            Method to get site url list
            </summary>
            <returns>list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl">ExternalSiteUrl</see></returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment">
            <summary>
            Represents a single External organization attachment.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.IExternalAttachment">
            <summary>
            Interface for IExternalAttachment class to support External Attachments
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment.Guid">
            <summary>
            Gets Guid of the attachment record
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment.ExternalOrgID">
            <summary>
            Gets the id external organization
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment.FileName">
            <summary>
            Gets or sets file name of the attachment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment.Description">
            <summary>
            Gets or sets attachment description
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment.Category">
            <summary>
            Gets or sets attachment category
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment.FileDate">
            <summary>
            Gets or sets file date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment.UserWhoAdded">
            <summary>
            Gets the Id of the Encompass user who added the attachment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment.ExpirationDate">
            <summary>
            Gets or sets the expiration date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment.DaysToExpire">
            <summary>
            Gets or sets the number of days to expire
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment.RealFileName">
            <summary>
            Gets the real file name
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment.DateAdded">
            <summary>
            Gets the date added
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan">
            <summary>
            Represents an external LO Comp Plan
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.IExternalLoanCompPlan">
            <summary>
            Interface for IExternalLoanCompPlan class to support LoanCompPlan
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan.Id">
            <summary>
            Gets id of the LO Comp Plan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan.Name">
            <summary>
            Gets the name of lo comp plan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan.Description">
            <summary>
            Gets the Description of lo comp plan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan.PlanType">
            <summary>
            Gets PlanType of lo comp plan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan.Status">
            <summary>
            Gets Status flag
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan.ActivationDate">
            <summary>
            Gets activation date of lo comp plan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan.MinTermDays">
            <summary>
            Gets minimum term days of lo comp plan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan.PercentAmt">
            <summary>
            Gets percent amount 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan.PercentAmtBase">
            <summary>
            Gets percent amount base
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan.RoundingMethod">
            <summary>
            Gets rounding method
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan.DollarAmount">
            <summary>
            Gets dollar amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan.MinDollarAmount">
            <summary>
            Gets minimum dollar amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan.MaxDollarAmount">
            <summary>
            Gets maximum dollar amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan.TriggerField">
            <summary>
            Gets trigger field
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypeEnum">
            <summary>
            Defines the possible loan type for an external organization
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypeEnum.Conventional">
            <summary>
            Conventional Loan Type
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypeEnum.FHA">
            <summary>
            FHA Loan Type
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypeEnum.VA">
            <summary>
            VA Loan Type
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypeEnum.USDA">
            <summary>
            USDA Loan Type
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypeEnum.HELOC">
            <summary>
            HELOC Loan Type
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypeEnum.Other">
            <summary>
            Other Loan Type
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypeEnum.FirstLien">
            <summary>
            FirstLien Loan Type
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypeEnum.SecondLien">
            <summary>
            SecondLien Loan Type
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanPurposeEnums">
            <summary>
            Defines the possible loan purpose for an external organization
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanPurposeEnums.Purchase">
            <summary>
            Purchase Loan
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanPurposeEnums.NoCashOutRefi">
            <summary>
            NoCashOutRefi Loan
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanPurposeEnums.CashOutRefi">
            <summary>
            CashOutRefi Loan
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanPurposeEnums.Construction">
            <summary>
            Construction Loan
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanPurposeEnums.ConstructionPerm">
            <summary>
            ConstructionPerm Loan
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanPurposeEnums.Other">
            <summary>
            Other Loan
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUnderwriting">
            <summary>
            Defines the possible upderwriting options for an external organization
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUnderwriting.Delegated">
            <summary>
            Delegated
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUnderwriting.NonDeletgated">
            <summary>
            Non-Deletgated
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUnderwriting.ConditionallyDelegated">
            <summary>
            Conditionally Delegated
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes">
            <summary>
            Represents loan types information of an external organization
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.advancedCode">
            <summary>
            Gets or sets <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType">Advanced Code </see> information for Conditional Underwriting
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.advancedCodeXml">
            <summary>
            Gets or sets <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType">Advanced Code Xml</see> information for Conditional Underwriting
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.Id">
            <summary>
            Gets or sets id
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.ExternalOrgID">
            <summary>
            Gets or sets External organization ID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.FHAId">
            <summary>
            Gets or sets FHA Id
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.FHASponsorId">
            <summary>
            Gets or sets FHA SponsorId
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.FHAStatus">
            <summary>
            Gets or sets FHA Status
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.FHACompareRatio">
            <summary>
            Gets or sets FHA Compare Ratio
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.FHAApprovedDate">
            <summary>
            Gets or sets FHA Approved Date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.FHAExpirationDate">
            <summary>
            Gets or sets FHA Expiration date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.VAId">
            <summary>
            Gets or sets VA Id
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.VAStatus">
            <summary>
            Gets or sets VA Status
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.VAApprovedDate">
            <summary>
            Gets or sets VA approved date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.VAExpirationDate">
            <summary>
            Gets or sets VA Expiration date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.UseParentInfoFhaVa">
            <summary>
            Gets or sets Use parent info for FHA VA section
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.Broker">
            <summary>
            Gets or sets <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType">Broker</see> information
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.CorrespondentDelegated">
            <summary>
            Gets or sets <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType">CorrespondentDelegated</see> information
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.CorrespondentNonDelegated">
            <summary>
            Gets or sets <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType">CorrespondentNonDelegated</see> information
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypes.Underwriting">
            <summary>
            Gets or sets <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType">Underwriting</see> information
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType">
            <summary>
            Represents external channel loan type of an external organization
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType.ContainsLoanType(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypeEnum)">
            <summary>
            Method to check if a particular loan type is allowed
            </summary>
            <param name="loanType">The loan type to check</param>
            <returns>Indicates if a particular loan type is selected.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType.RemoveLoanType(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypeEnum)">
            <summary>
            Method to uncheck a particular loan type
            </summary>
            <param name="loanType">The loan type to remove.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType.AddLoanType(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanTypeEnum)">
            <summary>
            Method to add a specified loan type
            </summary>
            <param name="loanType">The loan type to add.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType.GetLoanTypeValue">
            <summary>
            Method to get a loan type value
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType.ContainsLoanPurpose(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanPurposeEnums)">
            <summary>
            Method to check if a particular loan purpose is allowed
            </summary>
            <param name="loanPurpose">The loan purpose to check.</param>
            <returns>Indicates if a particular loan purpose is selected.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType.RemoveLoanPurpose(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanPurposeEnums)">
            <summary>
            Method to remove loan purpose
            </summary>
            <param name="loanPurpose">The loan purpose to remove.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType.AddLoanPurpose(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanPurposeEnums)">
            <summary>
            Method to add loan purpose
            </summary>
            <param name="loanPurpose">The loan purpose to add.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType.GetLoanPurposeValue">
            <summary>
            Method to get a loan purpose value
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType.ExternalOrgID">
            <summary>
            Gets or sets External org id
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType.ChannelType">
            <summary>
            Gets or sets Channel Type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType.FHAStreamlineType">
            <summary>
            Gets or sets FHA Streamline Type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType.AllowLoansWithIssues">
            <summary>
            Gets or sets flag to allow loans with issues
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalChannelLoanType.MsgUploadNonApprovedLoans">
            <summary>
            Gets or sets message for uploading unapproved loans
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalNote">
            <summary>
            Represents a single External organization Note.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.IExternalNote">
            <summary>
            Interface for IExternalNotes class to support External Notes
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalNote.NoteID">
            <summary>
            Gets note id
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalNote.ExternalCompanyID">
            <summary>
            Gets or sets external organizaiton id
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalNote.WhoAdded">
            <summary>
            Gets userid of Encompass user who added the note
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalNote.AddedDateTime">
            <summary>
            Gets Date added
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalNote.NotesDetails">
            <summary>
            Gets or sets note details
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSalesRep">
            <summary>
            Represents a single External sales rep
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSalesRep.salesRepId">
            <summary>
            Gets sales rep id
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSalesRep.externalOrgId">
            <summary>
            Gets external organization id
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSalesRep.userId">
            <summary>
            Gets Encompass user id
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSalesRep.isDeletable">
            <summary>
            Gets flag for indicating if a sales rep is deletable
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSalesRep.companyDBAName">
            <summary>
            Gets Company DBA Name
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSalesRep.companyLegalName">
            <summary>
            Gets Company Legal Name
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl">
            <summary>
            Represents a single External site url
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="url">url of the site</param>
            <param name="siteId">TPO Web center site id.</param>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl.DateAdded">
            <summary>
            Gets or sets date added
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl.URL">
            <summary>
            Gets or sets URL
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl.SiteId">
            <summary>
            Gets or sets SiteId
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl.URLID">
            <summary>
            Gets internal URLID
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl">
            <summary>
            Represents a single External url
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl.URLID">
            <summary>
            Gets URL id
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl.URL">
            <summary>
            Gets or sets URL
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl.EntityType">
            <summary>
            Gets or sets url type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl.DateAdded">
            <summary>
            Gets or sets date added
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl.SiteId">
            <summary>
            Gets or sets site id
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl.IsDeleted">
            <summary>
            Gets IsDeleted .These URLs are deleted from the TPO webcenter but is still configured till the user explicitly deletes it.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.UserViolationType">
            <summary>
            Enumeration of the possible violation reasons.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.UserViolationType.LoginCredentialNotFound">
            <summary>
            Password provided does not match stored value
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.UserViolationType.AccountDisabled">
            <summary>
            User's account is disabled
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.UserViolationType.CompanyOnWatchlist">
            <summary>
            company is on watchlist
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.UserViolationType.OrganizationDisabled">
            <summary>
            Organization is disabled
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.UserViolationType.InvalidExternalUserAddress">
            <summary>
            External User address is invalid
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUserValidationException">
            <summary>
            Exception indicating a failed validation of an externaluser account
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUserValidationException.ExceptionType">
            <summary>
            Gets or sets user violation type
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.OrganizationUrlViolationType">
            <summary>
            Enumeration of the possible organization url violation reasons.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.OrganizationUrlViolationType.InvalidOrganizationUrlCreation">
            <summary>
            invalid organization url combination
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationUrlException">
            <summary>
            Exception indicating a failed validation of external organization url
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationUrlException.ExceptionType">
            <summary>
            Gets or sets organization url violation type
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.LOCompPlanViolationType">
            <summary>
            Enumeration of the possible LO Comp Plan violation reasons.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.LOCompPlanViolationType.InvalidStartDate">
            <summary>
            invalid LO Comp plan start date
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationLOCompPlanException">
            <summary>
            Exception indicating a failed validation of external organization LO Comp Plan 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationLOCompPlanException.ExceptionType">
            <summary>
            Gets or sets LO Comp plan violation type
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory">
            <summary>
            Represents a single ExternalLoanCompHistory.
            </summary>
            
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ILoanCompHistory">
            <summary>
            Interface for ILoanCompHistory class to support LoanCompHistory
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory.Id">
            <summary>
            Gets Lo Comp history id
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory.PlanName">
            <summary>
            Gets LO comp plan name
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory.CompPlanId">
            <summary>
            Gets LO Comp Plan Id
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory.StartDate">
            <summary>
            Gets or sets the start date of the LO Comp history
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory.EndDate">
            <summary>
            Gets or sets the end date of the LO Comp history
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory.MinTermDays">
            <summary>
            Gets or sets the minimum term days
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory.PercentAmt">
            <summary>
            Gets or sets the percent amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory.PercentAmtBase">
            <summary>
            Gets or sets the percent amount base
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory.RoundingMethod">
            <summary>
            Gets or sets the rounding method
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory.DollarAmount">
            <summary>
            Gets or sets the dollar amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory.MinDollarAmount">
            <summary>
            Gets or sets the minimum dollar amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory.MaxDollarAmount">
            <summary>
            Gets or sets the maximum dollar amount
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.BatchReassign">
            <summary>
            Provides access to reassigning loans.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.BatchReassign.Reassign(System.String[],EllieMae.Encompass.BusinessObjects.Users.User,EllieMae.Encompass.BusinessObjects.Loans.Role)">
            <summary>
            Reassigns a collection of loans to a new User for a given Role
            </summary>
            <param name="guids">Array of Loan GUIDs to be reassinged.</param>
            <param name="user">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User">User</see> that the loans well be assigned to.</param>
            <param name="role">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role">Role</see> for which the User will be updated.</param>
            <returns>Array of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.ReassignResult">ReassignResult</see> with the results of the reassign process.</returns>
            <remarks>This call is done synchronously and will not return until all loans have finished being processed.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ReassignResult">
            <summary>
            Represents the result of reassigning a Loan
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse">
            <summary>
            Represents a single external warehouse
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.IExternalOrgWarehouse">
            <summary>
            Interface for IExternalOrgWarehouse class
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.WarehouseID">
            <summary>
            gets external warehouseID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.BankID">
            <summary>
            gets external bankID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.ExternalOrgID">
            <summary>
            gets externalOrgID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.BankName">
            <summary>
            gets externalBankName
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.Address">
            <summary>
            gets address
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.Address1">
            <summary>
            gets address1
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.City">
            <summary>
            gets city
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.State">
            <summary>
            gets state
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.Zip">
            <summary>
            gets zip
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.ABANumber">
            <summary>
            gets/sets ABANumber
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.DateAdded">
            <summary>
            gets DateAdded
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.UseBankContact">
            <summary>
            gets/sets useBankContact
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.ContactName">
            <summary>
            gets/sets contactName
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.ContactEmail">
            <summary>
            gets/sets contactEmail
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.ContactPhone">
            <summary>
            gets/sets ContactPhone
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.ContactFax">
            <summary>
            gets/sets ContactFax
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.BankContactName">
            <summary>
            gets/sets BankContactName
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.BankContactEmail">
            <summary>
            gets/sets BankContactEmail
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.BankContactPhone">
            <summary>
            gets/sets BankContactPhone
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.BankContactFax">
            <summary>
            gets/sets BankContactFax
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.Notes">
            <summary>
            gets/sets notes
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.AcctNumber">
            <summary>
            gets/sets AcctNumber
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.Description">
            <summary>
            gets/sets Description
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.SelfFunder">
            <summary>
            gets/sets SelfFunder
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.BaileeReq">
            <summary>
            gets/sets BaileeReq (Bailee Required) 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.Expiration">
            <summary>
            gets/sets Expiration (Bailee Expiration Date)
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.TriParty">
            <summary>
            gets/sets TriParty
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.OrgName">
            <summary>
            gets/sets OrgName
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.OrgType">
            <summary>
            gets/sets OrgType
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.Approved">
            <summary>
            gets/sets Approved flag
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.AcctName">
            <summary>
            gets/sets AcctName
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.CreditAcctNumber">
            <summary>
            gets/sets CreditAcctNumber
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse.CreditAcctName">
            <summary>
            gets/sets CreditAcctName
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.IExternalLateFees">
            <summary>
            Interface for IExternalLateFees class to support External Late Fees
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.LateFeeSettings.ContainsGracePeriodLaterOf(EllieMae.Encompass.BusinessObjects.ExternalOrganization.GracePeriodLaterOf)">
            <summary>
            Method to check if a particular Grace Period Later Of is allowed
            </summary>
            <param name="gracePeriodLaterOf">The Grace Period Later Of to check.</param>
            <returns>Indicates if a particular Grace Period Later Of is selected.</returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.FundingFee">
            <summary>
            Funding Fee that we are loading from Funding Worksheet.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IFundingFee">
            <summary>
            Interface for FundingFee class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.#ctor(EllieMae.EMLite.DataEngine.FundingFee)">
            <summary>
            Funding Fee constructor
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.LineID">
            <summary>
            Gets line number of 2010/2015 Itemization.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.CDLineID">
            <summary>
            Gets line number of Closing Disclosure Pgae 2. This is available only when loan is 2015 RESPA-TILA.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.BalanceChecked">
            <summary>
            Gets funding fee checked by user
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.FeeDescription">
            <summary>
            Gets description of fee. This is available only when loan is 2010 RESPA.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.FeeDescription2015">
            <summary>
            Gets description of fee. This is available only when loan is 2015 RESPA-TILA.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.Payee">
            <summary>
            Gets Recipient of a miscellaneous charge.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.PaidBy">
            <summary>
            Gets Paid By ID (Broker, Lender, Other)
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.PaidTo">
            <summary>
            Gets Paid To ID (Broker, Lender, Seller, Invistor, Affiliate, Other)
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.Amount">
            <summary>
            Gets Fee Amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.POCAmount">
            <summary>
            Gets the portion of the fee paid outside closing by borrower. This is available only when loan is 2010 RESPA.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.POCPaidBy">
            <summary>
            Gets the portion of the fee paid outside closing by 3rd party. This is available only when loan is 2010 RESPA.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.PTCAmount">
            <summary>
            Gets the portion of the fee paid through closing amount. This is available only when loan is 2010 RESPA.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.PTCPaidBy">
            <summary>
            Gets the portion of the fee paid through closing by 3rd party. This is available only when loan is 2010 RESPA.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.POCBorrower2015">
            <summary>
            Gets the portion of the fee paid outside closing by the borrower. This is available only when loan is 2015 RESPA-TILA.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.POCSeller2015">
            <summary>
            Gets the portion of the fee paid outside closing by the seller. This is available only when loan is 2015 RESPA-TILA.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.POCBroker2015">
            <summary>
            Gets the portion of the fee paid outside closing by the broker. This is available only when loan is 2015 RESPA-TILA.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.POCLender2015">
            <summary>
            Gets the portion of the fee paid outside closing by the lender. This is available only when loan is 2015 RESPA-TILA.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.POCOther2015">
            <summary>
            Gets the portion of the fee paid outside closing by the other. This is available only when loan is 2015 RESPA-TILA.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.PACBroker2015">
            <summary>
            Gets the portion of the fee paid at closing by the broker. This is available only when loan is 2015 RESPA-TILA.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.PACLender2015">
            <summary>
            Gets the portion of the fee paid at closing by the lender. This is available only when loan is 2015 RESPA-TILA.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FundingFee.PACOther2015">
            <summary>
            Gets the portion of the fee paid at closing by the other. This is available only when loan is 2015 RESPA-TILA.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod2015">
            <summary>
            The enumeration of the different disclosure methods.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod2015.Unknown">
            <summary>Disclosure method is unknown</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod2015.Mail">
            <summary>Disclosure was sent by mail</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod2015.eDisclosure">
            <summary>Disclosure was made electronically</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod2015.Fax">
            <summary>Disclosure was sent by fax</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod2015.InPerson">
            <summary>Disclosure was delivered in person</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod2015.Other">
            <summary>An unspecified disclosure method was used</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod2015.Email">
            <summary>Disclosure was sent by eMail</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod2015.Phone">
            <summary>Disclosure was sent by phone</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod2015.Signature">
            <summary>Disclosure was signed for</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015">
            <summary>
            Represents a single Disclosure Tracking 2015 record associated with a Loan.
            </summary>
            <remarks>The inherited Date property of a Disclosure represents the
            date on which the disclosure was made.
            <p>Disclosure instances become invalid
            when the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Refresh">Refresh</see> method is
            invoked on the parent <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan">Loan</see> object. Attempting
            to access this object after invoking Refresh() will result in an
            exception.</p>
            </remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry">
            <summary>
            A LogEntry represents a single item in a loan's <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>. This
            class is an abstract base class for all possible entries that can be stored
            in the log.
            </summary>
            <remarks>LogEntry instances become invalid
            when the Loan's Refresh method is invoked. Attempting
            to access this object after invoking refresh will result in an
            exception.
            </remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogEntry">
            <summary>
            Interface for LogEntry class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry.ID">
            <summary>
            Gets the unique indentifier for this log entry.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry.Date">
            <summary>
            Gets the relevant date of the LogEntry. This date is used to sequence
            the entry in the loan's <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
            <remarks>This date may represent different values dependeing on the derived
            class implementation. For example, the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation"/> entry type uses
            this property to represent that date on which the conversation occurred. The
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/> class uses this field to indicate either the date on
            which the associated document is due to be received or the actual date it was received.
            <p>Depending on the derived class's implementation, this date may be null if, for example,
            the log entry represents an event which has not yet 
            been sequenced into the loan's lifetime. For example, if a loan has not yet been 
            sent to processing, the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent"/> for the Completion milestone will 
            have a null Date. Once the loan is sent for processing, this date will be set according
            to the rules defined for the current Encompass Server.</p>
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry.Comments">
            <summary>
            Gets or sets the comments associated with the LogEntry.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry.RoleAlerts">
            <summary>
            Gets the set of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogAlert"/> objects associated with the log entry.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry.IsAlert">
            <summary>
            Indicates is this log entry should be treated as past due or otherwise an alert.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry.EntryType">
            <summary>
            Gets the type of entry represented by this object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosureBase.DisclosedBy">
            <summary>
            Gets the User ID of the user who made the disclosure.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosureBase.DateAdded">
            <summary>
            Gets the date the disclosure record was created.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosureBase.Date">
            <summary>
            Gets or sets the Date on which the disclosure was made.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosureBase.Fields">
            <summary>
            Gets the collection of fields values which are stored when a disclosure is made.
            </summary>
            <remarks>When a disclosure is made, some field values from the loan are copied into the
            disclosure record </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosureBase.Documents">
            <summary>
            Gets the collection of documents that were included in the disclosure.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosureBase.EDisclosureStatus">
            <summary>
            Gets the eDisclosure status information for the disclosure.
            </summary>
            <remarks>This property will return <c>null</c> unless the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod"/>
            property has the value <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod.eDisclosure"/>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.EntryType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType"/> for the current entry.
            </summary>
            <remarks>This property will always return the value 
            <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.Disclosure2015"/>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.DisclosureType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosure2015Type"/> for the disclosure.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.EnabledForCompliance">
            <summary>
            Gets or sets the flag indicating disclosure is invalid.
            </summary>
            <remarks>An invalid disclosure is one that was never actually made and will not be considered for
            the purposes of determining the compliance timeline of the loan.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.DeliveryMethod">
            <summary>
            Gets or sets the 2015 DeliveryMethod
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.BorrowerActualReceivedDate">
            <summary>
            Gets or sets the BorrowerActualReceivedDate.
            </summary>
            <remarks>This property is not accessible in the SDK by default. To gain access to this property please contact your Ellie Mae account representative.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.BorrowerReceivedMethod">
            <summary>
            Gets or sets the BorrowerDisclosedMethod.
            </summary>
            <remarks>This property is not accessible in the SDK by default. To gain access to this property please contact your Ellie Mae account representative.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.CoBorrowerActualReceivedDate">
            <summary>
            Gets or sets the CoBorrowerActualReceivedDate.
            </summary>
            <remarks>This property is not accessible in the SDK by default. To gain access to this property please contact your Ellie Mae account representative. </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.CoBorrowerReceivedMethod">
            <summary>
            Gets or sets the CoBorrowerDisclosedMethod.
            </summary>
            <remarks>This property is not accessible in the SDK by default. To gain access to this property please contact your Ellie Mae account representative.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.DisclosureRecordType">
            <summary>
            Gets or sets the DisclosureRecordType
            </summary>
            <remarks>This property is not accessible in the SDK by default. To gain access to this property please contact your Ellie Mae account representative </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.AllowManualFulfillment">
            <summary>
            Allow Manual Fulfillment based on - automatic fulfillment is disabled, Manual fulfillment is enabled, no automatic fulfillment exists
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.ManualFulfilledBy">
            <summary>
            Get or Set the Manual FulfilledBy
            </summary>
            <remarks>This property is not accessible in the SDK by default. To gain access to this property please contact your Ellie Mae account representative.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.ManualFulfilledDateTime">
            <summary>
            Get or Set the Manual FulfilledDateTime
            </summary>
            <remarks>This property is not accessible in the SDK by default. To gain access to this property please contact your Ellie Mae account representative.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.ManualFulfillmentMethod">
            <summary>
            Get or Set the Manual FulfillmentMethod
            </summary>
            <remarks>This property is not accessible in the SDK by default. To gain access to this property please contact your Ellie Mae account representative.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.ManualFulfillmentCommets">
            <summary>
            Get or Set the Manual FulfillmentCommets
            </summary>
            <remarks>This property is not accessible in the SDK by default. To gain access to this property please contact your Ellie Mae account representative.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.ManualFulfillmentActualReceivedDate">
            <summary>
            Get or Set the Manual FulfillmentActualReceivedDate
            </summary>
            <remarks>This property is not accessible in the SDK by default. To gain access to this property please contact your Ellie Mae account representative.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.ManualFulfillmentPresumedReceivedDate">
            <summary>
            Get the Manual ManualFulfillmentPresumedReceivedDate 
            </summary>
            <remarks>This property is not accessible in the SDK by default. To gain access to this property please contact your Ellie Mae account representative.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.MergedDoc">
            <summary>
            Get the MergedDoc
            </summary>
            <remarks>This property is not accessible in the SDK by default. To gain access to this property please contact your Ellie Mae account representative.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.BorrowerName">
            <summary>
            Get BorrowerName if it exists
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.CoBorrowerName">
            <summary>
            Get CoBorrowerName if it exists
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.eDisclosureBorrowerName">
            <summary>
            Get eDisclosureBorrowerName
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.eDisclosureCoBorrowerName">
            <summary>
            Get eDisclosureCoBorrowerName
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.DisclosedDate">
            <summary>
            Gets or sets the DisclosedDate
            </summary>
            <remarks>This property is not accessible in the SDK by default. To gain access to this property please contact your Ellie Mae account representative.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.DisclosureRecordType2015">
            <summary>
            Gets the DisclosureRecordType
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.DisclosedDate2015">
            <summary>
            Gets the DisclosedDate
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.BorrowerReceivedMethod2015">
            <summary>
            Gets the BorrowerReceivedMethod
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.CoBorrowerReceivedMethod2015">
            <summary>
            Gets the CoBorrowerReceivedMethod
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.BorrowerActualReceivedDate2015">
            <summary>
            Gets the BorrowerActualReceivedDate
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.CoBorrowerActualReceivedDate2015">
            <summary>
            Gets the CoBorrowerActualReceivedDate
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.UCD">
            <summary>
            Gets the UCD XML string
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.ReceivedDate">
            <summary>
            Gets or sets the date the disclosure was received by the borrower.
            </summary>
            <remarks>If the disclosure has not been received, this property will be null; otherwise,
            it will be a DateTime value. To mark a disclosure as not having been received, set this
            property to null.
            When the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015.DeliveryMethod"/> for the disclosure is set to Mail, Fax, or InPerson,
            the ReceivedDate will be set automatically based on compliance regulations. For Mail deliveries,
            the ReceivedDate is always three postal days from the date sent. For Fax and InPerson, the
            date received will match the disclosure date. Attempting to set this property when the DeliveryMethod
            is any of those values will result in an exception.
            </remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellation">
            <summary>
            Provides the details of a rate lock cancellation.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellation.EntryType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType"/> for this object.
            </summary>
            <remarks>This property will return LogEntryType.LockCancellation.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellation.Date">
            <summary>
            Gets the date and time at which the lock was cancelled.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellation.AlertLO">
            <summary>
            Gets or sets a flag indicating if the loan's Loan Officer should be alerted.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellation.CancelledBy">
            <summary>
            Gets the user ID of the user who cancelled the rate lock.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellation.LockCancellationRequest">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellation.LockCancellationRequest"/> to which this cancellation applies.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellationRequest">
            <summary>
            Represents a lock cancellation request.
            </summary>
            <remarks>
            A LockCancellationRequest contains a snapshot of lock-related fields.
            See <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest"/> for more info.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellationRequest.IsActive">
            <summary>
            Determines if this cancellation request represents an active request.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellationRequest.Accept(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Accepts the request, and cancels the lock.
            </summary>
            <param name="cancellingUser"></param>
            <returns></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellationRequest.EntryType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType"/> for this object.
            </summary>
            <remarks>This property will return LogEntryType.LockCancellationRequest.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellationRequest.Date">
            <summary>
            Gets the date and time on which this cancellation request was made.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellationRequest.RequestedBy">
            <summary>
            Gets the user who made the lock request.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellationRequest.Fields">
            <summary>
            Gets the snapshot fields for this lock cancellation request.
            </summary>
            <remarks>If changes are made to the values in the lock request snapshot, the
            <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestFields.CommitChanges"/> method must be called to save those changes
            into the loan file. Otherwise, those changes will not appear in the Encompass user interface
            or be saved as part of the loan.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellationRequest.Cancellation">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellation"/> which has been provided for this lock cancellation request.
            </summary>
            <remarks>If the request is in the Active state, then there is no lock cancellation
            and this property will always return <c>null</c>
            </remarks>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosure2015Type.None">
            <summary>No standard disclosure</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosure2015Type.PROVIDERLIST">
            <summary>The Provider List disclosure</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosure2015Type.SAFEHARBOR">
            <summary>The Safe Harbor disclosure</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosure2015Type.SAFEHARBORPROVIDERLIST">
            <summary>The Safe Harbor and Provider List disclosures</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosure2015Type.CD">
            <summary>The Closing Disclosure disclosure</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosure2015Type.CDPROVIDERLIST">
            <summary>The Closing Disclosure and Provider List disclosures</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosure2015Type.CDSAFEHARBOR">
            <summary>The Closing Disclosure and Safe Harbor disclosures</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosure2015Type.CDPROVIDERLISTSAFEHARBOR">
            <summary>The Closing Disclosure, Provider List and Safe Harbor disclosures</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosure2015Type.LE">
            <summary>The Loan Estimate disclosure</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosure2015Type.LEPROVIDERLIST">
            <summary>The Loan Estimate and Provider List disclosures</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosure2015Type.LESAFEHARBOR">
            <summary>The Loan Estimate and Safe Harbor disclosures</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosure2015Type.LEPROVIDERLISTSAFEHARBOR">
            <summary>The Loan Estimate, Provider List and Safe Harbor Disclosures</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDisclosures2015">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015"/> entries held within 
            a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLogEntryCollection">
            <summary>
            Represents a collection of a single type of LogEntry objects from the loan.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLogEntryCollection.IsRecordOfType(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Determines if the specified log record belongs to the collection.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLogEntryCollection.Find(EllieMae.EMLite.DataEngine.Log.LogRecordBase,System.Boolean)">
            <summary>
            Locates a LogRecord in a LogEntry if it's the appropriate type
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLogEntryCollection.CreateEntry(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Creates a new LogEntry and adds it to the loan.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLogEntryCollection.RemoveEntry(EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry)">
            <summary>
            Creates a new LogEntry and adds it to the loan.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLogEntryCollection.PurgeEntry(System.String)">
            <summary>
            Purges an entry from the collection when the underlying record is deleted.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLogEntryCollection.GetLogEntriesFromLoan(EllieMae.EMLite.DataEngine.Log.LogList)">
            <summary>
            Loads the log entries into a LogEntryList
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLogEntryCollection.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLogEntryCollection.GetEnumerator">
            <summary>
            Provides a enumeration interface for the collection
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLogEntryCollection.Loan">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLogEntryCollection.Loan"/> to which the collection belongs.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLogEntryCollection.Count">
            <summary>
            Gets the number of entries in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLogEntryCollection.LogEntries">
            <summary>
            Accessor for the collection of LogEntry objects
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogDisclosures2015">
            <summary>
            Interface for Disclosure class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDisclosures2015.Add(System.DateTime,EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosure2015Type)">
            <summary>
            Adds a Disclosure to the loan's log.
            </summary>
            <param name="disclosureDate">The date of the disclosure.</param>
            <param name="disclosureType">The type(s) of standard disclosures included in this disclosure.</param>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015">Disclosure</see>
            object.</returns>
            <remarks>This method assumes that the user who made the disclosure is the
            same as the currently logged in user. To create an entry for a different
            user, use the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDisclosures2015.AddForUser(System.DateTime,EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosure2015Type,EllieMae.Encompass.BusinessObjects.Users.User)"/> method.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDisclosures2015.AddForUser(System.DateTime,EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosure2015Type,EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Adds a Disclosure to the loan's log.
            </summary>
            <param name="disclosureDate">The date of the conversation.</param>
            <param name="disclosureType">The type(s) of standard disclosures included in this disclosure.</param>
            <param name="disclosedBy">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/> who generated the disclosure. This
            value must match the currently logged in user unless the logged in user is
            an administrator.</param>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure2015">Disclosure</see>
            object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDisclosures2015.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockCancellationRequests">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellationRequest">LockCancellationRequests</see> 
            held within a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockCancellationRequests.Add">
            <summary>
            Creates a new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellationRequest"/> and adds it to the log.
            </summary>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellationRequest">LockCancellationRequest</see>
            object.</returns>
            <remarks>When you create a new LockCancellationRequest, any existing, current lock request will have
            its status automatically changed to <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestStatus.Inactive"/></remarks>
            <example>
      The following code creates a new Lock Request on an existing loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the loan
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Populate the lock request data in the loan. For many of these fields, we can simply
      // copy the data from the basic loan information since we want to use that same information
      // for the lock request. However, it's possible to pass information to the lock request
      // which differs from the actual values in the loan.
      loan.Fields["2951"].Value = loan.Fields["19"].Value;
      loan.Fields["2952"].Value = loan.Fields["1172"].Value;
      loan.Fields["2953"].Value = loan.Fields["608"].Value;
      loan.Fields["2958"].Value = loan.Fields["420"].Value;

      // Populate the requested lock date and lock period
      loan.Fields["2089"].Value = DateTime.Today;
      loan.Fields["2090"].Value = 30;

      // Now create the new LockRequest. This is equivalent to pressing the Request Lock button
      // on the Lock Request Form.
      LockRequest request = loan.Log.LockRequests.Add();

      // Save and close the loan file
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockCancellationRequests.Add(EllieMae.Encompass.BusinessObjects.Users.User,System.String)">
            <summary>
            Creates a new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellationRequest"/> and add it to the log.
            </summary>
            <param name="requestingUser">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/> who is issuing the request for the
            lock cancellation. If this value is <c>null</c>, the currently logged in user is assumed.</param>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellationRequest">LockCancellationRequest</see>
            object.</returns>
            <param name="comment"></param>
            <remarks><p>When you create a new LockCancellationRequest, any existing, current lock request will have
            its status automatically changed to <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestStatus.Inactive"/>.</p>
            <p>This method is supported in Banker Edition only.</p>
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockCancellationRequests.GetCurrent">
            <summary>
            Returns the currently active lock cancellation request.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockCancellationRequests.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockCancellationRequests.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellationRequest">LockCancellationRequest</see>
            from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockCancellations">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellation">LockCancellations</see> 
            held within a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockCancellations.GetCurrent">
            <summary>
            Returns the currently active lock cancellation,
            or null if there is no active lock cancellation.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockCancellations.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockCancellations.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockCancellation">LockCancellation</see>
            from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTemplateApply">
            <summary>
            Implementation of the ILoanMilestoneTemplateOrchestrator interface used for applying a MilestoneTemplate to a loan.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTemplateApply.IsManualApply">
            <summary>
            Returns if the application of the MilestoneTemplate should be in Manual mode.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTemplateApply.SelectMilestoneTemplate(System.Collections.Generic.IEnumerable{EllieMae.EMLite.Workflow.MilestoneTemplate},System.Collections.Generic.List{System.String},System.String,EllieMae.EMLite.Workflow.MilestoneTemplate@)">
            <summary>
            Returns the MilestoneTemplate that is going to be applied to the loan.
            </summary>
            <param name="milestoneTemplates">The list of all MilestoneTemplate objects</param>
            <param name="satisfiedTemplates">The list of MilestoneTemplate that match the conditions of the loan.</param>
            <param name="currentTemplateName">The current template</param>
            <param name="selectedTemplate">The selected MilestoneTemplate to apply</param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTemplateApply.MilestoneLogChangeConfirmation(EllieMae.EMLite.Workflow.MilestoneTemplate,EllieMae.EMLite.DataEngine.Log.LogList,System.Int32,System.Collections.Generic.Dictionary{EllieMae.EMLite.RemotingServices.UserInfo,System.Collections.Generic.List{System.String}},System.Collections.Generic.Dictionary{EllieMae.EMLite.RemotingServices.UserInfo,System.Collections.Generic.List{System.String}},System.Collections.Generic.List{EllieMae.EMLite.DataEngine.Log.LogRecordBase},System.Collections.Generic.List{EllieMae.EMLite.DataEngine.Log.LogRecordBase},System.Collections.Generic.List{System.String}@)">
            <summary>
            Used for email confirmation. Unused for SDK.
            </summary>
            <param name="newTemplate"></param>
            <param name="logList"></param>
            <param name="startingMilestoneToBeReplaced"></param>
            <param name="sendEmail"></param>
            <param name="dontSendEmail"></param>
            <param name="logRecordDifference"></param>
            <param name="logRecords"></param>
            <param name="confirmedEmailList"></param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTemplateApply.OnCompletion(System.Collections.Generic.List{System.String})">
            <summary>
            Logic for actions after apply is complete.
            </summary>
            <param name="users"></param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTemplateApply.ShowUI">
            <summary>
            Detrmines if the UI should be shown.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTemplateApply.LoanConditions">
            <summary>
            Returns the conditions for the MilestoneTemplate
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TemplateCondition">
            <summary>
            This represents the conditions for a <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate">MilestoneTemplate</see>.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TemplateCondition.ConditionType">
            <summary>
            Gets the type of condition.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TemplateCondition.Condition">
            <summary>
            Gets the value of the condition when <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TemplateCondition.ConditionType">ConditionType</see> is LoanType or LoanPurpose.
            <remarks>This value is empty for <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TemplateCondition.ConditionType">ConditionType</see> None and AdvancedCondition.</remarks>
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TemplateCondition.AdvancedCondition">
            <summary>
            Gets the value of the condition when <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TemplateCondition.ConditionType"/> is AdvancedCondition.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TemplateConditionType">
            <summary>
            Types of conditions that can be applied to a <see cref="T:EllieMae.Encompass.BusinessEnums.MilestoneTemplate">MilestoneTemplate</see>
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotation">
            <summary>
            Represents an annotation for an attachment.
            </summary>
            <remarks>Every <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan"/> is capable of having any number of electronic
            document attachments associated with in via the eFolder in Encompass. 
            If the loan is using images, the attachment can contain image pages with annotations.
            </remarks>
            <example>
The following code demonstrates how to extract all of the attachments from
a loan and save them to a directory on the local disk.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Iterate over the list of attachments, saving them to the C:\Temp folder
      foreach (Attachment att in loan.Attachments)
         att.SaveToDisk("C:\\Temp\\" + att.Name);

      // Close the loan, discarding all of our changes
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IPageImageAnnotation">
            <summary>
            Interface for PageImageAnnotation class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotation.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the PageAnnotation class
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotation.Date">
            <summary>
            Returns the date that the annotation was created
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotation.AddedBy">
            <summary>
            Returns the user that created the annotation
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotation.Text">
            <summary>
            Returns the text in the annotation
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotation.Left">
            <summary>
            Returns the horizontal location of the annotation
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotation.Top">
            <summary>
            Returns the vertical location of the annotation
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotation.Width">
            <summary>
            Returns the width of the annotation
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotation.Height">
            <summary>
            Returns the height of the annotation
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.AttachmentPageImage">
            <summary>
            Represents a page image that can be part of a collection for an <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/>.
            </summary>
            <remarks>Every <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan"/> is capable of having any number of electronic
            document attachments associated with in via the eFolder in Encompass. 
            If the loan is using images, the attachment can contain image pages.
            </remarks>
            <example>
The following code demonstrates how to extract all of the attachments from
a loan and save them to a directory on the local disk.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Iterate over the list of attachments, saving them to the C:\Temp folder
      foreach (Attachment att in loan.Attachments)
         att.SaveToDisk("C:\\Temp\\" + att.Name);

      // Close the loan, discarding all of our changes
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IAttachmentPageImage">
            <summary>
            Interface for AttachmentPageImage class.
            </summary>
            <exclude/>
            
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.AttachmentPageImage.Thumbnail">
            <summary>
            Returns the thumbnail for this page
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.AttachmentPageImage.Annotations">
            <summary>
            Returns the collection of annotations
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.AttachmentPageImages">
            <summary>
            Represents the collection of AttachmentPageImage objects that are associated with an <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/>.
            </summary>
            <remarks>Attachments represent documents which have been associated to the loan through
            the loan's eFolder. If the loan is configured to use images, it can have an AttachmentPageImages collection.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IAttachmentPageImages">
            <summary>
            Interface for AttachmentPageImages class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.AttachmentPageImages.Add(EllieMae.Encompass.BusinessObjects.Loans.AttachmentPageImage)">
            <summary>
            Adds an item to the list. Internal since user should not be able to create a new PageImage instance.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.AttachmentPageImages.Remove(EllieMae.Encompass.BusinessObjects.Loans.AttachmentPageImage)">
            <summary>
            Removes a page image from the ccollection. User should refresh list after calling.
            </summary>
            <param name="attachmentPageImage">The page image to be removed.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.AttachmentPageImages.GetEnumerator">
            <summary>
            Provides a enumerator for the collection.
            </summary>
            <returns>Returns an IEnumerator for enumerating the collection.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.AttachmentPageImages.Count">
            <summary>
            Gets the number of AttachmentPageImages in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.AttachmentPageImages.Item(System.Int32)">
            <summary>
            Retrieves an AttachmentPageImage from the collection by index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotations">
            <summary>
            Represents the collection of PageImageAnnotation objects that are associated with an <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/>.
            </summary>
            <remarks>Attachments represent documents which have been associated to the loan through
            the loan's eFolder. If the loan is configure to use images, it can have an PageImageAnnotations collection.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IPageImageAnnotations">
            <summary>
            Interface for PageImageAnnotations class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotations.#ctor(EllieMae.EMLite.ClientServer.eFolder.PageImage)">
            <summary>
            Creates an instance of the PageImageAnnotations class
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotations.AddToList(EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotation)">
            <summary>
            Used internally to add existing annotations to the collection.
            </summary>
            <param name="annotation">The annotation to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotations.Add(EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotation)">
            <summary>
            Adds a new annotation object.
            </summary>
            <param name="annotation">The annotation to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotations.Remove(EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotation)">
            <summary>
            Removes an annotation to the ccollection. User should refresh annotations list after calling.
            </summary>
            <param name="annotation">The annotation to be removed.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotations.GetEnumerator">
            <summary>
            Provides a enumerator for the collection.
            </summary>
            <returns>Returns an IEnumerator for enumerating the collection.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotations.Count">
            <summary>
            Gets the number of PageImageAnnotations in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PageImageAnnotations.Item(System.Int32)">
            <summary>
            Retrieves an AttachmentPageImage from the collection by index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.PageImageThumbnail">
            <summary>
            Represents a thumbnail for a page image.
            </summary>
            <remarks>Every <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan"/> is capable of having any number of electronic
            document attachments associated with in via the eFolder in Encompass. 
            If the loan is using images, the attachment can contain image pages and thumbnails of those images.
            </remarks>
            <example>
The following code demonstrates how to extract all of the attachments from
a loan and save them to a directory on the local disk.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Iterate over the list of attachments, saving them to the C:\Temp folder
      foreach (Attachment att in loan.Attachments)
         att.SaveToDisk("C:\\Temp\\" + att.Name);

      // Close the loan, discarding all of our changes
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IPageImageThumbnail">
            <summary>
            Interface for PageImageThumbnail class.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdate">
            <summary>
            Provides a class for encapsulating a batch update to a set of loans.
            </summary>
            <example>
      The code below demonstrates how to update the broker name and address
      fields on a batch of loans in a single call to the Encompass Server.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "admin", "password");

      // Generate the list of loan GUIDs that will be updated
      StringList guids = new StringList();
      guids.Add("{55fbe34f-055f-48d0-ade5-2ec5ccfc555a}");
      guids.Add("{78b61507-c4da-4051-9283-a9e6650318eb}");
      guids.Add("{2c680754-816d-4826-a161-bb1b8f2fc51b}");

      // We will update the broker company information on the 1003 form
      BatchUpdate batch = new BatchUpdate(guids);
      batch.Fields.Add("315", "Encompass Loan Specialists, Inc.");
      batch.Fields.Add("319", "123 Main Street");
      batch.Fields.Add("313", "Anywhereville");
      batch.Fields.Add("321", "MO");
      batch.Fields.Add("323", "24432");

      // Submit the batch to the server
      session.Loans.SubmitBatchUpdate(batch);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdate.#ctor(System.String)">
            <summary>
            Constructs a new BatchUpdate for a single loan.
            </summary>
            <param name="loanGuid">The GUID of the loan to be updated.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdate.#ctor(EllieMae.Encompass.Collections.StringList)">
            <summary>
            Constructs a new BatchUpdate from a list of loan GUIDs.
            </summary>
            <param name="loanGuids">A list of the loan GUIDs to be updated.</param>
            <example>
      The code below demonstrates how to update the broker name and address
      fields on a batch of loans in a single call to the Encompass Server.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "admin", "password");

      // Generate the list of loan GUIDs that will be updated
      StringList guids = new StringList();
      guids.Add("{55fbe34f-055f-48d0-ade5-2ec5ccfc555a}");
      guids.Add("{78b61507-c4da-4051-9283-a9e6650318eb}");
      guids.Add("{2c680754-816d-4826-a161-bb1b8f2fc51b}");

      // We will update the broker company information on the 1003 form
      BatchUpdate batch = new BatchUpdate(guids);
      batch.Fields.Add("315", "Encompass Loan Specialists, Inc.");
      batch.Fields.Add("319", "123 Main Street");
      batch.Fields.Add("313", "Anywhereville");
      batch.Fields.Add("321", "MO");
      batch.Fields.Add("323", "24432");

      // Submit the batch to the server
      session.Loans.SubmitBatchUpdate(batch);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdate.#ctor(EllieMae.Encompass.Query.QueryCriterion)">
            <summary>
            Constructs a new BatchUpdate using the specified selection criteria for the loans.
            </summary>
            <param name="selectionCriteria">The criteria which specifies which loans should be updated.
            A <c>null</c> value will cause all loans to be updated.</param>
            <example>
      The following code locates all loans where credit was provided by a specific
      provider and updates the address info for the provider.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Search for any loan where the credit was provided by "ABC Credit"
      StringFieldCriterion cri = new StringFieldCriterion();
      cri.FieldName = "Loan.CreditVendor";
      cri.Value = "ABC Credit";
      cri.MatchType = StringFieldMatchType.Exact;

      // We will update the credit company's contact info
      BatchUpdate batch = new BatchUpdate(cri);
      batch.Fields.Add("626", "376 Garden Parkway");
      batch.Fields.Add("627", "Garden City");
      batch.Fields.Add("1245", "NJ");
      batch.Fields.Add("628", "03223");

      // Submit the batch to the server
      session.Loans.SubmitBatchUpdate(batch);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdate.Fields">
            <summary>
            Gets the collection of field values to be updated as part of the batch.
            </summary>
            <example>
      The following code locates all loans where credit was provided by a specific
      provider and updates the address info for the provider.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Search for any loan where the credit was provided by "ABC Credit"
      StringFieldCriterion cri = new StringFieldCriterion();
      cri.FieldName = "Loan.CreditVendor";
      cri.Value = "ABC Credit";
      cri.MatchType = StringFieldMatchType.Exact;

      // We will update the credit company's contact info
      BatchUpdate batch = new BatchUpdate(cri);
      batch.Fields.Add("626", "376 Garden Parkway");
      batch.Fields.Add("627", "Garden City");
      batch.Fields.Add("1245", "NJ");
      batch.Fields.Add("628", "03223");

      // Submit the batch to the server
      session.Loans.SubmitBatchUpdate(batch);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdateField">
            <summary>
            Represents a single field value to be updated with the Batch Loan Update function.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdateField.FieldID">
            <summary>
            Gets the FieldID of the field to be updated.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdateField.FieldValue">
            <summary>
            Gets the value of the field to be stored.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdateFields">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdateField"/> values associated with a 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdate"/>.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdateFields.Add(System.String,System.Object)">
            <summary>
            Adds a new field value to the batch update.
            </summary>
            <param name="fieldId">The Field ID for the field to be updated.</param>
            <param name="fieldValue">The value to be assigned to the field.</param>
            <remarks>The Field ID specified can be any loan field except for virtual field values.
            The field value specified should have a type which is correct for the specified
            field. If a record already exists in the batch for this field ID, it will be
            replaced with this new value.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdateFields.Remove(System.String)">
            <summary>
            Removes a field from the collection based using its Field ID.
            </summary>
            <param name="fieldId">The Field ID of the field to be removed.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdateFields.Contains(System.String)">
            <summary>
            Determines if a field is contained in the batch.
            </summary>
            <param name="fieldId">The Field ID to be checked.</param>
            <returns>Returns <c>true</c> if the batch contains a record for the specified field,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdateFields.Count">
            <summary>
            Gets the number of fields in the batch.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdateFields.Item(System.String)">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdateField"/> for a specified Field ID.
            </summary>
            <param name="fieldId">The Field ID for which the record should be retrieved.</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdateField"/> is one is present,
            <c>null</c> otherwise.</returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Fields">
            <summary>
            Represents the collection of fields associated with an object.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IFields">
            <summary>
            Interface for LoanFields class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Fields.CreateField(System.String)">
            <summary>
            Creates a Field for the specified Field ID.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Fields.Item(System.String)">
            <summary>
            Gets the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanField">LoanField</see> based on the
            field ID provided.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanVestingParties">
            <summary>
            Provides access to the set of non-borrower Vesting Parties associated with a loan.
            </summary>
            <remarks>The items within this set are indexed starting with the value
            1. An attempt to access an item in this collection with a value less than
            1 will result in an InvalidArgumentException.
            </remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanVestingParties">
            <summary>
            Interface for LoanVestingParties class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanVestingParties.Add">
            <summary>
            Adds a new vesting party to the loan.
            </summary>
            <returns>The function returns the index of the newly created trustee.
            This value should be used to access trustee-related loan fields
            using the GetFieldAt() method of the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanFields">LoanFields</see>
            object.
            </returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanVestingParties.RemoveAt(System.Int32)">
            <summary>
            Removes a vesting party from the current loan.
            </summary>
            <param name="index">The 1-based index of the trustee to remove.</param>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanVestingParties.Count">
            <summary>
            Gets the number of non-borrower vesting parties defined for the current loan.
            </summary>
            <remarks>This count does not includes borrowers and co-borrowers entered on the 1003.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrderType">
            <summary>
            Enumerated the type of document orders supported by the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder"/> object.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder">
            <summary>
            The DocumentOrder represents a transaction with the Encompass360 Document Service.
            </summary>
            <remarks>This order log can represent either a request for Opening or for Closing documents.
            The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder.OrderType"/> property indicates which type of transaction occurred.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder.EntryType">
            <summary>
            Gets the type of entry for this log item.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder.OrderType">
            <summary>
            Gets the type of document order represented by this log
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder.OrderedBy">
            <summary>
            Returns the User ID of the user who placed the document order.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder.DocumentsAvailable">
            <summary>
            Indicates if the documents associated with the order are still available
            </summary>
            <remarks>The availability of the documents is determined by the company's document retention
            policy.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder.DateDocumentsPurged">
            <summary>
            Gets the date the Documents were purged from the Encompass system.
            </summary>
            <remarks>If the documents have been purged based on the company's retention policy, this property
            will return the date that occurred. If the documents have not been purged, this will return <c>null</c>.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder.Documents">
            <summary>
            Gets the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.OrderedDocument"/> objects associated with this order.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder.Fields">
            <summary>
            Gets the collection of field values associated with this order.
            </summary>
            <remarks>This field collection is read-only.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder.OrderLog">
            <summary>
            Gets the DocumentOrderLog for this document
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrderDocuments">
            <summary>
            Provides the interface for retrieving the documents associated with a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder"/>.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrderDocuments.GetDocumentByGuid(System.String)">
            <summary>
            Retrieves a document by its unique identifier.
            </summary>
            <param name="docGuid">The GUID of the document to be retrieved.</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.OrderedDocument"/> with the matching GUID, or <c>null</c>
            if no matching document is found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrderDocuments.GetEnumerator">
            <summary>
            Provides an enumerator for the collection
            </summary>
            <returns>Returns an enumerator for iterating over the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.OrderedDocument"/> objects
            in the collection.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrderDocuments.toOrderedDocument(EllieMae.EMLite.DataEngine.Log.OrderedDocument)">
            <summary>
            Converts an OrderedDocument in the low-level DataEngine to an OrderedDocument in the API
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrderDocuments.Count">
            <summary>
            Gets the number of documents in the order.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrderDocuments.Item(System.Int32)">
            <summary>
            Gets a document by index
            </summary>
            <param name="index">This index of the document to be returned.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.OrderedDocument"/> specified by the index.</returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrderFields">
            <summary>
            Represents the collection of field values associated with a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder"/>.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrderFields.loadFieldDescriptors">
            <summary>
            Ensures that the list of field descriptors is loaded for this object
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrderFields.Descriptors">
            <summary>
            Gets the field descriptors for the fields in the collection.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus">
            <summary>
            Rerepresents the status of an eDisclosure sent to a borrower.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IEDisclosureStatus">
            <summary>
            Interface for Disclosure class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus.Refresh">
            <summary>
            Refreshes the status of the eDisclosure package, if there is one
            </summary>
            <returns>Returns <c>true</c> if the package information was updated,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus.BorrowerViewMessageDate">
            <summary>
            Gets the date the borrower viewed the eDisclosure message.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus.CoBorrowerViewMessageDate">
            <summary>
            Gets the date the co-borrower viewed the eDisclosure message.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus.BorrowerViewConsentDate">
            <summary>
            Gets the date the borrower viewed the eDisclosure consent agreement.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus.CoBorrowerViewConsentDate">
            <summary>
            Gets the date the co-borrower viewed the eDisclosure consent agreement.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus.BorrowerAcceptConsentDate">
            <summary>
            Gets the date the borrower accepted the eDisclosure consent agreement.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus.CoBorrowerAcceptConsentDate">
            <summary>
            Gets the date the co-borrower accepted the eDisclosure consent agreement.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus.BorrowerRejectConsentDate">
            <summary>
            Gets the date the borrower rejected the eDisclosure consent agreement.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus.CoBorrowerRejectConsentDate">
            <summary>
            Gets the date the co-borrower rejected the eDisclosure consent agreement.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus.BorrowereSignedDate">
            <summary>
            Gets the date the borrower signed the eDisclosure package.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus.CoBorrowereSignedDate">
            <summary>
            Gets the date the co-borrower signed the eDisclosure package.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus.BorrowerWetSignedDate">
            <summary>
            Gets the date the borrower wet signed the disclosure package.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus.CoBorrowerWebSignedDate">
            <summary>
            Gets the date the co-borrower wet signed the disclosure package.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus.PackageCreatedDate">
            <summary>
            Gets the date the eDisclosure packaged was generated.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus.FulfillmentOrderedBy">
            <summary>
            Gets the User ID of the user who ordered fulfillment of the eDisclosure package.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus.FullfillmentProcessedDate">
            <summary>
            Gets the date the eDisclosure package was processed for fulfillment by mail.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDisclosureStatus.IsWetSigned">
            <summary>
            Indicates whether the disclosure package was wet signed.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.HtmlEmailMessage">
            <summary>
            Represents an html email message that is sent from the client
            of Encompass.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IHtmlEmailMessage">
            <summary>
            Interface for IHtmlEmailMessage class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.HtmlEmailMessage.EntryType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType"/> for the current entry.
            </summary>
            <remarks>This property will always return the value 
            <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.HtmlEmailMessage"/>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.HtmlEmailMessage.Date">
            <summary>
            Gets the date on which the Html email message was created.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.HtmlEmailMessage.Description">
            <summary>
            Gets the description of the EDM Transaction.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.HtmlEmailMessage.Creator">
            <summary>
            Gets the name of the user who initiated this transaction.
            </summary>        
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.HtmlEmailMessage.Sender">
            <summary>
            Gets the email address of the sender of the html message.
            </summary>        
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.HtmlEmailMessage.Recipient">
            <summary>
            Gets the email addresses of the recipients of the email message.
            </summary>        
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.HtmlEmailMessage.Subject">
            <summary>
            Gets the subject of the html email message.
            </summary>        
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.HtmlEmailMessage.Body">
            <summary>
            Gets the body of the html email message.
            </summary>        
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogHtmlEmailMessages">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.HtmlEmailMessage"/> objects held within
            a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>     
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogHtmlEmailMessages">
            <summary>
            Interface for HtmlEmailMessages class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogHtmlEmailMessages.Remove(EllieMae.Encompass.BusinessObjects.Loans.Logging.HtmlEmailMessage)">
            <summary>
            Removes an <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.HtmlEmailMessage"/> from the log.
            </summary>
            <param name="message">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.HtmlEmailMessage"/> to be removed.
            The specified entry must be an instance that belongs to the
            current Loan object.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogHtmlEmailMessages.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogHtmlEmailMessages.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.HtmlEmailMessage"/> from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDocumentOrders">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder"/> entries held within
            a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDocumentOrders.GetMostRecentOrder(EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrderType)">
            <summary>
            Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder"/> that represents the most recent
            order of the given type.
            </summary>
            <param name="orderType">The type of order that was placed.</param>
            <returns>The most recent <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder"/> of the given 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrderType"/> is returned. If not orders exist of the given
            type, <c>null</c> is returned.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDocumentOrders.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDocumentOrders.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder"/> from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.OrderedDocument">
            <summary>
            Represents a single document that is part of a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DocumentOrder"/>.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.OrderedDocument.Retrieve">
            <summary>
            Retrieves the document from the Encompass Server.
            </summary>
            <returns>If the document has been purged or cannot be located, this method will return
            <c>null</c>.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.OrderedDocument.ID">
            <summary>
            Returns a unique identifier for the document
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.OrderedDocument.Title">
            <summary>
            Gets the name of the document
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.OrderedDocument.DocumentType">
            <summary>
            Gets the document type, such as "Closing Document", "Standard Form", etc.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.OrderedDocument.StackingCategory">
            <summary>
            Gets the category used to stack this document when a Stacking Order is applied.
            </summary>
            <remarks>If the document does nto belong to a stacking order category, this
            property will return an empty string.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.OrderedDocument.SignatureType">
            <summary>
            Gets the signature type for the document
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.OrderedDocument.BorrowerPairID">
            <summary>
            Gets the Borrower Pair identifier for this document
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.OrderedDocument.Size">
            <summary>
            Gets the size of the document, in bytes
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.OrderedDocument.DocumentTemplateGuid">
            <summary>
            Gets the Document Template Guid from which the document derived if the 
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.OrderedDocument.DocumentType"/> is either "Standard Form" or "Custom Form".
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.RolePersonas">
            <summary>
            Provides the collection or <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/> objects associated with a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IRolePersonas">
            <summary>
            Interface for Role class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.RolePersonas.GetEnumerator">
            <summary>
            Provides a enumerator for the collection.
            </summary>
            <returns>Returns an IEnumerator for enumerating the collection.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.RolePersonas.Count">
            <summary>
            Gets the number of personas in the collection
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.RolePersonas.Item(System.Int32)">
            <summary>
            Returns a persona from the collection by index.
            </summary>
            <param name="index">The index of the desired persona.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/> at the specified index in the collection.</returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.RoleUserGroups">
            <summary>
            Provides the collection or <see cref="T:EllieMae.Encompass.BusinessObjects.Users.UserGroup"/> objects associated with a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IRoleUserGroups">
            <summary>
            Interface for Role class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.RoleUserGroups.GetEnumerator">
            <summary>
            Provides a enumerator for the collection.
            </summary>
            <returns>Returns an IEnumerator for enumerating the collection.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.RoleUserGroups.Count">
            <summary>
            Gets the number of UserGroups in the collection
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.RoleUserGroups.Item(System.Int32)">
            <summary>
            Returns a UserGroup from the collection by index.
            </summary>
            <param name="index">The index of the desired UserGroup.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.UserGroup"/> at the specified index in the collection.</returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction">
            <summary>
            Represents a generic servicing transaction for a loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.IServicingTransaction">
            <summary>
            Interface for ServicingTransaction class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction.Equals(System.Object)">
            <summary>
            Verifies equality between two transaction
            </summary>
            <param name="obj">The transaction to compare to.</param>
            <returns>Return true if the two objects represent the same transaction, false otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction.GetHashCode">
            <summary>
            Provides a hash code implementation for a servicing transaction.
            </summary>
            <returns>Returns a hash code for the object.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction.ID">
            <summary>
            Gets the unique GUID for the transaction.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction.TransactionType">
            <summary>
            Gets the type of transaction represented by the object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction.TransactionDate">
            <summary>
            Gets or sets the date on which the transaction occurred.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction.TransactionAmount">
            <summary>
            Gets or sets the dollar amount of the transaction.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction.PaymentMethod">
            <summary>
            Gets or sets the payment method used for the transaction.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction.CreatedBy">
            <summary>
            Gets the Login ID of the user who created this transaction.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction.CreationDate">
            <summary>
            Gets the date and time when the transaction was created.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction.LastModifiedBy">
            <summary>
            Gets the Login ID of the user who last modified this transaction.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction.LastModifiedDate">
            <summary>
            Gets the date and time of the last modification to this transaction.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.IPurchaseAdvice">
            <summary>
            Interface for PurchaseAdvice class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PurchaseAdvice.PurchaseAdviceDate">
            <summary>
            Gets the date on which this payment was originally scheduled to be due.
            </summary>
            <remarks>This date will differ from the <see cref="!:PaymentDueDate"/> only if the
            PaymetDueDate has been override by the user. In that case, this property will indicate
            the original due date of the scheduled payment.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.ClosingCost">
            <summary>
            Represents a saved Closing Cost template which can be applied to a loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.Template">
            <summary>
            Provides the base class for all template objects in Encompass.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.ITemplate">
            <summary>
            Interface for the Template class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.Template.Unwrap">
            <summary>
            Unwraps the template object to return the internal data type.
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.Template.Name">
            <summary>
            Gets the name of the template
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.Template.Path">
            <summary>
            Gets the path of the template.
            </summary>
            <remarks>The path will have the form "public:\folder\templatename" or
            "personal:\folder\templatename".</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.Template.TemplateEntry">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.Template.TemplateEntry"/> for the Template.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.Template.TemplateType">
            <summary>
            Gets the type of template represented by the object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.Template.Description">
            <summary>
            Gets the description of the Template object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.Template.FileSystemEntry">
            <summary>
            Provides access to the low-level FileSystemEntry for the template.
            </summary>
            <remarks>This property is meant to be used internally by Encompass only.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.IClosingCost">
            <summary>
            Interface for the ClosingCost class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.ClosingCost.Unwrap">
            <summary>
            Unwraps the template object to return the internal data type.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.ClosingCost.IsLocked(System.String)">
            <summary>
            Gets the field lock status.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.ClosingCost.TemplateType">
            <summary>
            Returns the type of template represented by the object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.ClosingCost.Description">
            <summary>
            Gets the description of the template.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.ClosingCost.Fields">
            <summary>
            Gets the collection of fields associated with the template.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.ConditionDocuments">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> objects associated with a
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.ConditionTemplate"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.IConditionDocuments">
            <summary>
            Represents the interface for the ConditionDocuments object.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.ConditionDocuments.GetTemplateByID(System.String)">
            <summary>
            Retrieves the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> with the specified ID from the collection.
            </summary>
            <param name="templateId">The ID of the requested template.</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> with the specified ID or, if no template
            with the specified ID exists, returns <c>null</c>.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.ConditionDocuments.Contains(EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate)">
            <summary>
            Determines if a DocumentTemplate is in the collection.
            </summary>
            <param name="template">The template to check for existence.</param>
            <returns>Returns <c>true</c> if the template is in the collection, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.ConditionDocuments.GetEnumerator">
            <summary>
            Provides an enumerator for the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.ConditionDocuments.Count">
            <summary>
            Gets the number of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> objects in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.ConditionDocuments.Item(System.Int32)">
            <summary>
            Retrieves a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> from the collection by index.
            </summary>
            <param name="index">The index of the specified template.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> at the specified index.</returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.ConditionTemplate">
            <summary>
            Provides a base class for the condition templates that are defined in Encompass.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.IConditionTemplate">
            <summary>
            Represents the interface for the ConditionDocuments object.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.ConditionTemplate.Equals(System.Object)">
            <summary>
            Provides an equality comparer for two templates.
            </summary>
            <returns>Returns <c>true</c> if the IDs of the two templates are the same, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.ConditionTemplate.GetHashCode">
            <summary>
            Provides a hash code for the object based on the ID.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.ConditionTemplate.loadConditionDocuments">
            <summary>
            Creates a ConditionDocuments object for a template.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.ConditionTemplate.ID">
            <summary>
            Returns the unique identifier for the condition template.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.ConditionTemplate.Title">
            <summary>
            Gets the title of the condition.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.ConditionTemplate.Description">
            <summary>
            Gets the description of the template
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.ConditionTemplate.Documents">
            <summary>
            Gets the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> objects associated with the condition.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DataTemplate">
            <summary>
            Represents a saved Data Template which can be applied to a loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.IDataTemplate">
            <summary>
            Interface for the DataTemplate class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.DataTemplate.Unwrap">
            <summary>
            Unwraps the template object to return the internal data type.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.DataTemplate.TemplateType">
            <summary>
            Returns the type of template represented by the object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.DataTemplate.Description">
            <summary>
            Gets the description of the template.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.DataTemplate.Fields">
            <summary>
            Gets the collection of fields associated with the template.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DataTemplate.DataTemplateFields">
            <summary>
            Provides an override of the Fields class for the DataTemplate
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentSet">
            <summary>
            Represents a saved Document Set template which can be applied to a loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.IDocumentSet">
            <summary>
            Interface for the DocumentSet class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentSet.GetDocumentsForMilestone(EllieMae.Encompass.BusinessEnums.Milestone)">
            <summary>
            Retrieves all documents for the specified milestone.
            </summary>
            <param name="ms">The <see cref="T:EllieMae.EMLite.Common.Milestone"/></param>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.DocumentTemplateList"/> containing the 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> objects which are assigned to the specified milestone.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentSet.GetAllDocuments">
            <summary>
            Retrieves all documents which are part of the Document Set.
            </summary>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.DocumentTemplateList"/> containing the 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> objects which are part of the document set.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentSet.Unwrap">
            <summary>
            Unwraps the template object to return the internal data type.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentSet.TemplateType">
            <summary>
            Returns the type of template represented by the object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentSet.Description">
            <summary>
            Gets the description of the template.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.InputFormSet">
            <summary>
            Represents a saved Input Form Set which can be applied to a loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.IInputFormSet">
            <summary>
            Interface for the InputFormSet class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.InputFormSet.Unwrap">
            <summary>
            Unwraps the template object to return the internal data type.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.InputFormSet.TemplateType">
            <summary>
            Returns the type of template represented by the object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.InputFormSet.Description">
            <summary>
            Gets the description of the template.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.Investor">
            <summary>
            Represents a saved Task Set template which can be applied to a loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.IInvestor">
            <summary>
            Interface for the TaskSet class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.Investor.Unwrap">
            <summary>
            Unwraps the template object to return the internal data type.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.Investor.InvestorName">
            <summary>
            Returns the type of template represented by the object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.Investor.TemplateType">
            <summary>
            Returns the type of template represented by the object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.Investor.Description">
            <summary>
            Gets the description of the template.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanProgram">
            <summary>
            Represents a saved Loan Program which can be applied to a loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.ILoanProgram">
            <summary>
            Interface for the LoanProgram class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanProgram.Unwrap">
            <summary>
            Unwraps the template object to return the internal data type.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanProgram.TemplateType">
            <summary>
            Returns the type of template represented by the object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanProgram.Description">
            <summary>
            Gets the description of the template.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanProgram.Fields">
            <summary>
            Gets the collection of fields associated with the template.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplate">
            <summary>
            Represents a configured condition template which can be used to create a 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.IPostClosingConditionTemplate">
            <summary>
            Represents the interface for the PostClosingConditionTemplate object.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplate.Source">
            <summary>
            Gets the source for the template.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplate.Recipient">
            <summary>
            Gets the intended recipient of the condition.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplate.DaysToReceive">
            <summary>
            Returns the number of days for the condition to be received once ordered.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplates">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplate"/> objects defined in the system settings.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.IPostClosingConditionTemplates">
            <summary>
            Represents the interface for the PostClosingConditionTemplates object.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplates.GetTemplateByID(System.String)">
            <summary>
            Retrieves a template from the collection using its unique ID.
            </summary>
            <param name="templateId">The ID of the template to be retrieved.</param>
            <returns>Returns the requested <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplate"/> or, if no template matches
            the specified ID, returns <c>null</c>.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplates.GetTemplateByTitle(System.String)">
            <summary>
            Retrieves a template from the collection by title.
            </summary>
            <param name="title">The name of the template to be retrieved.</param>
            <returns>Returns the requested <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> or, if no template matches
            the specified title, returns <c>null</c>. The compaison for the purposes of string matching
            is case insensitive.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplates.Refresh">
            <summary>
            Refreshes the PostClosingCondition Template list from the server.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplates.GetEnumerator">
            <summary>
            Provides an enumerator for the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplates.Count">
            <summary>
            Gets the number of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplate"/> objects in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplates.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplate"/> at a specified index in the collection.
            </summary>
            <param name="index">The index of the requested template.</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplate"/> at the specified index.</returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskSet">
            <summary>
            Represents a saved Task Set template which can be applied to a loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.ITaskSet">
            <summary>
            Interface for the TaskSet class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskSet.GetTasksForMilestone(EllieMae.Encompass.BusinessEnums.Milestone)">
            <summary>
            Retrieves all documents for the specified milestone.
            </summary>
            <param name="ms">The <see cref="T:EllieMae.EMLite.Common.Milestone"/></param>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.DocumentTemplateList"/> containing the 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> objects which are assigned to the specified milestone.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskSet.GetAllTasks">
            <summary>
            Retrieves all documents which are part of the Document Set.
            </summary>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.DocumentTemplateList"/> containing the 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> objects which are part of the document set.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskSet.Unwrap">
            <summary>
            Unwraps the template object to return the internal data type.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskSet.TemplateType">
            <summary>
            Returns the type of template represented by the object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskSet.Description">
            <summary>
            Gets the description of the template.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate">
            <summary>
            Represents a configured task template which can be used to create a 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.ITaskTemplate">
            <summary>
            Represents the interface for the TaskTemplate object.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate.Equals(System.Object)">
            <summary>
            Provides an equality comparer for two templates.
            </summary>
            <returns>Returns <c>true</c> if the IDs of the two templates are the same, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate.GetHashCode">
            <summary>
            Provides a hash code for the object based on the ID.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate.ID">
            <summary>
            Returns the unique identifier for the task template.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate.Name">
            <summary>
            Gets the name of the task.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate.DaysToComplete">
            <summary>
            Gets the number of days from the date started until the task should be completed.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate.Description">
            <summary>
            Gets the description of the task.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate.Priority">
            <summary>
            Gets the type of document represented by the template.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplates">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate"/> objects defined in the system settings.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.ITaskTemplates">
            <summary>
            Represents the interface for the TaskTemplates object.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplates.GetTemplateByID(System.String)">
            <summary>
            Retrieves a template from the collection using its unique ID.
            </summary>
            <param name="templateId">The ID of the template to be retrieved.</param>
            <returns>Returns the requested <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate"/> or, if no template matches
            the specified ID, returns <c>null</c>.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplates.GetTemplateByName(System.String)">
            <summary>
            Retrieves a template from the collection by name.
            </summary>
            <param name="taskName">The title of the template to be retrieved.</param>
            <returns>Returns the requested <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate"/> or, if no template matches
            the specified title, returns <c>null</c>. The compaison for the purposes of string matching
            is case insensitive.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplates.Refresh">
            <summary>
            Refreshes the Task Template list from the server.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplates.GetEnumerator">
            <summary>
            Provides an enumerator for the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplates.Count">
            <summary>
            Gets the number of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate"/> objects in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplates.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate"/> at a specified index in the collection.
            </summary>
            <param name="index">The index of the requested template.</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate"/> at the specified index.</returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntryType">
            <summary>
            Defines the different types of nodes within the template file structure.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntryType.None">
            <summary>No template type information</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntryType.Folder">
            <summary>Object represents a folder in the template hierarchy</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntryType.Template">
            <summary>Object represents a template</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntryType.All">
            <summary>Used to specify an action on both folders and templates</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry">
            <summary>
            Represents a node in the template file structure.
            </summary>
            <remarks>This object can represent either a specific template or a folder within the
            template file structure.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.ITemplateEntry">
            <summary>
            Interface for the Template class.
            </summary>
            <exclude/>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.PublicRoot">
            <summary>
            Represents a TemplateEntry for the root of the Public domain.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.ToString">
            <summary>
            Provides a string representation of the object.
            </summary>
            <returns>The method returns the object's <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.Path"/>.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.Equals(System.Object)">
            <summary>
            Provides an equality comparison between two TemplateEntry objects.
            </summary>
            <param name="obj">The TemplateEntry object to which to compare the current object.</param>
            <returns>Returns <c>true</c> if the two TemplateEntry objects have the same
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.Path"/>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.GetHashCode">
            <summary>
            Provides a hash code for the TemplateEntry object.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.Parse(System.String)">
            <summary>
            Creates a TemplateEntry from the specified path.
            </summary>
            <param name="userQualifiedPath">The user-qualified path of the template entry.</param>
            <returns>The TemplateEntry for this object.</returns>
            <remarks>
            <p>The <c>userQualifiedPath</c> provided must represent an absolute path and start with
            either the <c>public:\</c> or <c>personal:\</c> domain prefix. If the path is for a
            personal template, then the path must be a "user-qualified" path and have the format
            <c>personal:\&lt;userid&gt;\...</c>. The user-qualified path includes the User ID of the 
            template's owner in order to fully determine the source of the template.</p>
            <p>If the path ends
            with a "\" it will be interpreted to represent a folder, otherwise it will represent
            a template entry.</p>
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.Parse(System.String,System.String)">
            <summary>
            Creates a TemplateEntry from the specified path.
            </summary>
            <param name="path">The absolute path of the template entry.</param>
            <param name="ownerId">The User ID of the template owner, if the template is 
            in the personal domain.</param>
            <returns>The TemplateEntry for this object.</returns>
            <remarks>The <c>path</c> provided must represent an absolute path and start with
            either the <c>public:\</c> or <c>personal:\</c> domain prefix. For personal templates,
            the path is assumed not to be a "user-qualified" path and, instead, the owner of
            the template will be determined by the <c>ownerId</c> parameter.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.Combine(EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry,System.String)">
            <summary>
            Combines a TenplateEntry and a string representing a subpath into a new TemplateEntry.
            </summary>
            <param name="folderEntry">The TemplateEntry which represents the parent folder.</param>
            <param name="relativePath">The relative path of the template or folder.</param>
            <returns>Returns a TemplateEntry representing the combined path.</returns>
            <remarks>The <c>folderEntry</c> must be non-null and have a <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.EntryType"/> of
            Folder. The <c>relativePath</c> must be a string which does not start with the folder
            seperator character (\).</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.GetPersonalRoot(System.String)">
            <summary>
            Gets a TemplateEntry that represents the root of the personal domain owned by the specified user.
            </summary>
            <param name="owner">The User ID of the owner.</param>
            <returns>Returns a TemplateEntry representing the root of the owner's private domain.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.DomainPath">
            <summary>
            Gets the path of the TemplateEntry within either the public or personal domain.
            </summary>
            <remarks><p>This property will return the portion of the path which excludes the 
            <c>public:\</c> or <c>personal:\</c> domain indicator, 
            e.g. <c>\Companywide\ARM Loans\My ARM Template</c>. A path for a folder
            will always end with "\" while a path for a template will not.</p>
            <p>The retrieve the full path, including the public/personal prefix, use the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.Path"/>
            property.</p>
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.Path">
            <summary>
            Gets the full path of the TemplateEntry.
            </summary>
            <remarks><p>The path will start with either <c>public:\</c> or <c>personal:\</c>
            to denote whether the file is in the public or personal storage area. A path for a folder
            will always end with "\" while a path for a template will not.</p>
            <p>The retrieve the portion of the path without the public/personal prefix, use the 
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.DomainPath"/> property. The retrieve a "user-qualified" path for the template,
            use the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.UserQualifiedPath"/> property.</p>
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.UserQualifiedPath">
            <summary>
            Gets the user-qualified path of the TemplateEntry, which includes the owner's identity for
            private templates.
            </summary>
            <remarks><p>The path will start with either <c>public:\</c> or <c>personal:\</c>
            to denote whether the file is in the public or personal storage area. A path for a folder
            will always end with "\" while a path for a template will not.</p>
            <p>Unlike the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.Path"/> property, this property will include the template owner's User ID
            as part of the path when the TemplateEntry represents a file within a user's personal domain.
            A user-qualified path for a personal template has the format <c>personal:\&lt;userid&gt;\...</c>.
            This path can be used to differentiate between templates with the same <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.Path"/>
            but belonging to two separate users.
            </p>
            <p>The retrieve the portion of the path without the public/personal prefix, use the 
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.DomainPath"/> property.</p>
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.Name">
            <summary>
            Returns the name portion of the file or folder.
            </summary>
            <remarks>This property returns only the last portion of the path, which is the name of the
            template/folder which is represented by this object.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.EntryType">
            <summary>
            Gets the type of TemplateEntry represented by the object.
            </summary>
            <remarks>This property will return either <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntryType.Folder"/>
            or <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntryType.Template"/>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.IsPublic">
            <summary>
            Indicates if the TemplateEntry represents a public or personal object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.LastModified">
            <summary>
            Gets the last modification date of the entry.
            </summary>
            <remarks>This property will only return a valid date of the object represents a 
            <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntryType.Template"/>. For folder entries, this property will return
            <c>DateTime.MinValue</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.ParentFolder">
            <summary>
            Gets the TemplateEntry for the folder which contains the current object.
            </summary>
            <remarks>If the current TemplateEntry is the top-most node in the hierarchy,
            then this property will return <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.Owner">
            <summary>
            Gets the owner of the current TemplateEntry.
            </summary>
            <remarks>If the TemplateEntry resides in the public domain, this property will return 
            <c>null</c>. Otherwise, this property will return the User ID of the object's owner.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry.Properties">
            <summary>
            Gets the collection of custom properties attached to the TemplateEntry.
            </summary>
            <remarks>Most TemplateEntry objects which represent an actual Template will have one or more
            properties that allows for convenient display of summary info for the template, e.g. a
            Description. The proeprties are name/value pairs and can be different for each template type.
            Thus, you should use the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntryProperties.GetPropertyNames"/> method
            to determine the properties available for the specific TemplateEntry.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntryProperties">
            <summary>
            Represents the collection of properties on a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry"/> object.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.ITemplateEntryProperties">
            <summary>
            Interface for the TemplateEntryProperties class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntryProperties.GetPropertyNames">
            <summary>
            Returns the list of available properties on the object.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntryProperties.Item(System.String)">
            <summary>
            Gets a property value using the property name.
            </summary>
            <param name="propertyName">The name of the property to retrieve.</param>
            <returns>The value of the specified property if present in the collection. If no property
            exists with the specified name, a <c>null</c> is returned.</returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateFields">
            <summary>
            Represents the collection of fields that are stored for a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.Template"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.ITemplateFields">
            <summary>
            Interface for LoanFields class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateFields.CreateField(System.String)">
            <summary>
            Generates a Field from the specified Field ID.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateFields.GetDescriptorsForTemplate(EllieMae.Encompass.Client.Session,EllieMae.EMLite.DataEngine.FormDataBase)">
            <summary>
            Generates the FieldDescriptors object for a FormDataBase object
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateFields.Descriptors">
            <summary>
            Gets the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor"/> objects which define the fields
            available in the template.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplate">
            <summary>
            Represents a configured condition template which can be used to create a 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.IUnderwritingConditionTemplate">
            <summary>
            Represents the interface for the UnderwritingConditionTemplate object.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplate.ForInternalUse">
            <summary>
            Indicates if the condition is for internal use.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplate.ForExternalUse">
            <summary>
            Indicates if the condition is for external use.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplate.Category">
            <summary>
            Gets the category for the template.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplate.PriorTo">
            <summary>
            Gets the category for the template.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplate.ForRole">
            <summary>
            Gets the role that the condition is associated with, if any
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplate.AllowToClear">
            <summary>
            Indicates if the user in the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> specified as the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplate.ForRole"/> is
            permitted to clear the condition.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplates">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplate"/> objects defined in the system settings.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.IUnderwritingConditionTemplates">
            <summary>
            Represents the interface for the UnderwritingConditionTemplates object.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplates.GetTemplateByID(System.String)">
            <summary>
            Retrieves a template from the collection using its unique ID.
            </summary>
            <param name="templateId">The ID of the template to be retrieved.</param>
            <returns>Returns the requested <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplate"/> or, if no template matches
            the specified ID, returns <c>null</c>.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplates.GetTemplateByTitle(System.String)">
            <summary>
            Retrieves a template from the collection by title.
            </summary>
            <param name="title">The name of the template to be retrieved.</param>
            <returns>Returns the requested <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> or, if no template matches
            the specified title, returns <c>null</c>. The compaison for the purposes of string matching
            is case insensitive.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplates.Refresh">
            <summary>
            Refreshes the UnderwritingCondition Template list from the server.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplates.GetEnumerator">
            <summary>
            Provides an enumerator for the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplates.Count">
            <summary>
            Gets the number of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplate"/> objects in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplates.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplate"/> at a specified index in the collection.
            </summary>
            <param name="index">The index of the requested template.</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplate"/> at the specified index.</returns>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskChannelSetting.IsAllChannelsEnabled">
            <summary>
            Get or Set the setting of All Channels Indicator
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskChannelSetting.WeekdayStartDateTime">
            <summary>
            Get or Set the setting of Lock Desk Start Time - Weekday (relabel?)
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskChannelSetting.WeekdayEndDateTime">
            <summary>
            Get or Set the setting of Lock Desk End Time - Weekday (relabel?)
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskChannelSetting.IsSaturdayHoursEnabled">
            <summary>
            Get or Set the setting of Saturday Hours Indicator
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskChannelSetting.SaturdayStartDateTime">
            <summary>
            Get or Set the setting of Lock Desk Start Time - Saturday
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskChannelSetting.SaturdayEndDateTime">
            <summary>
            Get or Set the setting of Lock Desk End Time - Saturday
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskChannelSetting.IsSundayHoursEnabled">
            <summary>
            Get or Set the setting of Sunday Hours Indicator
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskChannelSetting.SundayStartDateTime">
            <summary>
            Get or Set the setting of Lock Desk Start Time - Sunday
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskChannelSetting.SundayEndDateTime">
            <summary>
            Get or Set the setting of Lock Desk End Time - Sunday
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskChannelSetting.LockDeskHoursMessage">
            <summary>
            Get or Set the setting of Lock Desk Hours Message
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskChannelSetting.LockDeskShutDownMessage">
            <summary>
            Get or Set the setting of Lock Desk Shutdown Message
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskChannelSetting.IsLockDeskShutDown">
            <summary>
            Get or Set the setting of Lock Desk Shutdown Indicator
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSetting.IsEncompassLockDeskHoursEnabled">
            <summary>
            Gets Is Encompass Lock Desk Hours Enabled Setting
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSetting.IsLockDeskShutdown">
            <summary>
            Gets Is Lock Desk Shut Down Setting
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSetting.LockDeskHoursMessage">
            <summary>
            Gets Lock Desk Hours Message
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSetting.LockDeskShutdownMessage">
            <summary>
            Gets Lock Desk Shut Down Setting
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSetting.LockDeskStartTime">
            <summary>
            Gets Lock Desk Start Time
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSetting.LockDeskEndTime">
            <summary>
            Gets Lock Desk End Time
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.BranchGlobalSettings.ONRPEnabled">
            <summary>
            Get or Set the setting of Enable ONRP Branch
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.BranchGlobalSettings.ContinuousCoverage">
            <summary>
            Get or Set the setting of Continuous Coverage of ONRP Branch
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.BranchGlobalSettings.StartTime">
            <summary>
            Get or Set the setting of ONRP Start time of Branch
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.BranchGlobalSettings.EndTime">
            <summary>
            Get or Set the setting of ONRP End time of Branch
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.BranchGlobalSettings.WeekendHoliday">
            <summary>
            Get or Set the setting of ONRP Weekend and Holiday setting of ONRP Branch
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.BranchGlobalSettings.NoMaxLimit">
            <summary>
            Get or Set the setting of ONRP No Max limit setting of ONRP Branch
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.BranchGlobalSettings.DollarLimit">
            <summary>
            Get or Set the Dollar Limit setting of ONRP Branch
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.BranchGlobalSettings.Tolerance">
            <summary>
            Get or Set the Dollar Tolerance of ONRP Branch
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.BranchGlobalSettings.ONRPSatEnabled">
            <summary>
            Get or Set setting of Enable Saturday ONRP
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.BranchGlobalSettings.ONRPSunEnabled">
            <summary>
            Get or Set setting of Enable Sunday ONRP
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.BranchGlobalSettings.SatStartTime">
            <summary>
            Get or Set setting of ONRP Saturday Start Time
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.BranchGlobalSettings.SatEndTime">
            <summary>
            Get or Set setting of ONRP Saturday End Time
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.BranchGlobalSettings.SunStartTime">
            <summary>
            Get or Set setting of ONRP Sunday Start Time
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.LockDeskSettings.BranchGlobalSettings.SunEndTime">
            <summary>
            Get or Set setting of ONRP Sunday Start Time
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSettingsService.GetLockDeskSetting">
            <summary>
            Get basic Lock Desk Hours Setting. This API is obsolete, use GetRetailLockDeskHours(), GetWholesaleLockDeskHours(), GeCorrespondentLockDeskHours() APIs instead.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSettingsService.GetRetailGlobalSetting">
            <summary>
            Get Retail Branch ONRP Setting 
            </summary> 
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSettingsService.GetWholesaleGlobalSetting">
            <summary>
            Get Wholesale Branch ONRP Setting
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSettingsService.GetCorrespondentGlobalSetting">
            <summary>
            Get Correspondent Branch ONRP Setting
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSettingsService.SetBrokerONRPSettingForTPO(System.String,EllieMae.Encompass.BusinessObjects.LockDeskSettings.ONRPBranchSettings)">
            <summary>
            Set ONRP Setting for a TPO Broker. This API is obsolete, use SetOnrpSettingForRetailChannel(int orgId, ONRPRetailBranchSetting setting) API instead.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSettingsService.SetOnrpSettingForRetailChannelFromSDK(System.Int32,EllieMae.Encompass.BusinessObjects.LockDeskSettings.ONRPRetailBranchSettings)">
            <summary>
            Set ONRP Setting for a Retail Org. This API is obsolete, use SetOnrpSettingForRetailChannel(int orgId, ONRPRetailBranchSetting setting) API instead.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSettingsService.GetOnrpSettingForRetailChannelFromSDK(System.Int32)">
            <summary>
            Get ONRP Setting for a Retail Org. This API is obsolete, use GetOnrpSettingForRetailChannel(int orgId) API instead.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSettingsService.GetOnrpSettingForBrokerChannel(System.String)">
            <summary>
            Get ONRP Setting for Broker entity.
            </summary>
            <param name="tpoId">TPO Id/Company ID</param>
            <remarks>Gets Broker ONRP Setting using TPO ID/Company ID
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSettingsService.GetOnrpSettingForCorrespontChannel(System.String)">
            <summary>
            Get ONRP Setting for Correspondent entity.
            </summary>
            <param name="tpoId">TPO Id/Company ID</param>
            <remarks>Gets Correspondent ONRP Setting using TPO ID/Company ID
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSettingsService.SetOnrpSettingForRetailChannel(System.Int32,EllieMae.Encompass.BusinessObjects.LockDeskSettings.ONRPRetailBranchSetting)">
            <summary>
            Set ONRP Setting for a Retail Org. This API is obsolete, use SetOnrpSettingForRetailChannel(int orgId, ONRPRetailBranchSetting setting) API instead.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSettingsService.GetOnrpSettingForRetailChannel(System.Int32)">
            <summary>
            Get ONRP Setting for a Retail Org. This API is obsolete, use GetOnrpSettingForRetailChannel(int orgId) API instead.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSettingsService.GetRetailLockDeskHours">
            <summary>
            Get Retail Lock Desk Setting 
            </summary> 
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSettingsService.GetWholesaleLockDeskHours">
            <summary>
            Get Wholesale Lock Desk Setting 
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.LockDeskSettings.LockDeskSettingsService.GeCorrespondentLockDeskHours">
            <summary>
            Get Correspondent Lock Desk Setting 
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMaster.CommitmentType">
            <summary>
            Gets the commitment type.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMaster.MasterCommitmentNumber">
            <summary>
            Gets the Master Commitment Number.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMaster.CompanyName">
            <summary>
            Gets the TPO Company Name.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMaster.TPOId">
            <summary>
            Gets the TPO ID.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMaster.OrganizationId">
            <summary>
            Gets the TPO Organization ID.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMaster.commitmentAmount">
            <summary>
            Gets the commitment amount.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMaster.EffectiveDate">
            <summary>
            Gets the correspondent master effective date.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMaster.expireDate">
            <summary>
            Gets the correspondent master expire date.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMaster.AvailableAmount">
            <summary>
            Gets the correspondent master available amount.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMaster.PriceGroup">
            <summary>
            Gets the price group.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMaster.Status">
            <summary>
            Gets the status of corresposndent master.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMaster.DeliveryTypes">
            <summary>
            Gets the list of corresposndent master Delivery Types.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMasterDelivery.DeliveryType">
            <summary>
            Gets the Delivery Type.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMasterDelivery.DeliveryDays">
            <summary>
            Gets the Delivery Days.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMasterDelivery.Tolerance">
            <summary>
            Gets the Tolerance.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMasterDelivery.EffectiveDate">
            <summary>
            Gets the Delivery Effective Date.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMasterDelivery.ExpireDate">
            <summary>
            Gets the Delivery Expire Date.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.ICorrespondentMasterService.GetCorrespondentMasterByNumber(System.String)">
            <summary>
            Gets Correspondent Master by Corrsespondent Master Number.
            </summary>
            <param name="number">Correspondent Master Number</param>
            <remarks>Returns single CorrespondentMaster identified by Master Number</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.ICorrespondentMasterService.GetCorrespondentMastersByTPOId(System.String)">
            <summary>
            Gets Correspondent Masters by TPO Id.
            </summary>
            <param name="tpoId">TPO Id</param>
            <remarks>Returns list of Correspondent Masters objects associated to TPO by TPO Id</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.ICorrespondentMasterService.GetCorrespondentMastersByOrganizationId(System.String)">
            <summary>
            Gets Correspondent Masters by Organization Id.
            </summary>
            <param name="orgId">TPO Organization Id</param>
            <remarks>Returns list of Correspondent Masters objects associated to TPO by Organization Id</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.ICorrespondentMasterService.GetCorrespondentMasters(EllieMae.Encompass.BusinessObjects.TradeManagement.MasterCommitmentStatus[])">
            <summary>
            Get a list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMaster"/> by trade status
            </summary>
            <param name="tradeStatus"><see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterCommitmentStatus"/>List</param>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMaster"/></returns>
            <remarks> 
            Example 1: Get all active Correspondent Masters
                             MasterCommitmentStatus[] statusList = new MasterCommitmentStatus[1] { MasterCommitmentStatus.Active };
                              EllieMae.Encompass.Client.Session session = Session["EncompassSession"] as EllieMae.Encompass.Client.Session;
                             var ActiveCorrespondentMasters = session.CorrespondentMasterService.GetCorrespondentMasters(statusList);
            Example 2: Get all archived Correspondent Masters
                             TradeStatus[] statusList = new MasterCommitmentStatus[1] { MasterCommitmentStatus.Archived };
                              EllieMae.Encompass.Client.Session session = Session["EncompassSession"] as EllieMae.Encompass.Client.Session;
                             var ArchivedCorrespondentMasters= session.CorrespondentMasterService.GetCorrespondentMasters(statusList);
            Example 3: Get all Correspondent Masters
                             TradeStatus[] statusList = new TradeStatus[2] { MasterCommitmentStatus.Active, MasterCommitmentStatus.Archived };
                              EllieMae.Encompass.Client.Session session = Session["EncompassSession"] as EllieMae.Encompass.Client.Session;
                             var AllCorrespondentMasters = session.CorrespondentMasterService.GetCorrespondentMasters(statusList);
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMasterService.GetCorrespondentMasterByNumber(System.String)">
            <summary>
            Gets Correspondent Master by Corrsespondent Master Number.
            </summary>
            <param name="number">Correspondent Master Number</param>
            <remarks>Returns single CorrespondentMaster identified by Master Number</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMasterService.GetCorrespondentMastersByTPOId(System.String)">
            <summary>
            Gets Correspondent Masters by TPO Id.
            </summary>
            <param name="tpoId">TPO Id</param>
            <remarks>Returns list of Correspondent Masters objects associated to TPO by TPO Id</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMasterService.GetCorrespondentMastersByOrganizationId(System.String)">
            <summary>
            Gets Correspondent Masters by Organization Id.
            </summary>
            <param name="orgId">TPO Organization Id</param>
            <remarks>Returns list of Correspondent Masters objects associated to TPO by Organization Id</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMasterService.GetCorrespondentMasters(EllieMae.Encompass.BusinessObjects.TradeManagement.MasterCommitmentStatus[])">
            <summary>
            Get a list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMaster"/> by trade status
            </summary>
            <param name="tradeStatus"><see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterCommitmentStatus"/>List</param>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMaster"/></returns>
            <remarks> 
            Example 1: Get all active Correspondent Masters
                             MasterCommitmentStatus[] statusList = new MasterCommitmentStatus[1] { MasterCommitmentStatus.Active };
                              EllieMae.Encompass.Client.Session session = Session["EncompassSession"] as EllieMae.Encompass.Client.Session;
                             var ActiveCorrespondentMasters = session.CorrespondentMasterService.GetCorrespondentMasters(statusList);
            Example 2: Get all archived Correspondent Masters
                             TradeStatus[] statusList = new MasterCommitmentStatus[1] { MasterCommitmentStatus.Archived };
                              EllieMae.Encompass.Client.Session session = Session["EncompassSession"] as EllieMae.Encompass.Client.Session;
                             var ArchivedCorrespondentMasters= session.CorrespondentMasterService.GetCorrespondentMasters(statusList);
            Example 3: Get all Correspondent Masters
                             TradeStatus[] statusList = new TradeStatus[2] { MasterCommitmentStatus.Active, MasterCommitmentStatus.Archived };
                              EllieMae.Encompass.Client.Session session = Session["EncompassSession"] as EllieMae.Encompass.Client.Session;
                             var AllCorrespondentMasters = session.CorrespondentMasterService.GetCorrespondentMasters(statusList);
            </remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade">
            <summary>
            Represents a correspondent trade.
            </summary>
            <remarks>Correspondent trade allows correspondent buyers to keep track of individual commitments
             from their correspondent sellers.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.#ctor(EllieMae.EMLite.Trading.CorrespondentTradeViewModel)">
            <summary>
            Constructor of CorrespondentTrade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.CommitmentNumber">
            <summary>
            Gets or sets commitment number of the correspondent trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.CommitmentDate">
            <summary>
            Gets or sets commitment date of the correspondent trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.CorrespondentMasterCommitmentNumber">
            <summary>
            Gets or sets the correspondent master commitment number
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.CommitmentType">
            <summary>
            Gets or sets commitment type of the correspondent trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.DeliveryType">
            <summary>
            Gets or sets <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMasterDeliveryType"/> of the correspondent trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.CompanyName">
            <summary>
            Gets or sets TPO company name 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.TPOID">
            <summary>
            Gets or sets the identifier of TPO company
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.OrganizationID">
            <summary>
            Gets or sets organization ID of TPO company
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.TradeAmount">
            <summary>
            Gets or sets commitement amount of the correspondent trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.ExpirationDate">
            <summary>
            Gets or sets the expiration date of the correspondent trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.DeliveryExpirationDate">
            <summary>
            Gets or sets the date when the loan must be delivered
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.TotalPairoffAmount">
            <summary>
            Gets or sets the total pair-off amount of the correspondent trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.Tolerance">
            <summary>
            Gets or sets the tolerance percentage of the correspondent trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.Locked">
            <summary>
            Gets or sets a flag whether the correspondent trade is locked
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.AOTSecurityType">
            <summary>
            Gets or sets security type of AOT information
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.AOTSecurityTerm">
            <summary>
            Gets or sets security term of AOT information
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.AOTSecurityCoupon">
            <summary>
            Gets or sets security coupon of AOT information
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.AOTSecurityPrice">
            <summary>
            Gets or sets security price of AOT information
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.AOTSettlementDate">
            <summary>
            Gets or sets settlement date of AOT information
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.AOTOriginalTradeDate">
            <summary>
            Gets or sets original trade date of AOT information
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.AOTOriginalTradeDealer">
            <summary>
            Gets or sets original trade dealer of AOT information
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.MinNoteRateRange">
            <summary>
            Gets or sets Min Note Rate value
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.MaxNoteRateRange">
            <summary>
            Gets or sets Max Note Rate value
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.BasePriceItems">
            <summary>
            Gets or sets a list of Base Price settings
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.PriceAdjustments">
            <summary>
            Gets or sets a list of Base Price settings
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.SrpTable">
            <summary>
            Gets or sets a list of Base Price settings
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.Id">
            <summary>
            Gets the identifier of the correspondent trade 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.Guid">
            <summary>
            Gets the Guid of the correspondent trade 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.AssignedAmount">
            <summary>
            Gets the assigned amount of the correspondent trade 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.OpenAmount">
            <summary>
            Gets the open amount of the correspondent trade 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.CompletionPercentage">
            <summary>
            Gets how many percent of the correspondent trade has been allocated by assigned loans 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.MaxAmount">
            <summary>
            Gets the maximum amount of the correspondent trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.MinAmount">
            <summary>
            Gets the minimum amount of the correspondent trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.GainLossAmount">
            <summary>
            Gets the total gain loss amount of the correspondent trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.HasPendingLoan">
            <summary>
            Gets the flag that if the correspondent trade has pending loans
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.Status">
            <summary>
            Gets the status of the correspondent trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.TradeDescription">
            <summary>
            Gets the trade description of the correspondent trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.WeightedAvgBulkPrice">
            <summary>
            Gets the weighted average bulk price of the correspondent trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.IsWeightedAvgBulkPriceLocked">
            <summary>
            Gets the weighted average bulk price locked of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.CommitmentTypeText">
            <summary>
            Gets the text for commitment type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.DeliveryTypeText">
            <summary>
            Gets the text for delivery type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade.StatusText">
            <summary>
            Gets the text for status
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.ID">
            <summary>
            Gets or sets trade id of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.CommitmentID">
            <summary>
            Gets or sets commitment ID of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.ContractNumber">
            <summary>
            Gets or sets contract number of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.TradeDescription">
            <summary>
            Gets or sets trade description of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.CommitmentDate">
            <summary>
            Gets or sets commitment date of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.SellerNumber">
            <summary>
            Gets or sets seller number of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.TradeAmount">
            <summary>
            Gets or sets commitment amount of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.OutstandingBalance">
            <summary>
            Gets or sets outstanding balance of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.IssueMonth">
            <summary>
            Gets or sets issue month of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.MinDeliveryAmount">
            <summary>
            Gets or sets minimum delivery amount of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.MaxDeliveryAmount">
            <summary>
            Gets or sets maximum delivery amount of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.FulfilledAmount">
            <summary>
            Gets or sets fulfilled amount of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.PendingAmount">
            <summary>
            Gets or sets pending amount of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.TotalPairoffAmount">
            <summary>
            Gets or sets total pair-off amount of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.Fees">
            <summary>
            Gets or sets fees of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.MinRemainingAmount">
            <summary>
            Gets or sets minimum remaining amount of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.MaxRemainingAmount">
            <summary>
            Gets or sets maximum remaining amount of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.PairoffFeeFactor">
            <summary>
            Gets or sets pairoff fee factor of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.RolledAmount">
            <summary>
            Gets or sets rolled amount of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.RollFeeFactor">
            <summary>
            Gets or sets roll fee factory of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.RolledTo">
            <summary>
            Gets or sets rolled to of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.RolledFrom">
            <summary>
            Gets or sets rolled from of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.FalloutAmount">
            <summary>
            Gets or sets fallout amount of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.RemittanceCycle">
            <summary>
            Gets or sets remittance cycle of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.RemittanceCycleMonth">
            <summary>
            Gets or sets remittance cycle month of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.ServicingOption">
            <summary>
            Gets or sets servicing option of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.BondType">
            <summary>
            Gets or sets bond type of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.ParticipationPercentage">
            <summary>
            Gets Participation Percentage of the GSE Commitment 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.BuyupBuydownGrid">
            <summary>
            Gets or sets buyup buydown grid of the GSE Commitment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.MaxBuyupAmount">
            <summary>
            Gets max buyup amount of the GSE Commitment 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.MinGfeeAfterBuydown">
            <summary>
            Gets min G-Fee after buydown of the GSE Commitment 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.CompletionPercentage">
            <summary>
            Gets how many percent of the GSE Commitment has been allocated by assigned loans 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment.Locked">
            <summary>
            Gets or sets locked of the GSE Commitment
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitmentService.GetGSECommitments(EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitmentStatus[])">
            <summary>
            Get a list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment"/> by trade status
            </summary>
            <param name="statusList"><see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitmentStatus"/>List</param>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitment"/></returns>
            <remarks> 
            Example 1: Get all current GSE Commitments
                             GSECommitmentStatus[] statusList = new GSECommitmentStatus[2] { GSECommitmentStatus.Open, GSECommitmentStatus.Committed};
                              EllieMae.Encompass.Client.Session session = Session["EncompassSession"] as EllieMae.Encompass.Client.Session;
                             var ActiveGSECommitments = session.GSECommitmentService.GetGSECommitments(statusList);
            Example 2: Get all Archived GSE Commitments
                             GSECommitmentStatus[] statusList = new GSECommitmentStatus[1] { GSECommitmentStatus.Archived };
                              EllieMae.Encompass.Client.Session session = Session["EncompassSession"] as EllieMae.Encompass.Client.Session;
                             var ArchivedGSECommitments = session.GSECommitmentService.GetGSECommitments(statusList);
            Example 3: Get all GSE Commitments
                             GSECommitmentStatus[] statusList = new GSECommitmentStatus[1] { GSECommitmentStatus.None };
                              EllieMae.Encompass.Client.Session session = Session["EncompassSession"] as EllieMae.Encompass.Client.Session;
                             var AllGSECommitments = session.GSECommitmentService.GetGSECommitments(statusList);
            </remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade">
            <summary>
            Represents a loan trade.
            </summary>
            <remarks>Loan trade allows correspondent sellers to keep track of individual commitments
             from their correspondent buyers.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.#ctor(EllieMae.EMLite.Trading.LoanTradeViewModel)">
            <summary>
            Constructor of LoanTrade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.CommitmentNumber">
            <summary>
            Gets or sets commitment number of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.CommitmentDate">
            <summary>
            Gets or sets commitment date of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.CommitmentType">
            <summary>
            Gets or sets commitment type of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.TradeDescription">
            <summary>
            Gets or sets trade description of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.MasterContractNumber">
            <summary>
            Gets or sets the master contract number
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.TradeAmount">
            <summary>
            Gets or sets commitement amount of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.TargetDeliveryDate">
            <summary>
            Gets or sets the target delivery date of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.ActualDeliveryDate">
            <summary>
            Gets or sets the actual delivery date of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.EarlyDeliveryDate">
            <summary>
            Gets or sets the early delivery date of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.TotalPairoffAmount">
            <summary>
            Gets or sets the total pair-off amount of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.Tolerance">
            <summary>
            Gets or sets the tolerance percentage of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.Locked">
            <summary>
            Gets or sets a flag whether the loan trade is locked
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.InvestorName">
            <summary>
            Gets or sets investor name of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.InvestorCommitmentNumber">
            <summary>
            Gets or sets investor commitment number of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.InvestorDeliveryDate">
            <summary>
            Gets or sets the investor delivery date of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.InvestorTradeNumber">
            <summary>
            Gets or sets investor trade number of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.LastModified">
            <summary>
            Gets or sets last modified date/time of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.LoanCount">
            <summary>
            Gets or sets count of assigned loans of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.MiscFee">
            <summary>
            Gets or sets Misc. fee of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.NetProfit">
            <summary>
            Gets or sets net profit of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.PurchaseDate">
            <summary>
            Gets or sets purchase date of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.RateAdjustment">
            <summary>
            Gets or sets rate adjustment of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.BuyUp">
            <summary>
            Gets or sets buy up of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.BuyDown">
            <summary>
            Gets or sets buy down of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.Servicer">
            <summary>
            Gets or sets servicer of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.ServicingType">
            <summary>
            Gets or sets servicing type of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.TotalProfit">
            <summary>
            Gets or sets the total profit amount of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.ShipmentDate">
            <summary>
            Gets or sets actual delivery date of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.AssignedDate">
            <summary>
            Gets or sets date when the loan trade is assigned to a security trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.AssignedSecurityId">
            <summary>
            Gets or sets security trade ID which the loan trade is assigned to
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.BasePriceItems">
            <summary>
            Gets or sets a list of Base Price settings
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.IsWeightedAvgBulkPriceLocked">
            <summary>
            Gets or sets weighted avg bulk price locked indicator of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.WeightedAvgBulkPrice">
            <summary>
            Gets or sets weighted avg bulk price of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.IsBulkDelivery">
            <summary>
            Gets or sets bulk delivery indicator of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.MinNoteRateRange">
            <summary>
            Gets or sets Min Note Rate value
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.MaxNoteRateRange">
            <summary>
            Gets or sets Max Note Rate value
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.MinTermRange">
            <summary>
            Gets or sets Min Term value
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.MaxTermRange">
            <summary>
            Gets or sets Max Term Value
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.MinLTVRange">
            <summary>
            Gets or sets Min Term value
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.MaxLTVRange">
            <summary>
            Gets or sets Max Term Value
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.Id">
            <summary>
            Gets the identifier of the loan trade 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.Guid">
            <summary>
            Gets the Guid of the loan trade 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.OpenAmount">
            <summary>
            Gets the open amount of the loan trade 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.CompletionPercentage">
            <summary>
            Gets how many percent of the loan trade has been allocated by assigned loans 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.MaxAmount">
            <summary>
            Gets the maximum amount of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.MinAmount">
            <summary>
            Gets the minimum amount of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.AssignedAmount">
            <summary>
            Gets the amount of assigned loans of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.GainLossAmount">
            <summary>
            Gets the total gain loss amount of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.HasPendingLoan">
            <summary>
            Gets the flag that if the loan trade has pending loans
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.Status">
            <summary>
            Gets the status of the loan trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.StatusText">
            <summary>
            Gets the text for status
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade.ServicingTypeText">
            <summary>
            Gets the text for servicing type
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTradeService.GetLoanTrade(System.Int32)">
            <summary>
            Get The <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade"/> by trade id
            </summary>
            <param name="loanTradeId">Loan Trade Id</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade"/> record for the request.</returns>
            <remarks>Return details of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade"/> when passing in the identifier of loan trade 
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTradeService.GetLoanTrade(System.String)">
            <summary>
            Get The <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade"/>  by loan trade commitment number
            </summary>
            <param name="loanTradeNumber">Loan Trade Commitment Number</param>
            <returns><see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade"/></returns>
            <remarks>Return details of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade"/> when passing in the loan trade number
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTradeService.GetTradeLoanAssignments(System.Int32)">
            <summary>
            Get Assigned/Pending Loans for the <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade"/>
            </summary>
            <param name="loanTradeId">Trade Id</param>
            <returns>List of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment"/></returns>
            <remarks>Return a list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment"/> with some basic loan information 
            and loan assignment information when passing in the identifier of loan trade 
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTradeService.GetTradeLoanAssignments(System.String)">
            <summary>
            Get Assigned/Pending Loans for the <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade"/>
            </summary>
            <param name="loanTradeNumber">Commitment Number</param>
            <returns>List of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment"/></returns>
            <remarks>Return a list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment"/> with some basic loan information 
            and loan assignment information when passing in the identifier of loan trade 
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTradeService.GetLoanTrades(EllieMae.Encompass.BusinessObjects.TradeManagement.TradeStatus[])">
            <summary>
            Get a list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade"/> by trade status
            </summary>
            <param name="tradeStatus"><see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeStatus"/>List</param>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade"/></returns>
            <remarks> 
            Example 1: Get all active loan trades
                             TradeStatus[] statusList = new TradeStatus[4] { TradeStatus.Open, TradeStatus.Committed, TradeStatus.Shipped and TradeStatus.Purchased };
                              EllieMae.Encompass.Client.Session session = Session["EncompassSession"] as EllieMae.Encompass.Client.Session;
                             var ActiveLoanTrades = session.LoanTradeService.GetLoanTrades(statusList);
            Example 2: Get all archived loan trades
                             TradeStatus[] statusList = new TradeStatus[1] { TradeStatus.Archived };
                              EllieMae.Encompass.Client.Session session = Session["EncompassSession"] as EllieMae.Encompass.Client.Session;
                             var ArchivedLoanTrades = session.LoanTradeService.GetLoanTrades(statusList);
            Example 3: Get all loan trades
                             TradeStatus[] statusList = new TradeStatus[1] { TradeStatus.None };
                              EllieMae.Encompass.Client.Session session = Session["EncompassSession"] as EllieMae.Encompass.Client.Session;
                             var AllLoanTrades = session.LoanTradeService.GetLoanTrades(statusList);
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTradeService.GetAdjustmentTemplateList">
            <summary>
            Return a list of Price Adjustment template names with their GUIDS. Template names can be accessed with key which is a GUID.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTradeService.GetSRPTemplateList">
            <summary>
            Return a list of SRP template names with their GUIDS. Template names can be accessed with key which is a GUID.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTradeService.AllocateLoansToLoanTrade(System.Collections.Generic.List{System.String},System.String)">
            <summary>
             Allocate a loan to loan trade
            </summary>
            <param name="loanNumbers">a list of Loan Numbers</param>
            <param name="loanTradeName">Loan Trade Commitment Number</param>
            <returns><see cref="!:loanUpdateResults"/></returns>
            <remarks>Validate a list of loans and the loan trade for loan allocation. If the loan and the trade are both eligible, process loan allocation by adding the loan to the loan trade and update the loan with the loan trade information.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTradeService.AllocateLoansWithTotalPriceToLoanTrade(System.Collections.Generic.Dictionary{System.String,System.Decimal},System.String)">
            <summary>
             Allocate a loan to loan trade
            </summary>
            <param name="loans">a list of Loan Numbers with assigned Total Price</param>
            <param name="loanTradeName">Loan Trade Commitment Number</param>
            <returns><see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanUpdateResults"/></returns>
            <remarks>Validate a list of loans and the loan trade for loan allocation. If the loan and the trade are both eligible, process loan allocation by adding the loan to the loan trade and update the loan with the loan trade information.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTradeService.CreateLoanTrade(EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade)">
            <summary>
             Create a loan trade
            </summary>
            <param name="trade"><see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade"/></param>
            <returns>Id of the trade created.</returns>
            <remarks>Validates <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade"/> object, throws exception if failed and creates Loan Trade.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTradeService.CreateLoanTrade(EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade,System.String,System.String)">
            <summary>
             Create a loan trade
            </summary>
            <param name="trade"><see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade"/></param>
            <param name="priceAdjustmentTemplateGUID">Price adjustment template GUID</param>
            <param name="SRPTemplateGUID">SRP template GUID</param>
            <returns>Id of the trade created.</returns>
            <remarks>Validates <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade"/> object, throws exception if failed to create Loan Trade.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTradeService.AssignSecurityTrade(System.String,System.DateTime,System.String)">
            <summary>
             Assignes Security Trade to Loan Trade
            </summary>
            <param name="securityId">Security Id/Name of Security Trade</param>
            <param name="assignedDate">Assign Date</param>
            <param name="loanTradeId">Trade Id of Loan Trade</param>
            <remarks>Associates Security Trade to Loan Trade and records Assign Date
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanUpdateResults.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Constructor of LoanUpdateResults.
            </summary>
            <param name="allLoans">a list of Loan Numbers.</param>
            <remarks>Create an instance of LoanUpdateResults.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanUpdateResults.ToSummary">
            <summary>
            Get the result summary of loan assignment process.
            </summary>
            <returns>result summary of loan assignment process.</returns>
            <remarks>Get the result summary of loan assignment process.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanUpdateResults.ToString">
            <summary>
            Get the result details of loan assignment process.
            </summary>
            <returns>result details of loan assignment process.</returns>
            <remarks>Get the result details of loan assignment process, including result summary and detailed error message for each loan.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanUpdateResults.AllLoans">
            <summary>
            Gets or sets a list of loan numbers which need to be assigned to the trade/pool.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanUpdateResults.ProcessedLoans">
            <summary>
            Gets or sets a list of loan numbers which have been processed.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanUpdateResults.LoansWithError">
            <summary>
            Gets or sets a list of loan numbers and process results if loan assignment failed.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract.#ctor(EllieMae.EMLite.Trading.MasterContractInfo)">
            <summary>
            Constructor of master contract
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract.MasterContractNum">
            <summary>
            Gets the master contract num of master contract
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract.InvestorName">
            <summary>
            Getsthe investor name of master contract 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract.ContractAmount">
            <summary>
            Gets the contract amount of master contract 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract.EndDate">
            <summary>
            Gets the end date of master contract 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract.NumOfTradesorPools">
            <summary>
            Gets the number of trades or pools of master contract
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract.TotalAssignedAmount">
            <summary>
            Gets the total assigned amount of master contract
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract.CompletionPercent">
            <summary>
            Gets the completion percdent of master contract 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract.InvestorMasterContractNum">
            <summary>
            Gets the investor master contract number of master contract 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract.StartDate">
            <summary>
            Gets the start date of master contract 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract.Status">
            <summary>
            Gets the master contract status 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract.Term">
            <summary>
            Gets the master contract term 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract.Tolerance">
            <summary>
            Gets the tolerance of master contract
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract.TotalProfit">
            <summary>
            Gets the total profit of master cosntract
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract.StatusText">
            <summary>
            Gets the text for status
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract.TermText">
            <summary>
            Gets the text for term
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContractService.GetMasterContractbyMasterContractNumber(System.String)">
            <summary>
            Get Master Contract by Master Contract Number <see cref="!:Master Contract"/>
            </summary>
            <param name="masterContractNumber">Master Contract Number</param>
            <returns>Master Contract <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract"/></returns>
            <remarks>Return specific <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContract"/> with its information 
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterContractService.GetMasterTradeByStatus(EllieMae.Encompass.BusinessObjects.TradeManagement.MasterCommitmentStatus[])" -->
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.HasPendingLoan">
            <summary>
            Gets or sets the flag that if the Mbs pool has pending loans
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.Locked">
            <summary>
            Gets or sets a flag whether the Mbs pool is locked
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PoolID">
            <summary>
            Gets or sets pool ID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PoolNumber">
            <summary>
            Gets or sets the pool number of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.TradeDescription">
            <summary>
            Gets or sets Trade Description of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.InvestorName">
            <summary>
            Gets or sets investor name of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.TargetDeliveryDate">
            <summary>
            Gets or sets the target delivery date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PoolAmount">
            <summary>
            Gets or sets the pool amount of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.Coupon">
            <summary>
            Gets or sets coupon of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.SettlementDate">
            <summary>
            Gets or sets settlement date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.NotificationDate">
            <summary>
            Gets or sets notification date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.CommitmentDate">
            <summary>
            Gets or sets comitment date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.AssignedAmount">
            <summary>
            Gets or sets assigned amount of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.CompletionPercent">
            <summary>
            Gets or sets completion percent of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.OpenAmount">
            <summary>
            Gets or sets open amount of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.ContractNumber">
            <summary>
            Gets or sets master # of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.AccrualRateStructureType">
            <summary>
            Gets or sets accrual rate structure type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.ActualDeliveryDate">
            <summary>
            Gets or sets actual delivery date type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.AmortizationType">
            <summary>
            Gets or sets amortization type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.ARMIndex">
            <summary>
            Gets or sets ARM index of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.AssignedDate">
            <summary>
            Gets or sets assigned date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.IsAssumability">
            <summary>
            Gets or sets if Mbs pool is assumability
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.IsBalloon">
            <summary>
            Gets or sets balloon indicator of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.BaseGuarantyFee">
            <summary>
            Gets or sets base guaranty fee of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.IsBondFinancePool">
            <summary>
            Gets or sets bond finance pool of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.CertificationandAgreement">
            <summary>
            Gets or sets certification and agreement of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.ChangeDate">
            <summary>
            Gets or sets change date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.CommitmentPeriod">
            <summary>
            Gets or sets commitment period of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.CommitmentType">
            <summary>
            Gets or sets commitment type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.ContractType">
            <summary>
            Gets or sets contract type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.CUSIP">
            <summary>
            Gets or sets CUSIP of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.DeliveryRegion">
            <summary>
            Gets or sets delivery region of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.DocCustodianID">
            <summary>
            Gets or sets document custodian ID of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.EarlyDeliveryDate">
            <summary>
            Gets or sets early delivery date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.FinancialInstNum">
            <summary>
            Gets or sets financial inst number of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.FixedServicingFeePercent">
            <summary>
            Gets or sets fixed servicing fee percent of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.ForecloseRiskCode">
            <summary>
            Gets or sets foreclose risk code of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.GainLossAmount">
            <summary>
            Gets or sets gain loss amount of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.GFeeAfterAltPaymentMethod">
            <summary>
            Gets or sets G-fee after alt. payment method of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.GuaranteeFee">
            <summary>
            Gets or sets guarantee fee of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.IsGuarantyFeeAddOn">
            <summary>
            Gets or sets guaranty fee add on of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.InitialDate">
            <summary>
            Gets or sets Initial Date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.IntPaymentAdjIndexLeadDays">
            <summary>
            Gets or sets Int. and payment Adj. index lead days of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.IntRateRoundingPercent">
            <summary>
            Gets or sets Int. rate rounding % of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.IsInterestOnly">
            <summary>
            Gets or sets if Mbs pool is interest only
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.InterestOnlyEndDate">
            <summary>
            Gets or sets interest only end date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.InvestorDeliveryDate">
            <summary>
            Gets or sets investor delivery date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.InvestorProductPlanID">
            <summary>
            Gets or sets investor product plan ID of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.InvestorRemittanceDay">
            <summary>
            Gets or sets investor remittance day of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.InvestorRemittanceType">
            <summary>
            Gets or sets investor remittance type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.IssueDate">
            <summary>
            Gets or sets issue date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.IssueType">
            <summary>
            Gets or sets issue type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.IssuerNum">
            <summary>
            Gets or sets issuer number of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.LastModified">
            <summary>
            Gets or sets last modified of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.LastPaidInstallmentDate">
            <summary>
            Gets or sets last paid installment date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.LoanCount">
            <summary>
            Gets or sets loan count of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.LoanDefaultLossParty">
            <summary>
            Gets or sets loan default loss party of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.MarginRate">
            <summary>
            Gets or sets margin rate of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.MasterTnIABA">
            <summary>
            Gets or sets Master T and I ABA # of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.MasterTnIAcctNum">
            <summary>
            Gets or sets Master T and I Account # of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.MaturityDate">
            <summary>
            Gets or sets maturity date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.MaxAccuralRate">
            <summary>
            Gets or sets maximum accrual rate of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.MbsMargin">
            <summary>
            Gets or sets MBS Margin of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.MinAccuralRate">
            <summary>
            Gets or sets minimum accrual rate of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.MiscAdjustment">
            <summary>
            Gets or sets misc. fee of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.MortgageType">
            <summary>
            Gets or sets mortgage type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.IsMultiFamily">
            <summary>
            Gets or sets Mbs pool is multi family
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.NewTransferIssuerNumber">
            <summary>
            Gets or sets new transfer issuer number of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.NoteCustodian">
            <summary>
            Gets or sets note custodian of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.OwnershipPercent">
            <summary>
            Gets or sets ownership percent of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PnICustodialABA">
            <summary>
            Gets or sets P and I custodial ABA # of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PnICustodialAcctNum">
            <summary>
            Gets or sets P and I custodial account # of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PassThruRate">
            <summary>
            Gets or sets pass thru rate of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PayeeCode">
            <summary>
            Gets or sets payee code of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PlanNumber">
            <summary>
            Gets or sets plan number of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PoolMortgageType">
            <summary>
            Gets or sets pool mortgage type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PoolTaxID">
            <summary>
            Gets or sets pool tax ID of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PoolType">
            <summary>
            Gets or sets pool type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PurchaseDate">
            <summary>
            Gets or sets purchase date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.RateAdjustment">
            <summary>
            Gets or sets rate adjustment of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.REOMarketingParty">
            <summary>
            Gets or sets REO marketing party of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.ScheduledRemittancePaymentDay">
            <summary>
            Gets or sets scheduled remittance payment day of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.SecurityIssueDateIntRate">
            <summary>
            Gets or sets security issue date Int. rate of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.SecurityTradeBookEntryDate">
            <summary>
            Gets or sets security trade book entry date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.IsSent1711ToCustodian">
            <summary>
            Gets or sets if Mbs pool is Sent 1711 to Custodian
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.Servicer">
            <summary>
            Gets or sets servicer of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.ServicerID">
            <summary>
            Gets or sets servicer ID of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.SettlementMonth">
            <summary>
            Gets or sets settlement month of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.StandardLookback">
            <summary>
            Gets or sets standard lookback of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.Status">
            <summary>
            Gets or sets status of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.StructureType">
            <summary>
            Gets or sets structure type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.SubmissionType">
            <summary>
            Gets or sets submission type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.SubscriberRecordABA">
            <summary>
            Gets or sets subscriber record ABA # of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.SubscriberRecordAcctNum">
            <summary>
            Gets or sets subscriber record account # of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.SubscriberRecordFRBAcctDesc">
            <summary>
            Gets or sets subscriber record frb account desc of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.SubscriberRecordFRBPosDesc">
            <summary>
            Gets or sets subscriber record FRB position desc of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.SubservicerIssuerNum">
            <summary>
            Gets or sets subservicer issuer number of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.SuffixID">
            <summary>
            Gets or sets suffix ID of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.TBAOpenAmount">
            <summary>
            Gets or sets TBA open amount of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.Term">
            <summary>
            Gets or sets Term of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.UnpaidBalanceDate">
            <summary>
            Gets or sets unpaid balance date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.WeightedAvgPrice">
            <summary>
            Gets or sets weighted average price of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.ACHABARoutingAndTransitNum">
            <summary>
            Gets or sets ACH ABA routing and transit # of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.ACHABARoutingAndTransitId">
            <summary>
            Gets or sets ACH ABA routing and transit identifier of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.ACHBankAccountDescription">
            <summary>
            Gets or sets ACH bank account description of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.ACHBankAccountPurposeType">
            <summary>
            Gets or sets ACH bank account purpose type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.ACHInsitutionTelegraphicName">
            <summary>
            Gets or sets ACH institution telegraphic name of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.ACHReceiverSubaccountName">
            <summary>
            Gets or sets ACH receiver subaccount name of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.BondFinanceProgramName">
            <summary>
            Gets or sets bond finance program name of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.BondFinanceProgramType">
            <summary>
            Gets or sets bond finance program type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.ContractID">
            <summary>
            Gets or sets Contract ID of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.IsDocumentRequired">
            <summary>
            Gets or sets document required indicator of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.IsDocumentSubmission">
            <summary>
            Gets or sets document submission indicator of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.GinniePoolIndexType">
            <summary>
            Gets or sets index type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.IntRateRoundingType">
            <summary>
            Gets or sets Int. rate rounding type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.InvestorFeatureID">
            <summary>
            Gets or sets investor feature ID of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PoolCertificatePaymentDate">
            <summary>
            Gets or sets pool certificate payment date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.GinniePoolClassType">
            <summary>
            Gets or sets Ginnie pool class type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.IsGinniePoolConcurrentTransfer">
            <summary>
            Gets or sets Ginnie pool concurrent transfer indicator of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PoolCurrentLoanCount">
            <summary>
            Gets or sets pool current loan count of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PoolCurrentPrincipalBalAmt">
            <summary>
            Gets or sets pool current loan count of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PoolInterestAdjustmentEffectiveDate">
            <summary>
            Gets or sets pool interest adjustment effective date of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PoolIssuerTransferee">
            <summary>
            Gets or sets pool issuer transferee of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PoolMaturityPeriodCount">
            <summary>
            Gets or sets pool maturity period count of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.PoolingMethodType">
            <summary>
            Gets or sets pooling method type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.SecurityOrigSubscriptionAmt">
            <summary>
            Gets or sets security original subscription amount of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.SellerId">
            <summary>
            Gets or sets seller ID of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.ServicingType">
            <summary>
            Gets or sets servicing type of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.IsWeightedAvgPriceLocked">
            <summary>
            Gets or sets weighted average price locked of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.MinServicingFee">
            <summary>
            Gets or sets min. servicing fee of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.MaxBU">
            <summary>
            Gets or sets MaxBU of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool.ContractNum">
            <summary>
            Gets or sets contract number of the Mbs pool
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade.CommitmentDate">
            <summary>
            Gets or sets commitment date of the correspondent trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade.SecurityID">
            <summary>
            Gets or sets security ID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade.SecurityType">
            <summary>
            Gets or sets security Type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade.Coupon">
            <summary>
            Gets or sets security Type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade.SettlementDate">
            <summary>
            Gets or sets settlement date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade.Dealer">
            <summary>
            Gets or sets original trade dealer 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade.TradeAmount">
            <summary>
            Gets or sets trade amount of the Security trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade.MinAmount">
            <summary>
            Gets or sets minimum amount of the Security trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade.MaxAmount">
            <summary>
            Gets or sets maximum amount of the Security trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade.Price">
            <summary>
            Gets or sets price of security trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade.Id">
            <summary>
            Gets the identifier of the security trade 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade.Guid">
            <summary>
            Gets the Guid of the security trade 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade.AssignedPoolAmount">
            <summary>
            Gets the assigned amount of the mbs pool 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade.AssignedLoanTradeAmount">
            <summary>
            Gets or sets assigned loan trade amount of the Security trade
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade.OpenAmount">
            <summary>
            Gets the open amount of the security trade 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade.CompletionPercentage">
            <summary>
            Gets how many percent of the security trade has been allocated by assigned loans 
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolService.GetMbsPool(System.String)">
            <summary>
            Get The <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool"/> by Mbs pool id
            </summary>
            <param name="mbsPoolId">Mbs pool Id</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool"/> record for the request.</returns>
            <remarks>Return details of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool"/> when passing in the identifier of Mbs pool 
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolService.GetTradeLoanAssignments(System.String)">
            <summary>
            Get The <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment"/> by poolId
            </summary>
            <param name="tradeNumber">Pool Id</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment"/> record for the request.</returns>
            <remarks>Return details of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment"/> when passing in the identifier of pool id 
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolService.GetPoolSecurityTradeAssignments(System.String)">
            <summary>
            Get The <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade"/> by poolId
            </summary>
            <param name="tradeNumber">Pool Id</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade"/> record for the request.</returns>
            <remarks>Return details of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolSecurityTrade"/> when passing in the identifier of pool id 
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPoolService.GetMbsPools(EllieMae.Encompass.BusinessObjects.TradeManagement.TradeStatus[])">
            <summary>
            Get The <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool"/> by pool id
            </summary>
            <param name="MbsPoolId">Loan Trade Id</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool"/> record for the request.</returns>
            <remarks>Return details of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.MbsPool"/> when passing in the identifier of loan trade 
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.CommitmentDate">
            <summary>
            Gets/Sets commitment date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.SecurityId">
            <summary>
            Gets/Sets security trade ID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.SecurityType">
            <summary>
            Gets/Sets security type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.Coupon">
            <summary>
            Gets/Sets coupon
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.SettlementDate">
            <summary>
            Gets/Sets settlement date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.DealerName">
            <summary>
            Gets/Sets dealer name
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.TradeAmount">
            <summary>
            Gets/Sets trade amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.MinAmount">
            <summary>
            Gets/Sets minumum trade amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.MaxAmount">
            <summary>
            Gets/Sets maxiumum trade amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.AssignedLoanTradeAmount">
            <summary>
            Gets assinged loan trade amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.CompletionPercentage">
            <summary>
            Gets completion percentage
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.CommitmentType">
            <summary>
            Gets/Sets commitment type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.ConfirmationDate">
            <summary>
            Gets/Sets commitment type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.LastModified">
            <summary>
            Gets last modified date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.Locked">
            <summary>
            Gets lock status
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.NotificationDate">
            <summary>
            Gets/Sets notification date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.OpenAmount">
            <summary>
            Gets open amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.Price">
            <summary>
            Gets/Sets price
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.ProgramType">
            <summary>
            Gets program type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.TermFrom">
            <summary>
            Gets/Sets term from
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.TermTo">
            <summary>
            Gets/Sets term to
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.Tolerance">
            <summary>
            Gets/Sets tolerance
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.TotalGainLoss">
            <summary>
            Gets total gain/loss
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.TotalProfit">
            <summary>
            Gets total profit
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.TradeDescription">
            <summary>
            Gets/Sets trade description
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.TradeGUID">
            <summary>
            Gets trade GUID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.DealerAddress">
            <summary>
            Gets/Sets Dealer Address
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.DealerCity">
            <summary>
            Gets/Sets Dealer City
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.DealerState">
            <summary>
            Gets/Sets Dealer State
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.DealerZip">
            <summary>
            Gets/Sets Dealer Zip
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.DealerPhone">
            <summary>
            Gets/Sets Dealer Phone
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.DealerFax">
            <summary>
            Gets/Sets Dealer Fax
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.DealerEmail">
            <summary>
            Gets/Sets Dealer Emaile Address
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.DealerWebsite">
            <summary>
            Gets/Sets Dealer Website
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject.DealerContact">
            <summary>
            Gets/Sets Dealer Contact
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedLoanTrades">
            <summary>
            Assinged Loan Trades
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedLoanTrades.AssignedDate">
            <summary>
            Gets Assigned Date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedLoanTrades.TradeId">
            <summary>
            Gets Trade Id
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedLoanTrades.TradeDescription">
            <summary>
            Gets Trade Description
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedLoanTrades.Investor">
            <summary>
            Gets Investor Name
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedLoanTrades.InvestorCommitmentNumber">
            <summary>
            Gets Investment commitment number
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedLoanTrades.TradeAmount">
            <summary>
            Gets Trade Amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedLoanTrades.AssingedAmount">
            <summary>
            Gets Assigned amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedLoanTrades.NetProfit">
            <summary>
            Gets Net profit
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedMBSPools">
            <summary>
            Assinged Loan Trades
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedMBSPools.AllocatedPoolAmount">
            <summary>
            Gets Allocated Pool Amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedMBSPools.CommitmentDate">
            <summary>
            Gets Commitment Date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedMBSPools.PoolId">
            <summary>
            Gets Pool Id
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedMBSPools.PoolNumber">
            <summary>
            Gets Pool number
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedMBSPools.PoolAmount">
            <summary>
            Gets Pool Amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedMBSPools.AmortizationType">
            <summary>
            Gets Amortizaton Type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedMBSPools.Term">
            <summary>
            Gets Term
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedMBSPools.MasterNumber">
            <summary>
            Gets Net profit
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.AssignedMBSPools.AssignedAmount">
            <summary>
            Gets Net profit
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeService.GetSercurityTradeByNumber(System.String)">
            <summary>
            Get The <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject"/> by security trade id
            </summary>
            <param name="tradeNumber">Security Trade Id</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject"/> record for the request.</returns>
            <remarks>Return details of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject"/> when passing in the identifier of security trade 
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeService.GetAssingedLoanTradesInSecurityTrade(System.String)">
            <summary>
            Get The <see cref="!:AssignedLoanTrades[]"/> by security trade id
            </summary>
            <param name="tradeNumber">Security Trade Id</param>
            <returns>Returns the <see cref="!:AssignedLoanTrades[]"/> record for the request.</returns>
            <remarks>Return details of <see cref="!:AssignedLoanTrades[]"/> when passing in the identifier of security trade 
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeService.GetAssingedMBSPoolsInSecurityTrade(System.String)">
            <summary>
            Get The <see cref="!:AssignedMBSPools[]"/> by security trade id
            </summary>
            <param name="tradeNumber">Security Trade Id</param>
            <returns>Returns the <see cref="!:AssignedMBSPools[]"/> record for the request.</returns>
            <remarks>Return details of <see cref="!:AssignedMBSPools[]"/> when passing in the identifier of security trade 
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeService.GetSecurityTradeByStatus(EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeStatus[])" -->
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeService.CreateSecurityTrade(EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject)">
            <summary>
            Create new Security Trade from <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject"/>
            </summary>
            <param name="trade"><see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeObject"/></param>
            <returns>Returns the security Id upon successful creation</returns>
            <remarks>Creates new Security Trade 
            </remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.TradeManagement.SrpTableItem">
            <summary>
            Represents a SRP Table Item.
            </summary>
            <remarks>SrpTableItem allows correspondent buyers to setup SRP and SRP adjustments.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SrpTableItem.MinLoanAmount">
            <summary>
            Gets or sets minimum loan amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SrpTableItem.MaxLoanAmount">
            <summary>
            Gets or sets maximum loan amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SrpTableItem.BaseSrp">
            <summary>
            Gets or sets Base SRP
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SrpTableItem.BaseSrpIfWaived">
            <summary>
            Gets or sets Base SRP Adjustment, If impounds are Waived
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SrpTableItem.SrpAdjustmentsByState">
            <summary>
            Gets or sets SRP Adjustment Based on Geography
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.TradeManagement.SrpStateAdjustment">
            <summary>
            Represents a SRP Adjustments Based on Geography.
            </summary>
            <remarks>SrpStateAdjustment allows correspondent buyers to setup SRP adjustments based on state.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SrpStateAdjustment.StateFullName">
            <summary>
            Gets or sets State full name. 
            </summary>
            <remarks>If SRP adjustments are applied to all states, set this property to "All States".</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SrpStateAdjustment.SrpAdjustment">
            <summary>
            Gets or sets SRP Adjustment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.SrpStateAdjustment.SrpIfWaived">
            <summary>
            Gets or sets SRP Adjustment, If impounds are Waived
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeBatchService.GetJobStatus(System.Int32)">
            <summary>
             Returns status of submitted Job.
            </summary>
            <param name="jobId">Job Id</param>
            <returns><see cref="T:EllieMae.Encompass.BusinessObjects.TradeQueueJob"/>Returns Complete Job status based on jobId.</returns>
            <remarks>Returns status of submiited job.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeBatchService.CreateLoanUpdateJob(System.Int32,EllieMae.Encompass.BusinessObjects.TradeManagement.TradeType,System.Boolean)">
            <summary>
             Returns Id of Job if submitted successfully.
            </summary>
            <param name="tradeId">Trade Id</param>
            <param name="tradeType">Trade Type</param>
            <param name="tradeId">Trade Id</param>
            <param name="allOrPendingLoans">Set to true for All assinged loans, false for only Pending loans.</param>
            <returns><see cref="T:System.Int32"/>Job Id.</returns>
            <remarks>Returns Id of Job if submitted successfully.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeBatchService.CreateLoanUpdateJob(System.Int32,EllieMae.Encompass.BusinessObjects.TradeManagement.TradeType,System.Collections.Generic.List{System.String})">
            <summary>
             Returns Id of Job if submitted successfully.
            </summary>
            <param name="tradeId">Trade Id</param>
            <param name="tradeType">Trade Type</param>
            <param name="tradeId">Trade Id</param>
            <param name="loanNumbers">Set of assinged loans to be updated.</param>
            <returns><see cref="T:System.Int32"/>Job Id.</returns>
            <remarks>Returns Id of Job if submitted successfully.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeBatchService.GetAllJobStatus">
            <summary>
             Returns Id of Job if submitted successfully.
            </summary>
            <returns>Returns summary of all Jobs submitted.</returns>
            <remarks>Returns summary of all Jobs submitted.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeBatchService.CancelJob(System.Int32)">
            <summary>
             Cancel the job.
            </summary>
            <param name="jobId">Job Id</param>
            <returns><see cref="T:System.Boolean"/>Returns true of cancellation is done successfully.</returns>
            <remarks>Returns true of cancellation is done successfully.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeBatchService.RemoveJob(System.Int32)">
            <summary>
             Remove the job.
            </summary>
            <param name="jobId">Job Id</param>
            <returns><see cref="T:System.Boolean"/>Returns true if removal is done successfully.</returns>
            <remarks>Returns true if removal is done successfully.
            </remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterCommitmentType">
            <summary>
            Defines the possible Master Commitment Types for Correspondent Master.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterCommitmentType.BestEfforts">
            <summary>
            Best Efforts Type
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterCommitmentType.Mandatory">
            <summary>
            Mandatory Type
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterCommitmentType.BothMandatoryAndBestEfforts">
            <summary>
            Mandatory and Best Efforts Type
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterCommitmentStatus">
            <summary>
            Defines the status of Master Commitment.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterCommitmentStatus.Active">
            <summary>
            Active status
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.MasterCommitmentStatus.Archived">
            <summary>
            Archived status
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitmentStatus">
            <summary>
            Defines the status of GSE Commitment.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitmentStatus.Open">
            <summary>
            Open status
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitmentStatus.Committed">
            <summary>
            Commited status
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.GSECommitmentStatus.Archived">
            <summary>
            Archived status
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeStatus">
            <summary>
            Defines the status of Trades
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeStatus.Open">
            <summary>
            Open status
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeStatus.Committed">
            <summary>
            Commited status
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeStatus.Shipped">
            <summary>
            Shipped status
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeStatus.Purchased">
            <summary>
            Purchased status
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeStatus.Archived">
            <summary>
            Archived status
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeStatus">
            <summary>
            Defines the status of Trades
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeStatus.Open">
            <summary>
            Open status
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeStatus.Committed">
            <summary>
            Commited status
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.SecurityTradeStatus.Archived">
            <summary>
            Archived status
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeCommitmentType">
            <summary>
            Defines possible Correspondent Trade Commitment Types
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeCommitmentType.BestEfforts">
            <summary>
            Best Efforts status
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeCommitmentType.Mandatory">
            <summary>
            Mandatory status
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeLoanStatus">
            <summary>
            Defines possible Correspondent Trade Loan statuses
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeLoanStatus.Unassigned">
            <summary>
            Unassigned status
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeLoanStatus.Assigned">
            <summary>
            Assigned status
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeLoanStatus.Shipped">
            <summary>
            Shipped status
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeLoanStatus.Purchased">
            <summary>
            Purchased status
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMasterDeliveryType">
            <summary>
            Defines possible Correspondent Master Delivery types
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMasterDeliveryType.AOT">
            <summary>
            AOT Delivery type
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMasterDeliveryType.Forwards">
            <summary>
            Forwards type
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMasterDeliveryType.IndividualBestEfforts">
            <summary>
            Individual Best Efforts type
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMasterDeliveryType.IndividualMandatory">
            <summary>
            Individual Mandatory type
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMasterDeliveryType.LiveTrade">
            <summary>
            Direct Trade type
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentMasterDeliveryType.Bulk">
            <summary>
            Bulk type
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.TradeManagement.ServicingType">
            <summary>
            Defines possible servicing types
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.ServicingType.ServicingReleased">
            <summary>
            Servicing Released
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.ServicingType.ServicingRetained">
            <summary>
            Servicing Retained
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.TradeManagement.ServicingType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.GetCorrespondentTrade(System.Int32)">
            <summary>
            Get The <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/> by trade id
            </summary>
            <param name="correspondentTradeId">Correspondent Trade Id</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/> record for the request.</returns>
            <remarks>Return details of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/> when passing in the identifier of correspondent trade 
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.GetCorrespondentTrade(System.String)">
            <summary>
            Get The <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/>  by correspondent commitment number
            </summary>
            <param name="correspondentTradeNumber">Correspondent Commitment Number</param>
            <returns><see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/></returns>
            <remarks>Return details of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/> when passing in the correspondent trade number
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.GetCorrespondentTradesByTpoId(System.Int32)">
            <summary>
            Get a list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/> associated with the TPO
            </summary>
            <param name="Id">Id</param>
            <returns>List of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/></returns>
            <remarks>Return a list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/> with some basic trade information when passing in the identifier of TPO company
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.GetCorrespondentTradesByTpoId(System.String)">
            <summary>
            Get a list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/> associated with the TPO
            </summary>
            <param name="tpoId">TPO external Id</param>
            <returns>List of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/></returns>
            <remarks>Return a list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/> with some basic trade information when passing in the TPO external id
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.GetCorrespondentTradesByOrgId(System.String)">
            <summary>
            Get a list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/> associated with the TPO
            </summary>
            <param name="orgId">TPO Organization Id</param>
            <returns>List of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/></returns>
            <remarks>Return a list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/> with some basic trade information when passing in the TPO organization id
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.GetCorrespondentTradesByMasterNumber(System.String)">
            <summary>
            Get a list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/> associated with the correspondent master
            </summary>
            <param name="correspondentMasterNumber">Correspondent Master Number</param>
            <returns>List of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/></returns>
            <remarks>Return a list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/> with some basic trade information when passing in the correspondent master number
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.GetCorrespondentTrades(EllieMae.Encompass.BusinessObjects.TradeManagement.TradeStatus[])">
            <summary>
            Get a list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/> by trade status
            </summary>
            <param name="tradeStatus"><see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeStatus"/>List</param>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/></returns>
            <remarks> 
            Example 1: Get all active loan trades
                             TradeStatus[] statusList = new TradeStatus[4] { TradeStatus.Open, TradeStatus.Committed, TradeStatus.Shipped and TradeStatus.Purchased };
                              EllieMae.Encompass.Client.Session session = Session["EncompassSession"] as EllieMae.Encompass.Client.Session;
                             var ActiveLoanTrades = session.CorrespondentTradeService.GetCorrespondentTrades(statusList);
            Example 2: Get all archived loan trades
                             TradeStatus[] statusList = new TradeStatus[1] { TradeStatus.Archived };
                              EllieMae.Encompass.Client.Session session = Session["EncompassSession"] as EllieMae.Encompass.Client.Session;
                             var ArchivedLoanTrades = session.CorrespondentTradeService.GetCorrespondentTrades(statusList);
            Example 3: Get all loan trades
                             TradeStatus[] statusList = new TradeStatus[1] { TradeStatus.None };
                              EllieMae.Encompass.Client.Session session = Session["EncompassSession"] as EllieMae.Encompass.Client.Session;
                             var AllLoanTrades = session.CorrespondentTradeService.GetCorrespondentTrades(statusList);
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.GetTradeLoanAssignments(System.Int32)">
            <summary>
            Get Assigned/Pending Loans for the <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/>
            </summary>
            <param name="correspondentTradeId">Trade Id</param>
            <returns>List of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment"/></returns>
            <remarks>Return a list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment"/> with some basic loan information 
            and loan assignment information when passing in the identifier of correspondent trade 
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.GetTradeLoanAssignments(System.String)">
            <summary>
            Get Assigned/Pending Loans for the <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade"/>
            </summary>
            <param name="correspondentTradeNumber">Commitment Number</param>
            <returns>List of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment"/></returns>
            <remarks>Return a list of <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment"/> with some basic loan information 
            and loan assignment information when passing in the identifier of correspondent trade 
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.GetEligibleCorrespondentMastersByTradeId(System.Int32)" -->
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.GetEffectiveCorrespondentTradesByLoanInfo(System.String,System.String,System.Double)">
            <summary>
            Get Effective Correspondent Trades Based on loan information
            </summary>
            <param name="externalOrgId">External Organization ID</param>
            <param name="deliveryType">Delivery Type</param>
            <param name="loanAmount">Loan Amount</param>
            <returns>A list of Correspondent Trade information including Commitment Number and Correspondent Trade Identifier</returns>
            <remarks>Return a list of Correspondent Trades based on Delivery Type, Loan Amount and External Organization which the loan belongs to
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.GetEffectiveCorrespondentTradesByLoanNumber(System.String,System.String)">
            <summary>
            Get Effective Correspondent Trades Based on loan number
            </summary>
            <param name="deliveryType">Delivery Type</param>
            <param name="loanNumber">Loan Number</param>
            <returns>A list of Correspondent Trade information including Commitment Number and Correspondent Trade Identifier</returns>
            <remarks>Return a list of Correspondent Trades based on Delivery Type, and Loan Number
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.GetEffectiveCorrespondentTradesByLoanNumber(System.String,System.String,System.String)">
            <summary>
            Get a list of possible eligible Correspondent Trades based on Loan Number, Delivery Type and Correspondent Master.
            </summary>
            <param name="deliveryType">Delivery Type</param>
            <param name="loanNumber">Loan Number</param>
            <param name="correspondentMasterNumber">Correspondent Master Number</param>
            <returns>Dictionary of Correspondent Trades</returns>
            <remarks>Return a list of Correspondent Trades based on Delivery Type, Loan Number and Correspodnent Master Number
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.AllocateLoanToCorrespondentTrade(System.String,System.String,System.Int32)">
            <summary>
             Allocate a loan to correspondent trade
            </summary>
            <param name="loanNumber">Loan Number</param>
            <param name="correspondentTradeId">Correspondent Trade Identifier</param>
            <remarks>Validate the loan and the correspondent trade for loan allocation. If the loan and the trade are both eligible, process loan allocation by adding the loan to the correspondent trade and update the loan with the correspondent trade information.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.AllocateLoanToCorrespondentTrade(System.String,System.String,System.String)">
            <summary>
             Allocate a loan to correspondent trade
            </summary>
            <param name="loanNumber">Loan Number</param>
            <param name="correspondentTradeName">Correspondent Trade Commitment Number</param>
            <remarks>Validate the loan and the correspondent trade for loan allocation. If the loan and the trade are both eligible, process loan allocation by adding the loan to the correspondent trade and update the loan with the correspondent trade information.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.AllocateLoansToCorrespondentTrade(System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
             Allocate a loan to correspondent trade
            </summary>
            <param name="loanNumbers">a list of Loan Numbers</param>
            <param name="correspondentTradeName">Correspondent Trade Commitment Number</param>
            <returns><see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanUpdateResults"/></returns>
            <remarks>Validate a list of loans and the correspondent trade for loan allocation. If the loan and the trade are both eligible, process loan allocation by adding the loan to the correspondent trade and update the loan with the correspondent trade information.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.AllocateLoansWithTotalPriceToCorrespondentTrade(System.String,System.Collections.Generic.Dictionary{System.String,System.Decimal},System.String)">
            <summary>
             Allocate a loan to correspondent trade
            </summary>
            <param name="loans">a list of Loan Numbers with assigned Total Price</param>
            <param name="correspondentTradeName">Correspondent Trade Commitment Number</param>
            <returns><see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanUpdateResults"/></returns>
            <remarks>Validate a list of loans and the correspondent trade for loan allocation. If the loan and the trade are both eligible, process loan allocation by adding the loan to the correspondent trade and update the loan with the correspondent trade information.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.CreateCorrespondentTrade(EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade,System.String,System.String)">
            <summary>
             Create a Correspondent Trade
            </summary>
            <param name="trade">Correspondent Trade object</param>
            <param name="priceAdjustmentTemplateGUID">Price adjustment template GUID</param>
            <param name="SRPTemplateGUID">SRP template GUID</param>
            <returns><see cref="T:System.Int32"/></returns>
            <remarks>Creates Correspondent Trade with price adjustment template and SRP template GUIDs. This will also do validations before creating it.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.UpdateCorrespondentTrade(EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTrade,System.String,System.String)">
            <summary>
             Update Correspondent Trade
            </summary>
            <param name="trade">Correspondent Trade object</param>
            <param name="priceAdjustmentTemplateGUID">Price adjustment template GUID</param>
            <param name="SRPTemplateGUID">SRP template GUID</param>
            <returns><see cref="T:System.Int32"/>Returns Id of the Trade that was updated</returns>
            <remarks>Update Correspondent Trade with price adjustment template and SRP template GUIDs. 
            If price adjustment template and SRP template GUIDs are not provided it will not be replaced with corresponding Template.
            This will also do validations before update trade.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.UpdateLoanInCorrespondentTrade(System.Int32,System.String)">
            <summary>
             Update Correspondent Trade Loan
            </summary>
            <param name="tradeId">Correspondent Trade Id</param>
            <param name="loanNumber">Assigned Loan Number</param>
            <returns><see cref="T:System.Boolean"/>Returns true if succeeded, It will also throw Exception if updating fails.</returns>
            <remarks>Update one loan in Correspondent Trade which is already in Assinged status
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.CorrespondentTradeService.RemoveLoansFromCorrespondentTrade(System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Service to remove loan(s) from correspondent trade
            </summary>
            <param name="deliveryType"></param>
            <param name="correspondentTradeName"></param>
            <param name="loanNumbers"></param>
            <returns></returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment">
            <summary>
            Represents a loan assignment in trade management.
            </summary>
            <remarks>When assign a loan to a correspondent trade, this object will be created to carry the details of loan assignment.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.#ctor(EllieMae.EMLite.Trading.CorrespondentTradeInfo,EllieMae.EMLite.DataEngine.PipelineInfo)">
            <summary>
            Constructor of TradeLoanAssignment
            </summary>
            <param name="trade"></param>
            <param name="pipelineInfo"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.GetFieldList">
            <summary>
            Get field name for all properties in this class
            </summary>
            <returns>List of field names</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.#ctor(EllieMae.EMLite.Trading.LoanTradeInfo,EllieMae.EMLite.DataEngine.PipelineInfo)">
            <summary>
            Constructor of TradeLoanAssignment
            </summary>
            <param name="trade"></param>
            <param name="pipelineInfo"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.#ctor(EllieMae.EMLite.Trading.MbsPoolInfo,EllieMae.EMLite.DataEngine.PipelineInfo)">
            <summary>
            Constructor of TradeLoanAssignment
            </summary>
            <param name="trade"></param>
            <param name="pipelineInfo"></param>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.TradeAssignmentStatus">
            <summary>
            Gets and sets trade assignment status
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.TradeAssignmentStatusDate">
            <summary>
            Gets and sets trade assignment status date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.TradeAssignementId">
            <summary>
            Gets and sets the identifier of trade 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.LoanNumber">
            <summary>
            Gets and sets the loan number
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.TotalBuyPrice">
            <summary>
            Gets and sets total buy price of a loan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.TotalSellPrice">
            <summary>
            Gets and sets total sell price of a loan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.NetProfit">
            <summary>
            Gets and sets gain loss amount of a loan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.LoanProgram">
            <summary>
            Gets and sets loan program of a loan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.CurrentMilestoneName">
            <summary>
            Gets and sets lastest finished milestone of a loan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.TotalLoanAmount">
            <summary>
            Gets and sets total loan amount of a loan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.LoanAmount">
            <summary>
            Gets and sets loan amount of a loan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.NoteRate">
            <summary>
            Gets and sets note rate of a loan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.Term">
            <summary>
            Gets and sets term of a loan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.Ltv">
            <summary>
            Gets and sets LTV of a loan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.Cltv">
            <summary>
            Gets and sets CLTV of a loan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.DtiTop">
            <summary>
            Gets and sets DTI Top of a loan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.DtiBottom">
            <summary>
            Gets and sets DTI Bottom of a loan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.Fico">
            <summary>
            Gets and sets FICO of a loan 
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.OccupancyType">
            <summary>
            Gets and sets occupancy type of a loan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.PropertyType">
            <summary>
            Gets and sets property type of a loan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.State">
            <summary>
            Gets and sets state of the loan assignment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.LockExpirationDate">
            <summary>
            Gets and sets lock expiration date of a loan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.TradeManagement.TradeLoanAssignment.BorrowerLastName">
            <summary>
            Gets and sets borrower last name of a loan
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.AEExternalAccessibleEntity">
            <summary>
            Represents a collection of objects accessbile by an AE
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.AEExternalAccessibleEntity.AccessibleCompanies">
            <summary>
            Returns a list of accessible company TPO ID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.AEExternalAccessibleEntity.AccessibleBranchies">
            <summary>
            Returns a dictionary object containing a list of accessible branches grouped by company.  The key of the dictionary is the TPO ID of the companies.  The value
            of a corresponding key is the accessible branches within that company.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.AEExternalAccessibleEntity.AccessibleContacts">
            <summary>
            Gets a list of accessible contacts' contact ID
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.ATRSmallCreditors">
            <summary>
            Defines the possbile options for ATR Small Creditor setting
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.ATRSmallCreditors.SmallCreditor">
            <summary>Indicates Small Creditor for the ATR/QM Small Creditor setting</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.ATRSmallCreditors.RuralSmallCreditor">
            <summary>Indicates Rural Small Creditor for the ATR/QM Small Creditor setting</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.ATRExemptCreditors">
            <summary>
            Defines the possible options for ATR Exempt Creditor setting
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.ATRExemptCreditors.CommunityDevelopmentFinancialInstitution">
            <summary>Indicates Community Development Final Instituion option for the ATR/QM Exempt Creditor setting</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.ATRExemptCreditors.CommunityHousingDevelopmentOrganization">
            <summary>Indicates Community Housing Development Organization option for the ATR/QM Exempt Creditor setting</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.ATRExemptCreditors.DownpaymentAssistanceProvider">
            <summary>Indicates Downpayment Assisance Provider option for the ATR/QM Exempt Creditor setting</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.ATRExemptCreditors.NonprofitOrganization">
            <summary>Indicates Non Profit Organization option for the ATR/QM Exempt Creditor setting</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing">
            <summary>
            Represents a loan officers license to originate loans in a particular state.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.IExternalLicensing">
            <summary>
            Interface for IExternalLicensing class to support External Licensing
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing.#ctor(System.Boolean,System.Int32,System.String,System.String,System.String,System.Boolean,System.Boolean,System.Collections.Generic.List{EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType},System.Boolean,EllieMae.Encompass.BusinessObjects.Users.ATRSmallCreditors,EllieMae.Encompass.BusinessObjects.Users.ATRExemptCreditors)">
            <summary>
            constructor
            </summary>
            <param name="useParentInfo">Flag indicates to use parent info</param>
            <param name="allowLoansWithIssues">Flag indicates loans with issues to be submitted.</param>
            <param name="msgUploadNonApprovedLoans">Message for uploading unapproved loans</param>
            <param name="lenderType">Lender type</param>
            <param name="homeState">Home state</param>
            <param name="statutoryElectionInMaryland">Flag for statutory election in Maryland</param>
            <param name="statutoryElectionInKansas">Flag for statutory election in Kansas</param>
            <param name="stateLicense">List of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType">StateLicenseExtType</see></param>
            <param name="useCustomLenderProfile">Flag indicates use custom lender profile</param>
            <param name="atrSmallCreditor"><see cref="T:EllieMae.Encompass.BusinessObjects.Users.ATRSmallCreditors">ATRSmallCreditors</see> setting</param>
            <param name="atrExemptCreditor"><see cref="T:EllieMae.Encompass.BusinessObjects.Users.ATRExemptCreditors">ATRExemptCreditors</see> setting</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing.ATRSmallCreditorToEnum(System.Int32)">
            <summary>
            Convert integer value to corresponding ATRSmallCreditors enum value
            </summary>
            <param name="value">integer value of the enum representation</param>
            <returns>ATRSmallCreditors type</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing.ATRSmallCreditorToString">
            <summary>
            Returns display value of ATRSmallCreditor setting
            </summary>
            <returns>string representation of ATRSmallCreditors setting</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing.ATRExemptCreditorToEnum(System.Int32)">
            <summary>
            Convert integer value to corresponding ATRExemptCreditor enum value
            </summary>
            <param name="value">integer value of the enum representation</param>
            <returns>ATRExemptCreditors type</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing.ATRExemptCreditorToString">
            <summary>
            Return display value of ATRExemptCreditor
            </summary>
            <returns>string representation of ATRExemptCreditors setting</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing.AddStateLicenseExtType(EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType)">
            <summary>
            Add a new state license to the license list
            </summary>
            <param name="stateLicenseExtType">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType">StateLicenseExtType</see> to add.</param>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing.UseParentInfo">
            <summary>
            Gets or sets user parent info
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing.LenderType">
            <summary>
            Gets or sets lender type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing.HomeState">
            <summary>
            Gets or sets state information
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing.StatutoryElectionInMaryland">
            <summary>
            Gets or sets flag for Statutory Election in Maryland
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing.StatutoryElectionInKansas">
            <summary>
            Gets or sets flag for Statutory Election in Kansas
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing.UseCustomLenderProfile">
            <summary>
            Gets or sets flag to use custom lender profile
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing.ATRSmallCreditor">
            <summary>
            Gets or sets ATR small creditor
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing.ATRExemptCreditor">
            <summary>
            Gets or sets ATR Exempt Creditor
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing.AllowLoansWithIssues">
            <summary>
            Gets or sets a flag to allow loans with issues
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing.MsgUploadNonApprovedLoans">
            <summary>
            Gets or sets warning message for uploading non-approved loans
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing.StateLicenseExtTypes">
            <summary>
            Gets a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType"></see>
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType">
            <summary>
            Represents a state license setting
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType.#ctor(System.String,System.String,System.String,System.DateTime,System.DateTime,System.DateTime,System.String,System.DateTime,System.Boolean,System.Boolean,System.DateTime)">
            <summary>
            Represents a state license setting
            </summary>
            <param name="stateAbbrevation">State Abbrevation</param>
            <param name="licenseType">license type</param>
            <param name="licenseNo">license number</param>
            <param name="issueDate">issue date</param>
            <param name="startDate">start date</param>
            <param name="endDate">end date</param>
            <param name="licenseStatus">license status</param>
            <param name="statusDate">status date</param>
            <param name="approved">flag indicates if approved</param>
            <param name="exempt">flag indicates if exempted</param>
            <param name="lastChecked">date time last checked</param>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType.StateAbbrevation">
            <summary>
            Gets or sets state abbrevation
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType.LicenseType">
            <summary>
            Gets or sets license type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType.Selected">
            <summary>
            Gets or sets selected flag
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType.Exempt">
            <summary>
            Gets or sets exempt flag
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType.LicenseNo">
            <summary>
            Gets or sets license number
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType.IssueDate">
            <summary>
            Gets or sets date issued
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType.StartDate">
            <summary>
            Gets or sets date started
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType.EndDate">
            <summary>
            Gets or sets date ends
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType.LicenseStatus">
            <summary>
            Gets or sets license status
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType.StatusDate">
            <summary>
            Gets or sets status date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType.Approved">
            <summary>
            Gets or sets approved flag
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType.LastChecked">
            <summary>
            Gets or sets date last checked
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType.SortIndex">
            <summary>
            Gets or sets sorting index
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.IStateLicenseExtType">
            <summary>
            Interface for IStateLicenseExtType class to support External State Licensing Types
            </summary>
            <exclude/>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationEntityType">
            <summary>
            Defines the possible channel type for an external organization
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationEntityType.Broker">
            <summary>
            Indicates an organization is broker
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationEntityType.Correspondent">
            <summary>
            Indicates an organization is correspondent
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationEntityType.Both">
            <summary>
            Indicates an organization is both broker and correspondent
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationSetting.License">
            <summary>
            license
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationSetting.LoanTypes">
            <summary>
            organization loan types settings
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationSetting.AssignableSalesReps">
            <summary>
            list of assignable sales reps
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationSetting.CompanyStatus">
            <summary>
            company status list
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationSetting.ContactStatus">
            <summary>
            contact status list
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationSetting.CompanyRating">
            <summary>
            company rating list
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationSetting.AttachmentCategory">
            <summary>
            attachment category list
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationSetting.PriceGroup">
            <summary>
            price group list
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationSetting.UrlList">
            <summary>
            selected urls
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationSetting.PrimaryManager">
            <summary>
            primary manager
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationSetting.Note">
            <summary>
            organization note
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationSetting.Attachment">
            <summary>
            attachments
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationSetting.LOComp">
            <summary>
            Lo Comp
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationSetting.LOCompHistory">
            <summary>
            LO Comp History
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationSetting.ExternalSalesRepListForOrg">
            <summary>
            list of external sales rep for the organization
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOriginationOrgType">
            <summary>
            Defines the possible external organization type
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOriginationOrgType.Company">
            <summary>
            Indicates an organization is company
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOriginationOrgType.CompanyExtension">
            <summary>
            Indicates an organization is company extension
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOriginationOrgType.Branch">
            <summary>
            Indicates an organization is branch
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOriginationOrgType.BranchExtension">
            <summary>
            Indicates an organization is branch extension
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOriginationCommitmentPolicy">
            <summary>
            Defines the possible policies for loans that exceed Max Commitment Authority
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOriginationCommitmentPolicy.NoRestriction">
            <summary>
            Indicates no restriction
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOriginationCommitmentPolicy.DontAllowLockorSubmit">
            <summary>
            Indicates restriction on Lock or Submit
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOriginationCommitmentPolicy.DontAllowLoanCreation">
            <summary>
            Indicates restriction on Loan Creation
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOriginationCorrespondentTradeCreationPolicy">
            <summary>
            Defines the possible policies for loans that exceed Max Commitment Authority
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOriginationCorrespondentTradeCreationPolicy.NoRestriction">
            <summary>
            Indicates no restriction
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOriginationCorrespondentTradeCreationPolicy.DontAllowTradeCreation">
            <summary>
            Indicates restriction on Trade creation
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization">
            <summary>
            Represents a single external organization
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.IExternalOrganization">
            <summary>
            Interface for IExternalOrganization class to support External User Management
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CreateUser(System.String,System.String,System.String,System.String,EllieMae.Encompass.Collections.ExternalUrlList)">
            <summary>
            Method to create new external user under the organization
            </summary>
            <param name="firstName">user's first name</param>
            <param name="lastName">user's last name</param>
            <param name="loginEmail">user's TPO web center login email</param>
            <param name="password">user's TPO web center login password</param>
            <param name="urls">a list of accessible urls</param>
            <returns>a new <see cref="T:EllieMae.Encompass.BusinessObjects.Users.ExternalUser">external</see> user object.</returns>
            <example>
The following code retrieves an organization from the Encompass Server and create a new external user.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      ExternalUser newUser = externalOrg.CreateUser("FirstName", "LastName", "login@EllieMae.com", "password", externalOrg.GetUrlList());

      if(newUser != null)
        Console.WriteLine("New contact created: " + newUser.ID);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CreateUser(System.String,System.String,System.String,System.String,EllieMae.Encompass.Collections.ExternalUrlList,EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Method to create new external user under the organization
            </summary>
            <param name="firstName">user's first name</param>
            <param name="lastName">user's last name</param>
            <param name="loginEmail">user's TPO web center login email</param>
            <param name="password">user's TPO web center login password</param>
            <param name="urls">a list of accessible urls</param>
            <param name="primaySalesRep">the primary sales rep to assign to the new external user</param>
            <returns>a new <see cref="T:EllieMae.Encompass.BusinessObjects.Users.ExternalUser">external</see> user object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CreateUser(System.String,System.String,System.String,System.String,EllieMae.Encompass.Collections.ExternalUrlList,EllieMae.Encompass.BusinessObjects.Users.ExternalUser)">
            <summary>
            Method to create new external user under the organization
            </summary>
            <param name="firstName">user's first name</param>
            <param name="lastName">user's last name</param>
            <param name="loginEmail">user's TPO web center login email</param>
            <param name="password">user's TPO web center login password</param>
            <param name="urls">a list of accessible urls</param>
            <param name="updatedByExtUser">UpdatedBy External User</param>
            <returns>a new <see cref="T:EllieMae.Encompass.BusinessObjects.Users.ExternalUser">external</see> user object.</returns>
            <example>
The following code retrieves an organization from the Encompass Server and create a new external user.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      ExternalUser newUser = externalOrg.CreateUser("FirstName", "LastName", "login@EllieMae.com", "password", externalOrg.GetUrlList());

      if(newUser != null)
        Console.WriteLine("New contact created: " + newUser.ID);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetUsers">
            <summary>
            Method to retrieve all external users under the organization
            </summary>
            <returns>a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.ExternalUser">users</see></returns>
            <example>
The following code retrieves an organization from the Encompass Server and retrieves all the external users under the organization.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      ExternalUserList externalUsers = externalOrg.GetUsers();

      Console.WriteLine("Users under organization " + externalOrg.CompanyLegalName + Environment.NewLine);
      foreach (ExternalUser externalUser in externalUsers)
         Console.WriteLine(externalUser.FirstName + " " + externalUser.LastName + Environment.NewLine);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetUrlList">
            <summary>
            Method to retrieve selected urls for the organization
            </summary>
            <returns>a list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl">external urls</see></returns>
            <example>
The following code retrieves an organization from the Encompass Server and retrieves all the assigned urls.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      ExternalUrlList externalUrls = externalOrg.GetUrlList();

      Console.WriteLine("Urls assigned to organization " + externalOrg.CompanyLegalName + Environment.NewLine);
      foreach (ExternalUrl externalUrl in externalUrls)
         Console.WriteLine(externalUrl.URL + " " + Environment.NewLine);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.AddExternalUrl(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl,EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationEntityType)">
            <summary>
            Method to retrieve selected urls for the organization
            </summary>
            <param name="Url">an ExternalSiteUrl object</param>
            <param name="entityType">ExternalOrganizationEntityType</param>
            <returns>an ExternalUrl object</returns>
            <example>
  The following code retrieves an organization from the Encompass Server.  A list of all available urls is retrieved.
  The code removes all currently assigned site and adds all previously not assigned urls.
  <code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //All available sites
      List<ExternalSiteUrl> availableSiteUrls = session.Organizations.GetSiteUrls();

      //Currently assigned urls
      List<ExternalUrl> externalUrls = externalOrg.GetUrlList().ToArray().ToList();

      //Remove currently assigned url and add previously not assigned urls
      foreach (ExternalSiteUrl externalSiteUrl in availableSiteUrls)
      {
          ExternalUrl externalUrl = externalUrls.FirstOrDefault(x => x.SiteId == externalSiteUrl.SiteId);
          if (externalUrl != null)
             externalOrg.DeleteExternalUrl(externalUrl);
          else
             externalOrg.AddExternalUrl(externalSiteUrl, externalOrg.EntityType);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.AddExternalUrl(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl)">
            <summary>
            Method to add url to the organization
            </summary>
            <param name="Url">an <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl">EXternalUrl</see> object</param>
            <returns>Returned the saved <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl">EXternalUrl</see> object</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.UpdateExternalUrls(EllieMae.Encompass.Collections.ExternalUrlList)">
            <summary>
            Method to overwrite organization's existing url setting with the updated setting
            </summary>
            <param name="orgUrls">A list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl">ExternalUrl</see> to update</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.DeleteExternalUrl(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl)">
            <summary>
            Delete a particular url setting for the organization
            </summary>
            <param name="url">The <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl">ExternalUrl</see> to delete.</param>
            <example>
  The following code retrieves an organization from the Encompass Server.  A list of all available urls is retrieved.
  The code removes all currently assigned site and adds all previously not assigned urls.
  <code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //All available sites
      List<ExternalSiteUrl> availableSiteUrls = session.Organizations.GetSiteUrls();

      //Currently assigned urls
      List<ExternalUrl> externalUrls = externalOrg.GetUrlList().ToArray().ToList();

      //Remove currently assigned url and add previously not assigned urls
      foreach (ExternalSiteUrl externalSiteUrl in availableSiteUrls)
      {
          ExternalUrl externalUrl = externalUrls.FirstOrDefault(x => x.SiteId == externalSiteUrl.SiteId);
          if (externalUrl != null)
             externalOrg.DeleteExternalUrl(externalUrl);
          else
             externalOrg.AddExternalUrl(externalSiteUrl, externalOrg.EntityType);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.UpdateStateLicense">
            <summary>
            Commits the license change to the external organization to the Encompass Server.
            </summary>
            <!-- Failed to insert some or all of included XML --><include file="Organization.xml" path="Examples/Example[@name=&quot;Organization.Commit&quot;]/*"/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.UpdateStateLicense(System.Collections.Generic.List{EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType})">
            <summary>
            Replace existing state license settings with the new settings
            </summary>
            <param name="stateLicenses">The <see cref="!:StateLicenseExtType">StateLicenseExtType</see> to update.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetAllNotes">
            <summary>
            Method to get all organization notes
            </summary>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalNote">ExternalNote</see></returns>
            <example>
      The following code retrieves an organization from the Encompass Server and perform add/delete notes.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Display number of notes
      Console.WriteLine("Number of notes:" + externalOrg.GetNumberOfNotes());

      //print out all notes
      ExternalNotesList noteList = externalOrg.GetAllNotes();
      foreach (ExternalNote note in noteList)
          Console.WriteLine("Note added by " + note.WhoAdded + ":" + note.NotesDetails);

      //delete first note in the list
      externalOrg.DeleteExternalNote(new ExternalNotesList() { noteList[0] });
      Console.WriteLine("Number of notes:" + externalOrg.GetNumberOfNotes());

      //add a new note
      externalOrg.CreateExternalNote("New note");
      Console.WriteLine("Number of notes:" + externalOrg.GetNumberOfNotes());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CreateExternalNote(System.String)">
            <summary>
            Method to create new organization note
            </summary>
            <param name="note">note to create</param>
            <returns>Created <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalNote">ExternalNote</see> object</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and perform add/delete notes.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Display number of notes
      Console.WriteLine("Number of notes:" + externalOrg.GetNumberOfNotes());

      //print out all notes
      ExternalNotesList noteList = externalOrg.GetAllNotes();
      foreach (ExternalNote note in noteList)
          Console.WriteLine("Note added by " + note.WhoAdded + ":" + note.NotesDetails);

      //delete first note in the list
      externalOrg.DeleteExternalNote(new ExternalNotesList() { noteList[0] });
      Console.WriteLine("Number of notes:" + externalOrg.GetNumberOfNotes());

      //add a new note
      externalOrg.CreateExternalNote("New note");
      Console.WriteLine("Number of notes:" + externalOrg.GetNumberOfNotes());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.DeleteExternalNote(EllieMae.Encompass.Collections.ExternalNotesList)">
            <summary>
            Method to delete organization note
            </summary>
            <param name="notes">The list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalNote">ExternalNote</see> to delete.</param>
            <example>
      The following code retrieves an organization from the Encompass Server and perform add/delete notes.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Display number of notes
      Console.WriteLine("Number of notes:" + externalOrg.GetNumberOfNotes());

      //print out all notes
      ExternalNotesList noteList = externalOrg.GetAllNotes();
      foreach (ExternalNote note in noteList)
          Console.WriteLine("Note added by " + note.WhoAdded + ":" + note.NotesDetails);

      //delete first note in the list
      externalOrg.DeleteExternalNote(new ExternalNotesList() { noteList[0] });
      Console.WriteLine("Number of notes:" + externalOrg.GetNumberOfNotes());

      //add a new note
      externalOrg.CreateExternalNote("New note");
      Console.WriteLine("Number of notes:" + externalOrg.GetNumberOfNotes());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetNumberOfNotes">
            <summary>
            Method to get number of notes
            </summary>
            <returns>number of notes</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and perform add/delete notes.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Display number of notes
      Console.WriteLine("Number of notes:" + externalOrg.GetNumberOfNotes());

      //print out all notes
      ExternalNotesList noteList = externalOrg.GetAllNotes();
      foreach (ExternalNote note in noteList)
          Console.WriteLine("Note added by " + note.WhoAdded + ":" + note.NotesDetails);

      //delete first note in the list
      externalOrg.DeleteExternalNote(new ExternalNotesList() { noteList[0] });
      Console.WriteLine("Number of notes:" + externalOrg.GetNumberOfNotes());

      //add a new note
      externalOrg.CreateExternalNote("New note");
      Console.WriteLine("Number of notes:" + externalOrg.GetNumberOfNotes());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetAllAttachments">
            <summary>
            Method to get all attachments
            </summary>
            <returns>a list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment">ExternalAttachment</see></returns>
            <example>
      The following code retrieves an organization from the Encompass Server and perform add/delete attachments.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Display number of attachments
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());
      Console.WriteLine("Any expired attachments:" + (externalOrg.GetExternalAttachmentIsExpired() ? "Yes" : "No"));

      //print out all attachments
      List<ExternalAttachment> attachmentList = externalOrg.GetAllAttachments();
      foreach (ExternalAttachment attachment in attachmentList)
         Console.WriteLine("Attachment added by " + attachment.UserWhoAdded + ":" + attachment.FileName);

      //delete first note in the list
      externalOrg.DeleteExternalAttachment(attachmentList[0]);
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());

      //add a new note
      externalOrg.CreateExternalAttachment("SampleFileName.pdf", "Sample attachment description", DateTime.Now, 0,
          DateTime.Now, DateTime.Now.AddYears(1), 365, "C:\\SampleFileName.pdf", new EllieMae.Encompass.BusinessObjects.DataObject("C:\\SampleFileName.pdf"));
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CreateExternalAttachment(System.String,System.String,System.DateTime,System.String,System.DateTime,System.DateTime,System.Int32,System.String,EllieMae.Encompass.BusinessObjects.DataObject)">
            <summary>
            Method to create new attachment
            </summary>
            <param name="fileName">Name of the file</param>
            <param name="description">Description of the attachment</param>
            <param name="dateAdded">Date added</param>
            <param name="category">Category</param>
            <param name="fileDate">File Date</param>
            <param name="expirationDate">Expiration Date</param>
            <param name="daysToExpire">Days to expire</param>
            <param name="fileLocation">location of the file</param>
            <param name="file">Binary object of the file</param>
            <returns>an ExternalAttachment object</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and perform add/delete attachments.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Display number of attachments
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());
      Console.WriteLine("Any expired attachments:" + (externalOrg.GetExternalAttachmentIsExpired() ? "Yes" : "No"));

      //print out all attachments
      List<ExternalAttachment> attachmentList = externalOrg.GetAllAttachments();
      foreach (ExternalAttachment attachment in attachmentList)
         Console.WriteLine("Attachment added by " + attachment.UserWhoAdded + ":" + attachment.FileName);

      //delete first note in the list
      externalOrg.DeleteExternalAttachment(attachmentList[0]);
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());

      //add a new note
      externalOrg.CreateExternalAttachment("SampleFileName.pdf", "Sample attachment description", DateTime.Now, 0,
          DateTime.Now, DateTime.Now.AddYears(1), 365, "C:\\SampleFileName.pdf", new EllieMae.Encompass.BusinessObjects.DataObject("C:\\SampleFileName.pdf"));
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CreateExternalAttachment(System.String,System.String,System.DateTime,EllieMae.Encompass.BusinessObjects.ExternalOrganization.AttachmentCategory,System.DateTime,System.DateTime,System.Int32,System.String,EllieMae.Encompass.BusinessObjects.DataObject)">
            <summary>
            Method to create new attachment
            </summary>
            <param name="fileName">Name of the file</param>
            <param name="description">Description of the attachment</param>
            <param name="dateAdded">Date added</param>
            <param name="category">Attachment Category</param>
            <param name="fileDate">File Date</param>
            <param name="expirationDate">Expiration Date</param>
            <param name="daysToExpire">Days to expire</param>
            <param name="fileLocation">location of the file</param>
            <param name="file">Binary object of the file</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment">ExternalAttachment</see> created.</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and perform add/delete attachments.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Display number of attachments
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());
      Console.WriteLine("Any expired attachments:" + (externalOrg.GetExternalAttachmentIsExpired() ? "Yes" : "No"));

      //print out all attachments
      List<ExternalAttachment> attachmentList = externalOrg.GetAllAttachments();
      foreach (ExternalAttachment attachment in attachmentList)
         Console.WriteLine("Attachment added by " + attachment.UserWhoAdded + ":" + attachment.FileName);

      //delete first note in the list
      externalOrg.DeleteExternalAttachment(attachmentList[0]);
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());

      //add a new note
      externalOrg.CreateExternalAttachment("SampleFileName.pdf", "Sample attachment description", DateTime.Now, 0,
          DateTime.Now, DateTime.Now.AddYears(1), 365, "C:\\SampleFileName.pdf", new EllieMae.Encompass.BusinessObjects.DataObject("C:\\SampleFileName.pdf"));
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.UpdateExternalAttachment(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment,EllieMae.Encompass.BusinessObjects.DataObject)">
            <summary>
            Method to update an existing external attachment
            </summary>
            <param name="attachment">The <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment">ExternalAttachment</see> to update.</param>
            <param name="file">The <see cref="T:EllieMae.Encompass.BusinessObjects.DataObject">DataObject</see> object to update</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.DeleteExternalAttachment(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment)">
            <summary>
            Method to delete an attachment
            </summary>
            <param name="attachment">The <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment">ExternalAttachment</see> to delete.</param>
            <example>
      The following code retrieves an organization from the Encompass Server and perform add/delete attachments.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Display number of attachments
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());
      Console.WriteLine("Any expired attachments:" + (externalOrg.GetExternalAttachmentIsExpired() ? "Yes" : "No"));

      //print out all attachments
      List<ExternalAttachment> attachmentList = externalOrg.GetAllAttachments();
      foreach (ExternalAttachment attachment in attachmentList)
         Console.WriteLine("Attachment added by " + attachment.UserWhoAdded + ":" + attachment.FileName);

      //delete first note in the list
      externalOrg.DeleteExternalAttachment(attachmentList[0]);
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());

      //add a new note
      externalOrg.CreateExternalAttachment("SampleFileName.pdf", "Sample attachment description", DateTime.Now, 0,
          DateTime.Now, DateTime.Now.AddYears(1), 365, "C:\\SampleFileName.pdf", new EllieMae.Encompass.BusinessObjects.DataObject("C:\\SampleFileName.pdf"));
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetExternalAttachmentIsExpired">
            <summary>
            Get a flag indicating if any of the attachment is expired
            </summary>
            <returns>flag indicating if any of the attachment is expired</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and perform add/delete attachments.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Display number of attachments
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());
      Console.WriteLine("Any expired attachments:" + (externalOrg.GetExternalAttachmentIsExpired() ? "Yes" : "No"));

      //print out all attachments
      List<ExternalAttachment> attachmentList = externalOrg.GetAllAttachments();
      foreach (ExternalAttachment attachment in attachmentList)
         Console.WriteLine("Attachment added by " + attachment.UserWhoAdded + ":" + attachment.FileName);

      //delete first note in the list
      externalOrg.DeleteExternalAttachment(attachmentList[0]);
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());

      //add a new note
      externalOrg.CreateExternalAttachment("SampleFileName.pdf", "Sample attachment description", DateTime.Now, 0,
          DateTime.Now, DateTime.Now.AddYears(1), 365, "C:\\SampleFileName.pdf", new EllieMae.Encompass.BusinessObjects.DataObject("C:\\SampleFileName.pdf"));
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetNumberOfAttachments">
            <summary>
            Gets number of attachments
            </summary>
            <returns>Number of attachments</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and perform add/delete attachments.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Display number of attachments
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());
      Console.WriteLine("Any expired attachments:" + (externalOrg.GetExternalAttachmentIsExpired() ? "Yes" : "No"));

      //print out all attachments
      List<ExternalAttachment> attachmentList = externalOrg.GetAllAttachments();
      foreach (ExternalAttachment attachment in attachmentList)
         Console.WriteLine("Attachment added by " + attachment.UserWhoAdded + ":" + attachment.FileName);

      //delete first note in the list
      externalOrg.DeleteExternalAttachment(attachmentList[0]);
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());

      //add a new note
      externalOrg.CreateExternalAttachment("SampleFileName.pdf", "Sample attachment description", DateTime.Now, 0,
          DateTime.Now, DateTime.Now.AddYears(1), 365, "C:\\SampleFileName.pdf", new EllieMae.Encompass.BusinessObjects.DataObject("C:\\SampleFileName.pdf"));
      Console.WriteLine("Number of attachments:" + externalOrg.GetNumberOfAttachments());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.ReadAttachment(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment)">
            <summary>
            Gets existing attachment in binary format
            </summary>
            <param name="attachment">The <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalAttachment">ExternalAttachment</see> to retrieve data.</param>
            <returns><see cref="T:EllieMae.Encompass.BusinessObjects.DataObject">DataObject</see> object</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetAllLOCompPlans">
            <summary>
            Get all LO comp plans
            </summary>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan">ExternalLoanCompPlan</see></returns>
            <example>
      The following code retrieves an organization from the Encompass Server and perform add/delete attachments.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Display number of LO Comp History
      Console.WriteLine("Number of LO Comp History:" + externalOrg.GetNumberOfLOCompHistory());

      //print out all LO Comp History
      ExternalLoanCompHistoryList loCompHistoryList = externalOrg.GetLOCompHistory();
      foreach (ExternalLoanCompHistory loCompHistory in loCompHistoryList)
          Console.WriteLine("LO Comp History - " + loCompHistory.PlanName + ":" + loCompHistory.StartDate.ToShortDateString() + 
                " to " + loCompHistory.EndDate.ToShortDateString());

      //delete first LO Comp History in the list
      externalOrg.DeleteLoCompHistory(loCompHistoryList[0]);
      Console.WriteLine("Number of LO Comp History:" + externalOrg.GetNumberOfLOCompHistory());

      //add a new LO Comp History
      ExternalLoanCompPlanList loCompPlanList = externalOrg.GetAllLOCompPlans();
      externalOrg.AssignLOCompPlan(loCompPlanList[0], DateTime.Now.AddMonths(1), DateTime.Now.AddMonths(12));
      Console.WriteLine("Number of LO Comp History:" + externalOrg.GetNumberOfLOCompHistory());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetNumberOfLOCompPlans">
            <summary>
            Gets number of LO Comp Plans
            </summary>
            <returns>number of LO Comp Plans</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetLOCompHistory">
            <summary>
            Gets LO Comp History
            </summary>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory">ExternalLoanCompHistory</see></returns>
            <example>
      The following code retrieves an organization from the Encompass Server and perform add/delete attachments.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Display number of LO Comp History
      Console.WriteLine("Number of LO Comp History:" + externalOrg.GetNumberOfLOCompHistory());

      //print out all LO Comp History
      ExternalLoanCompHistoryList loCompHistoryList = externalOrg.GetLOCompHistory();
      foreach (ExternalLoanCompHistory loCompHistory in loCompHistoryList)
          Console.WriteLine("LO Comp History - " + loCompHistory.PlanName + ":" + loCompHistory.StartDate.ToShortDateString() + 
                " to " + loCompHistory.EndDate.ToShortDateString());

      //delete first LO Comp History in the list
      externalOrg.DeleteLoCompHistory(loCompHistoryList[0]);
      Console.WriteLine("Number of LO Comp History:" + externalOrg.GetNumberOfLOCompHistory());

      //add a new LO Comp History
      ExternalLoanCompPlanList loCompPlanList = externalOrg.GetAllLOCompPlans();
      externalOrg.AssignLOCompPlan(loCompPlanList[0], DateTime.Now.AddMonths(1), DateTime.Now.AddMonths(12));
      Console.WriteLine("Number of LO Comp History:" + externalOrg.GetNumberOfLOCompHistory());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetNumberOfLOCompHistory">
            <summary>
            Gets number of LO Comp History
            </summary>
            <returns>number of LO Comp History</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and perform add/delete attachments.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Display number of LO Comp History
      Console.WriteLine("Number of LO Comp History:" + externalOrg.GetNumberOfLOCompHistory());

      //print out all LO Comp History
      ExternalLoanCompHistoryList loCompHistoryList = externalOrg.GetLOCompHistory();
      foreach (ExternalLoanCompHistory loCompHistory in loCompHistoryList)
          Console.WriteLine("LO Comp History - " + loCompHistory.PlanName + ":" + loCompHistory.StartDate.ToShortDateString() + 
                " to " + loCompHistory.EndDate.ToShortDateString());

      //delete first LO Comp History in the list
      externalOrg.DeleteLoCompHistory(loCompHistoryList[0]);
      Console.WriteLine("Number of LO Comp History:" + externalOrg.GetNumberOfLOCompHistory());

      //add a new LO Comp History
      ExternalLoanCompPlanList loCompPlanList = externalOrg.GetAllLOCompPlans();
      externalOrg.AssignLOCompPlan(loCompPlanList[0], DateTime.Now.AddMonths(1), DateTime.Now.AddMonths(12));
      Console.WriteLine("Number of LO Comp History:" + externalOrg.GetNumberOfLOCompHistory());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.AssignLOCompPlan(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan,System.DateTime,System.DateTime)">
            <summary>
            Method to Add LO Comp Plan
            </summary>
            <param name="loanCompPlan">external loan comp plan</param>
            <param name="startDate">date started</param>
            <param name="endDate">end started</param>
            <returns>The assigned <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory">ExternalLoanCompHistory</see></returns>
            <example>
      The following code retrieves an organization from the Encompass Server and perform add/delete attachments.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Display number of LO Comp History
      Console.WriteLine("Number of LO Comp History:" + externalOrg.GetNumberOfLOCompHistory());

      //print out all LO Comp History
      ExternalLoanCompHistoryList loCompHistoryList = externalOrg.GetLOCompHistory();
      foreach (ExternalLoanCompHistory loCompHistory in loCompHistoryList)
          Console.WriteLine("LO Comp History - " + loCompHistory.PlanName + ":" + loCompHistory.StartDate.ToShortDateString() + 
                " to " + loCompHistory.EndDate.ToShortDateString());

      //delete first LO Comp History in the list
      externalOrg.DeleteLoCompHistory(loCompHistoryList[0]);
      Console.WriteLine("Number of LO Comp History:" + externalOrg.GetNumberOfLOCompHistory());

      //add a new LO Comp History
      ExternalLoanCompPlanList loCompPlanList = externalOrg.GetAllLOCompPlans();
      externalOrg.AssignLOCompPlan(loCompPlanList[0], DateTime.Now.AddMonths(1), DateTime.Now.AddMonths(12));
      Console.WriteLine("Number of LO Comp History:" + externalOrg.GetNumberOfLOCompHistory());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetCurrentPlan(System.DateTime)">
            <summary>
            Method to get current plan based on the trigger date
            </summary>
            <param name="triggerDateTime">The trigger date to get the plan</param>
            <returns>The active <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory">ExternalLoanCompHistory</see> for the specified date.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetCurrentAndFuturePlans(System.DateTime)">
            <summary>
            Method to get current and future plans from a particular date
            </summary>
            <param name="todayDate">The started date</param>
            <returns>A list of active and future <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory">ExternalLoanCompHistory</see> for the specified date.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetFuturePlans(System.DateTime)">
            <summary>
            Gets future plans from a particular date
            </summary>
            <param name="todayDate">The start date</param>
            <returns>A list of future <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory">ExternalLoanCompHistory</see> for the specified date.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.UpdateStartDateForCompHistory(System.DateTime,EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory)">
            <summary>
            Method to update the start date of a loan comp history
            </summary>
            <param name="startDate">new start date</param>
            <param name="selectedLoanCompHistory">The <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory">ExternalLoanCompHistory</see> to update.</param>
            <returns>True if successfully updated.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetLoCompHistoryByPlanId(System.Int32)">
            <summary>
            Method to get LoComp History by plan id
            </summary>
            <param name="compPlanId">the comp plan id</param>
            <returns>The desired <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory">ExternalLoanCompHistory</see> object</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.DeleteLoCompHistory(EllieMae.Encompass.Collections.ExternalLoanCompHistoryList)">
            <summary>
            Method to delete a list of LO Comp histories
            </summary>
            <param name="compPlans">A list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory">ExternalLoanCompHistory</see> to delete.</param>
            <returns>Result of the transaction.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.DeleteLoCompHistory(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory)">
            <summary>
            Method to delete one LO Comp history
            </summary>
            <param name="compPlan">The <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory">ExternalLoanCompHistory</see> to delete.</param>
            <returns>Result of the transaction.</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and perform add/delete attachments.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Display number of LO Comp History
      Console.WriteLine("Number of LO Comp History:" + externalOrg.GetNumberOfLOCompHistory());

      //print out all LO Comp History
      ExternalLoanCompHistoryList loCompHistoryList = externalOrg.GetLOCompHistory();
      foreach (ExternalLoanCompHistory loCompHistory in loCompHistoryList)
          Console.WriteLine("LO Comp History - " + loCompHistory.PlanName + ":" + loCompHistory.StartDate.ToShortDateString() + 
                " to " + loCompHistory.EndDate.ToShortDateString());

      //delete first LO Comp History in the list
      externalOrg.DeleteLoCompHistory(loCompHistoryList[0]);
      Console.WriteLine("Number of LO Comp History:" + externalOrg.GetNumberOfLOCompHistory());

      //add a new LO Comp History
      ExternalLoanCompPlanList loCompPlanList = externalOrg.GetAllLOCompPlans();
      externalOrg.AssignLOCompPlan(loCompPlanList[0], DateTime.Now.AddMonths(1), DateTime.Now.AddMonths(12));
      Console.WriteLine("Number of LO Comp History:" + externalOrg.GetNumberOfLOCompHistory());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.SetSalesRepAsPrimary(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Method to set an Encompass user as sales rep
            </summary>
            <param name="user">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User">User</see> to set as sales rep.</param>
            <returns>result of the transaction.</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and assign a new sales rep.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      User newSalesRep = session.Users.GetUser("SampleSalesRep");

      ExternalSalesRep currentPrimaySalesRep = externalOrg.GetPrimarySalesRep();

      //If current primary sales rep is not the same as SampleSalesRep and it is deletable,
      //remove the existing primary sales rep from the sales rep list of the organization.
      if (currentPrimaySalesRep != null && currentPrimaySalesRep.userId != newSalesRep.ID && currentPrimaySalesRep.isDeletable)
      {
          externalOrg.DeleteExternalOrganizationSalesReps(new ExternalSalesRep[] { currentPrimaySalesRep });
      }

      //Set SampleSalesRep as the new primary sales rep of the organization.
      externalOrg.SetSalesRepAsPrimary(newSalesRep);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetPrimarySalesRep">
            <summary>
            Method to retrieve Primary sales rep
            </summary>
            <returns>The primary <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSalesRep">sales rep</see>.</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and assign a new sales rep.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      User newSalesRep = session.Users.GetUser("SampleSalesRep");

      ExternalSalesRep currentPrimaySalesRep = externalOrg.GetPrimarySalesRep();

      //If current primary sales rep is not the same as SampleSalesRep and it is deletable,
      //remove the existing primary sales rep from the sales rep list of the organization.
      if (currentPrimaySalesRep != null && currentPrimaySalesRep.userId != newSalesRep.ID && currentPrimaySalesRep.isDeletable)
      {
          externalOrg.DeleteExternalOrganizationSalesReps(new ExternalSalesRep[] { currentPrimaySalesRep });
      }

      //Set SampleSalesRep as the new primary sales rep of the organization.
      externalOrg.SetSalesRepAsPrimary(newSalesRep);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.DeleteExternalOrganizationSalesReps(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSalesRep[])">
            <summary>
            Method to remove a list of Encompass users as sales reps
            </summary>
            <param name="users">The list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSalesRep">sales reps</see> to delete.</param>
            <returns>result of the transaction.</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and assign a new sales rep.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      User newSalesRep = session.Users.GetUser("SampleSalesRep");

      ExternalSalesRep currentPrimaySalesRep = externalOrg.GetPrimarySalesRep();

      //If current primary sales rep is not the same as SampleSalesRep and it is deletable,
      //remove the existing primary sales rep from the sales rep list of the organization.
      if (currentPrimaySalesRep != null && currentPrimaySalesRep.userId != newSalesRep.ID && currentPrimaySalesRep.isDeletable)
      {
          externalOrg.DeleteExternalOrganizationSalesReps(new ExternalSalesRep[] { currentPrimaySalesRep });
      }

      //Set SampleSalesRep as the new primary sales rep of the organization.
      externalOrg.SetSalesRepAsPrimary(newSalesRep);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetExternalOrgSalesRepsForCurrentOrg">
            <summary>
            Method to get sales reps assigned to the organization
            </summary>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSalesRep">ExternalSalesRep</see></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetExternalOrgSalesRepUsersForCurrentOrg">
            <summary>
            Method to get internal users who are assigned to the external organization as sales rep
            </summary>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User">User</see></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetExternalOrgSalesRepsForCompany">
            <summary>
            Method to get sales reps from the company of the organization
            </summary>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSalesRep">ExternalSalesRep</see></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetAllInternalUsers">
            <summary>
            Method to get Encompass users eligible to be sales rep based on the persona setting.
            </summary>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User">User</see></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.AddInternalUserAsSalesRep(EllieMae.Encompass.BusinessObjects.Users.User[])">
            <summary>
            Method to add a list of Encompass users as sales rep of the organization
            </summary>
            <param name="user">A list of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User">User</see> to add.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetAllExternalFees">
            <summary>
            Method to get all external Fees
            </summary>
            <returns>an ExternalFeesList object</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and retrieve all
      All External Org Fees
      <code>
        <![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Get all external fees for the organization
      ExternalFeesList feesList = externalOrg.GetAllExternalFees();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetExternalFeesByChannel(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationEntityType)">
            <summary>
            Method to get all external Fees by Channel
            </summary>
            <param name="channel">ExternalOrganizationEntityType</param>
            <returns>an ExternalFeesList object</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and retrieve all
      All External Org Fees by Channel
      <code>
        <![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Get all external fees for the organization by channel
      ExternalFeesList feesList = externalOrg.GetExternalFeesByChannel(ExternalOrganizationEntityType.Broker);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetExternalFeesByStatus(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOriginatorFeeStatus)">
            <summary>
            Method to get all external Fees by Status
            </summary>
            <param name="status">ExternalOriginatorFeeStatus</param>
            <returns>an ExternalFeesList object</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and retrieve all
      All External Org Fees by Status
      <code>
        <![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Get all external fees for the organization by channel
      ExternalFeesList feesList = externalOrg.GetExternalFeesByStatus(ExternalOriginatorFeeStatus.Active);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.AddExternalFees(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees)">
            <summary>
            Method to add an external Fee
            </summary>
            <param name="fee">ExternalFees</param>
            <returns>an ExternalFeesList object</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and adds a manual External Fee
      <code>
        <![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Create an External Fee
      ExternalFees fee = new ExternalFees();
      fee.FeeName = "SampleFee";
      fee.Channel = ExternalOrganizationEntityType.Correspondent;
      fee.FeeAmount = 100;
      fee.Code = "SampleCode";
      fee.StartDate = DateTime.Now;
      fee.EndDate = DateTime.Now.AddDays(1);
      //Add new external fees for the organization
      ExternalFeesList feesList = externalOrg.AddExternalFees(fee);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.EditExternalFees(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees)">
            <summary>
            Method to edit an external Fee
            </summary>
            <param name="fee">ExternalFees</param>
            <returns></returns>
            <example>
      The following code retrieves an organization from the Encompass Server and retreives all External Fees and edit an External Fee
      <code>
        <![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Get all external fees for the organization by channel
      ExternalFeesList feesList = externalOrg.GetExternalFeesByStatus(ExternalOriginatorFeeStatus.Active);
      
      //Edit an External Fee
      if (feesList.Count > 0)
      {
        ExternalFees fee = feesList[0];
        fee.FeeAmount = 500;
        fee.EndDate = fee.EndDate.AddDays(1);
        //Edit an external fee
        externalOrg.EditExternalFees(fee);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.DeleteExternalFees(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees)">
            <summary>
            Method to delete an external Fee
            </summary>
            <param name="fee">ExternalFees</param>
            <returns></returns>
            <example>
      The following code retrieves an organization from the Encompass Server and retreives all External Fees and delete an External Fee
      <code>
        <![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Get all external fees for the organization by channel
      ExternalFeesList feesList = externalOrg.GetExternalFeesByStatus(ExternalOriginatorFeeStatus.Expired);
      
      //Edit an External Fee
      if (feesList.Count > 0)
      {
        ExternalFees fee = feesList[0];
        
        //Delete an external fee
        externalOrg.DeleteExternalFees(fee);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetExternalLateFeeSettings">
            <summary>
            Method to get the Late Fee Settings
            </summary>
            <returns>LateFeeSettings</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and retreives the Late Fee Settings
      <code>
        <![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Get Late Fee Settings
      LateFeeSettings settings = externalOrg.GetExternalLateFeeSettings(); 

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetAllDBANames">
            <summary>
            Method to get all DBA Names
            </summary>
            <returns>an ExternalDBAList object</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and retreives all DBA names
      <code>
        <![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Get all DBA Names
      ExternalDBAList dbaList = externalOrg.GetAllDBANames();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetDefaultDBAName">
            <summary>
            Method to get the default DBA Name
            </summary>
            <returns>an ExternalDBAName object</returns>
            <example>
      The following code retrieves an organization from the Encompass Server and retreive the default DBA name
      <code>
        <![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Get the default DBA Name
      ExternalDBAName defaultDBA = externalOrg.GetDefaultDBAName();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.SetDefaultDBAName(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDBAName)">
            <summary>
            Method to set the default DBA Name
            </summary>
            <param name="dba">an ExternalDBAName object</param>
            <example>
      The following code retrieves an organization from the Encompass Server and retreives all DBA names and set the default DBA name
      <code>
        <![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");
      
      //Get all DBA Names
      ExternalDBAList dbaList = externalOrg.GetAllDBANames();
      
      if (dbaList.Count > 0)
      {
          //Set the default DBA Name
          externalOrg.SetDefaultDBAName(dbaList[0]);
      }
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.AddDBAName(System.String,System.Boolean)">
            <summary>
            Method to add a DBA Name
            </summary>
            <param name="name">DBA Name</param>
            <param name="setDefault">Is Default</param>
            <example>
      The following code retrieves an organization from the Encompass Server and add a DBA name
      <code>
        <![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organization based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");
      
      //Add a DBA Name and set to default
      externalOrg.AddDBAName("sampleName", true);
      
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.EditDBAName(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDBAName)">
            <summary>
            Method to edit a DBA Name or IsDefault property
            </summary>
            <param name="dba">an ExternalDBAName object</param>
            <example>
      The following code retrieves an organization from the Encompass Server and retreives all DBA names and edit a DBA name and IsDefault property
      <code>
        <![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organization based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");
      
      //Get all DBA Names
      ExternalDBAList dbaList = externalOrg.GetAllDBANames();
      
      if (dbaList.Count > 0)
      {
          ExternalDBAName dba = dbaList[0];
          dba.Name = "NewSample";
          dba.SetAsDefault = true;
          //Edit the DBA Name
          externalOrg.EditDBAName(dba);
      }
      
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.DeleteDBAName(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDBAName)">
            <summary>
            Method to delete a DBA Name
            </summary>
            <param name="dba">an ExternalDBAName object</param>
            <example>
      The following code retrieves an organization from the Encompass Server and retreives all DBA names and delete a DBA name
      <code>
        <![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organization based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");
      
      //Get all DBA Names
      ExternalDBAList dbaList = externalOrg.GetAllDBANames();
      
      if (dbaList.Count > 0)
      {
          externalOrg.DeleteDBAName(dbaList[0]);
      }
      
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.ChangeSortIndexDBANames(System.Collections.Generic.Dictionary{System.Int32,EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDBAName})">
            <summary>
            Method to change the sort Index of the DBA Names
            </summary>
            <param name="dbas">a Dictionary with the sortIndex of the DBA name as Key and the ExternalDBAName object as Value</param>
            <example>
      The following code retrieves an organization from the Encompass Server and retreives all DBA names and reverse the sort Index
      <code>
        <![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organization based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");
      
      //Get all DBA Names
      ExternalDBAList dbaList = externalOrg.GetAllDBANames();
      
      if (dbaList.Count > 0)
      {
          Dictionary<int, ExternalDBAName> sortList = new Dictionary<int, ExternalDBAName>();
          int count = dbaList.Count - 1;
          foreach(ExternalDBAName dba in dbaList)
          {
              sortList.Add(count, dba);
              count--;
          }
          externalOrg.ChangeSortIndexDBANames(sortList);
      }
      
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetAllExternalOrgDocuments">
            <summary>
            Get All External Org Documents
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetExternalOrgDocuments(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationEntityType)">
            <summary>
            Get All External Org Documents by Channel
            </summary>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetExternalOrgDocuments(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrgOriginatorStatus)">
            <summary>
            Get All External Org Documents by Status
            </summary>
            <param name="status"></param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetExternalOrgDocuments(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationEntityType,EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrgOriginatorStatus,System.Boolean)">
            <summary>
            Get All External Org Documents by Channel, Status
            </summary>
            <param name="channel"></param>
            <param name="status"></param>
            <param name="disableGlobalDocs"></param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetAllArchivedDocuments">
            <summary>
            Get All Archived Org Documents
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.AddExternalDocument(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings,EllieMae.Encompass.BusinessObjects.DataObject,System.Boolean)">
            <summary>
            Add External Document to Org
            </summary>
            <param name="document"></param>
            <param name="fileObject"></param>
            <param name="isTopOfCategory"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.UpdateExternalDocument(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings)">
            <summary>
            Update External Document Settings
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.DeleteExternalDocument(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings)">
            <summary>
            Delete External Document
            </summary>
            <param name="document"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.ArchiveExternalDocument(System.String)">
            <summary>
            Archive External Document
            </summary>
            <param name="guid"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.UnArchiveExternalDocuments(System.Collections.Generic.List{System.String})">
            <summary>
            UnArchive External Documents
            </summary>
            <param name="guids"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.ChangeActiveCheckedExternalDocument(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings,System.Boolean)">
            <summary>
            Change Active Checked External Document
            </summary>
            <param name="document"></param>
            <param name="activeChecked"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.ChangeActiveCheckedExternalDocument(System.Int32,System.Boolean)">
            <summary>
            Change Active Checked for External Documents within selected category
            </summary>
            <param name="category"></param>
            <param name="activeChecked"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetGlobalExternalDocumentsToAssign">
            <summary>
            Get Global External Documents to Assign
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.AssignGlobalDocumentToOrg(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings,System.Boolean)">
            <summary>
            Assign Global Document to Org
            </summary>
            <param name="document"></param>
            <param name="isTopOfCategory"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.SwapSortOrderOfDocuments(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings,EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings)">
            <summary>
            Swap Sort Order of Documents
            </summary>
            <param name="firstDocument"></param>
            <param name="secondDocument"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.ReadDocumentFromDataFolder(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings)">
            <summary>
            Read Document from Data Folder
            </summary>
            <param name="document"></param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.RemoveAssignedDocFromTPO(System.String)">
            <summary>
            Remove Assigned Doc From TPO
            </summary>
            <param name="guid"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.BatchLoadSettings(System.Collections.Generic.List{EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationSetting})">
            <summary>
            Batch Load Settings
            </summary>
            <param name="settings">List of different areas to preload data</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetOutstandingCommentments">
            <summary>
            Get outstanding commitments
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetExtensionOrganizations(System.Boolean)">
            <summary>
            Gets list of extension organizations with the same external ID from the immediate child nodes or the whole company
            </summary>
            <param name="immediateChildOnly">indicates whether to return external organization only from the immediate child.</param>
            <returns>a list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization">ExternalOrganization</see></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetAllBranches">
            <summary>
            Method to get all branches of the organization
            </summary>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization">ExternalOrganization</see></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetAllBranches(System.String)">
            <summary>
            Get All branches assigned to a particular site
            </summary>
            <param name="siteID"></param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.Commit">
            <summary>
            Commits the changes to the current ExternalOrganization.
            </summary>
            <example>
The following code retrieves an organization from the Encompass Server, modifies
its company legal name and save back to database.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      externalOrg.CompanyLegalName = "New legal name";
      externalOrg.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetALLExternalOrganizationByType(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOriginationOrgType)">
            <summary>
            Method to get a list of sub organizations based on a specific type
            </summary>
            <param name="organizationType">The organization type to get</param>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization">ExternalOrganization</see></returns>
            <example>
The following code retrieves an organization from the Encompass Server and retrieve all 
the branch organizations below that organization.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      //Get all branch organizations under the organization
      List<ExternalOrganization> organizations = externalOrg.GetALLExternalOrganizationByType(ExternalOriginationOrgType.Branch);

      foreach(ExternalOrganization organization in organizations)
         Console.WriteLine("Organization: " + organization.OrganizationName);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetAttachmentCategories">
            <summary>
            Method to get a list of AttachmentCategory
            </summary>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.AttachmentCategory">AttachmentCategory</see></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetCurrentCompanyStatus">
            <summary>
            Method to get a list of CompanyStatus
            </summary>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CurrentCompanyStatus">CurrentCompanyStatus</see></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetCompanyRatings">
            <summary>
            Method to get a list of CompanyRatings
            </summary>
            <returns>A list of <see cref="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CompanyRating">CompanyRating</see></returns>
            <example>
The following code retrieves a list of available company ratings from the Encompass Server (TPO Settings) and assign it to the current organization. Ratings are based on your company’s own scale and requirements.
<code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external organizaiton based on an external Id
      ExternalOrganization externalOrg = session.Organizations.GetExternalOrganization("SampleExternalID");

      // Retrieve the current company rating for this organization
      CompanyRating current = externalOrg.CompanyRating;

      //Get all possible company ratings from TPO Settings/Company Rating
      List<CompanyRating> ratings = externalOrg.GetCompanyRatings();
      
      //set a different rating to the current organization 
      if (current != ratings[0])
           externalOrg.CompanyRating = ratings[0];
      externalOrg.Commit();   

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetRateSheets">
            <summary>
            Method to get a list of RateSheets
            </summary>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.RateSheet">RateSheet</see></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetPriceGroups">
            <summary>
            Method to get a list of PriceGroups
            </summary>
            <returns>A list of <see cref="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.PriceGroup">PriceGroup</see></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetDocumentCategories">
            <summary>
            Get Document Categories
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetAllExternalBanks">
            <summary>
            Method to get a list of External Banks
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.GetAllExternalOrgWarehouses">
            <summary>
            Method to get a list of External Warehouses
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.AddExternalOrgWarehouse(System.Int32)">
            <summary>
            Method to add External Warehouse
            </summary>
            <param name="BankID"></param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.UpdateExternalOrgWarehouse(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse)">
            <summary>
            Method to update External Warehouse
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.DeleteExternalOrgWarehouse(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse)">
            <summary>
            Method to delete External Warehouse
            </summary>
            <param name="obj"></param>
        </member>
        <member name="E:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.Committed">
            <summary>Event indicating that the object has been committed to the server.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.ID">
            <summary>
            Gets external organization ID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.ParentOrganizationID">
            <summary>
            Gets parent external organization ID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.OrganizationName">
            <summary>
            Gets or sets organization name
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.DisabledLogin">
            <summary>
            Gets or sets a flag to disable login
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.OrganizationType">
            <summary>
            Gets or sets <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOriginationOrgType">organization</see> type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.EntityType">
            <summary>
            Gets or sets <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationEntityType">entity</see> type
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.ExternalID">
            <summary>
            Gets or sets externalID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.OrganizationID">
            <summary>
            Gets or sets organizationID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.OwnerName">
            <summary>
            Gets or sets owner name
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CompanyLegalName">
            <summary>
            Gets or sets company legal name
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CompanyDBAName">
            <summary>
            Gets or sets company DBA Name
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.Address">
            <summary>
            Gets or sets address
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.City">
            <summary>
            Gets or sets city
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.State">
            <summary>
            Gets or sets State
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.Zip">
            <summary>
            Gets or sets Zip
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.PhoneNumber">
            <summary>
            Gets or sets phone number
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.FaxNumber">
            <summary>
            Gets or sets fax number
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.Email">
            <summary>
            Gets or sets email
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.Website">
            <summary>
            Gets or sets web site
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.LastLoanSubmitted">
            <summary>
            Gets or sets last loan submitted datetime from the organization
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.EmailForRateSheet">
            <summary>
            Gets or sets Rate sheet email information
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.FaxForRateSheet">
            <summary>
            Gets or sets Rate sheet Fax number
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.EmailForLockInfo">
            <summary>
            Gets or sets Lock email information
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.FaxForLockInfo">
            <summary>
            Gets or sets Lock Fax number
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.InheritProductAndPricing">
            <summary>
            Gets or sets EPPS user name
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.EPPSUserName">
            <summary>
            Gets or sets EPPS user name
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.EPPSCompModel">
            <summary>
            Gets or sets EPPS Comp Model
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.PriceGroup">
            <summary>
            Gets or sets Price Group
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.PMLUserName">
            <summary>
            Gets or sets PML user name
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.PMLPassword">
            <summary>
            Sets PML password
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.PMLCustomerCode">
            <summary>
            Gets or sets PML Customer Code
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CurrentStatus">
            <summary>
            Gets or sets Current Approval Status
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.EPPSRateSheet">
            <summary>
            Gets or sets EPPS raet sheet
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.AddToWatchlist">
            <summary>
            Gets or sets Add to watch list flag
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CurrentStatusDate">
            <summary>
            Gets or sets Current Status Date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.ApprovedDate">
            <summary>
            Gets or sets Approved Date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.ApplicationDate">
            <summary>
            Gets or sets Applicaiton date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CompanyRating">
            <summary>
            Gets or sets company rating information
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.Incorporated">
            <summary>
            Gets or sets flag for incorporated
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.StateIncorp">
            <summary>
            Gets or sets State incorporated information
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.DateOfIncorporation">
            <summary>
            Gets or sets Date of incorporation
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.TypeOfEntity">
            <summary>
            Gets or sets type of entity
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.OtherEntityDescription">
            <summary>
            Gets or sets Other entity description
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.TaxID">
            <summary>
            Gets or sets tax id
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.UseSSNFormat">
            <summary>
            Gets or sets flag to use SSN format
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.NmlsId">
            <summary>
            Gets or sets NmlsID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.FinancialsPeriod">
            <summary>
            Gets or sets Financial Period
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.FinancialsLastUpdate">
            <summary>
            Gets or sets date financials last updated
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CompanyNetWorth">
            <summary>
            Gets or sets company net worth
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.EOExpirationDate">
            <summary>
            Gets or sets EO expiration date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.EOCompany">
            <summary>
            Gets or sets EO Company
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.EOPolicyNumber">
            <summary>
            Gets or sets EO policy number
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.MERSOriginatingORGID">
            <summary>
            Gets or sets Mers Originating organization ID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.DUSponsored">
            <summary>
            Gets or sets DU sponsored flag
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CanFundInOwnName">
            <summary>
            Gets or sets Can fund in own name flag
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.IsTestAccount">
            <summary>
            Gets or sets Is Test Account flag
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CanCloseInOwnName">
            <summary>
            Gets or sets Can close in own name flag
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.Licensing">
            <summary>
            Gets or sets <see cref="T:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing">Licensing</see> information
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.LoanTypes">
            <summary>
            Gets or sets loan types
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CommitmentUseBestEffort">
            <summary>
            Gets or sets whether to use Best Efforts for Commitment Authority - can only be set at Company Level
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CommitmentUseBestEffortLimited">
            <summary>
            Gets or sets whether Best Efforts is Limited - can only be set at Company Level
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.MaxCommitmentAuthority">
            <summary>
            Gets or sets the Best Efforts Maximum Commitment Authority - can only be set at Company Level
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CommitmentBestEffortsAvailableAmount">
            <summary>
            Gets the Best Efforts Maximum Available Amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CommitmentMandatory">
            <summary>
            Gets or sets whether Commitment Authority is Mandatory - can only be set at Company Level
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.MaxCommitmentAmount">
            <summary>
            Gets or sets Max Commitment Amount for Mandatory - can only be set at Company Level
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.IsCommitmentDeliveryIndividual">
            <summary>
            Gets or sets whether Individual is an Accepted Delivery Type - can only be set at Company Level
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.IsCommitmentDeliveryBulk">
            <summary>
            Gets or sets whether Bulk is an Accepted Delivery Type - can only be set at Company Level
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.IsCommitmentDeliveryAOT">
            <summary>
            Gets or sets whether AOT is an Accepted Delivery Type - can only be set at Company Level
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.IsCommitmentDeliveryLiveTrade">
            <summary>
            Gets or sets whether Direct Trade is an Accepted Delivery Type - can only be set at Company Level
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.IsCommitmentDeliveryForward">
            <summary>
            Gets or sets whether Forward is an Accepted Delivery Type - can only be set at Company Level
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CommitmentMandatoryAvailableAmount">
            <summary>
            Gets the Mandatory Available Amount
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CommitmentPolicy">
            <summary>
            Gets or sets Commitment Policy for loans that exceed Max Commitment Authority - can only be set at Company Level
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CorrespondentTradePolicy">
            <summary>
            Gets or sets Trade Creation Policy for Correspondent Trades
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CommitmentMessage">
            <summary>
            Gets or sets the warning message for restricted loans - can only be set at Company Level
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.Company">
            <summary>
            Gets external company object this organizaiton belongs to
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.Branch">
            <summary>
            Gets Branch organization object this organization belongs to
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.CustomFields">
            <summary>
            Gets custom fields for the External Organization
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.PrimarySalesRep">
            <summary>
            Gets primary sales rep of the organization
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.AvailableAEs">
            <summary>
            Gets a list of available sales reps
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.PrimaryManager">
            <summary>
            Gets or sets primary manager of the organization
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization.PrimaryManagerExternalUserID">
            <summary>
            Gets external userid of primary manager of the organization
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.ExternalUserRoles">
            <summary>
            Defines possible roles an external user can represent
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.ExternalUserRoles.None">
            <summary>Indicates the user has no role</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.ExternalUserRoles.LoanOfficer">
            <summary>Indicates the user is assigned with loan officer role</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.ExternalUserRoles.LoanProcessor">
            <summary>Indicates the user is assigned with loan processor role</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.ExternalUserRoles.Manager">
            <summary>Indicates the user is assigned with manager role</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.ExternalUserRoles.Administrator">
            <summary>Indicates the user is assigned with administrator role</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.ExternalUserSetting">
            <summary>
            Defines possible external user settings
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.ExternalUserSetting.UpdatingUser">
            <summary>
            Updating User object
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.ExternalUserSetting.AccessibleUserList">
            <summary>
            Accessible user list
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.ExternalUserSetting.License">
            <summary>
            license
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.ExternalUserSetting.AssignedUrls">
            <summary>
            assigned urls
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.ExternalUserSetting.ContactStatus">
            <summary>
            Contact status
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.ExternalUserSetting.SalesRep">
            <summary>
            Sales Rep
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.ExternalUser">
            <summary>
            Represents a single External Organization user.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.IExternalUser">
            <summary>
            Interface for IExternalUser class to support External User Management
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.IExternalUser.UpdatingExternalUser">
            <summary>
            Set teh updatedBy information to an external userID
            </summary>
            <param name="contactID"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.GetAccessibleUsersBySite(System.Int32)">
            <summary>
            Return the accessbile user list based on a particular urlID
            </summary>
            <param name="urlID"></param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.GetAccessibleUsersBySite(System.String)">
            <summary>
            Return the accessbile user list based on a particular siteID
            </summary>
            <param name="siteID"></param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.BatchLoadSettings(System.Collections.Generic.List{EllieMae.Encompass.BusinessObjects.Users.ExternalUserSetting})">
            <summary>
            Batch Load Settings
            </summary>
            <param name="settings">List of different areas to preload data</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.AddStateLicenseExtType(System.Collections.Generic.List{EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType})">
            <summary>
            Set state licenses to the user account.
            </summary>
            <param name="newStateLicenses">The list of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.StateLicenseExtType"/> which the user
            should has.</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.Commit">
            <summary>
            Commits the changes to the current externaluser.
            </summary>
            <example>
  The following code retrieves a user from the Encompass Server, modifies
  its name and email address and saves it back to the external user.
  <code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external user from external user id
      ExternalUser externalUser = session.Users.GetExternalUserByExternalID("sampleExternalUesrId");

      //update user's first and last name
      externalUser.FirstName = "NewFirstName";
      externalUser.LastName = "NewLastName";

      //save changes to external users
      externalUser.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.Delete">
            <summary>
            Deletes the current user.
            </summary>
            <remarks>This method can only be invoked by an Administrator.</remarks>
            <example>
  The following code deletes a external LO user account if there are no loans
  currently assigned to that user account.
  <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;
using EllieMae.Encompass.Query;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external user from external user id
      ExternalUser externalUser = session.Users.GetExternalUserByExternalID("sampleExternalUesrId");

      if (externalUser.IsLoanOfficer)
      {
          // Create the query criterion that specifies an exact match based on the TPO LO's ID
          StringFieldCriterion lpCri = new StringFieldCriterion();
          lpCri.FieldName = "TPO.X62";
          lpCri.Value = externalUser.ContactID;

          // Run the query to get the list of matching loans
          LoanIdentityList assignedLoans = session.Loans.Query(lpCri);

          if (assignedLoans.Count == 0)
              externalUser.Delete();
      }
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.ResetPassword">
            <summary>
            Reset password of the user account with a randomly generated password.  
            </summary>
            <returns>New temporary password</returns>
            <example>
  The following code retrieves an external user from the Encompass Server and reset its credential to a random password.
  <code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external user from external user id
      ExternalUser externalUser = session.Users.GetExternalUserByExternalID("sampleExternalUesrId");

      //update user's first and last name
      string newRandomPassword = externalUser.ResetPassword();

      Console.WriteLine("New User Password:" + newRandomPassword);


      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.SetPassword(System.String)">
            <summary>
            Set password of the user account
            </summary>
            <param name="newPassword"></param>
            <returns></returns>
            <example>
  The following code retrieves an external user from the Encompass Server and update login credential with a given password.
  <code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external user from external user id
      ExternalUser externalUser = session.Users.GetExternalUserByExternalID("sampleExternalUesrId");

      //update user's first and last name
      bool result = externalUser.SetPassword("New Password");

      if(result)
        Console.WriteLine("Password has been updated.");
      else
        Console.WriteLine("Failed to update password.");


      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.Enable">
            <summary>
            Enable TPO web center login
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.Disable">
            <summary>
            Disable TPO web center login
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.AddRole(EllieMae.Encompass.BusinessObjects.Users.ExternalUserRoles)">
            <summary>
            Assign <see cref="T:EllieMae.Encompass.BusinessObjects.Users.ExternalUserRoles"/> to the user account
            </summary>
            <param name="role">The role to assign.</param>
            <example>
  The following code retrieves an external user from the Encompass Server and assign loan officer role.
  <code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external user from external user id
      ExternalUser externalUser = session.Users.GetExternalUserByExternalID("sampleExternalUesrId");

      //assign loan officer role
      if(!externalUser.IsLoanOfficer)
        externalUser.AddRole(ExternalUserRoles.LoanOfficer);


      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.RemoveRole(EllieMae.Encompass.BusinessObjects.Users.ExternalUserRoles)">
            <summary>
            Remove <see cref="T:EllieMae.Encompass.BusinessObjects.Users.ExternalUserRoles"/> from the user account
            </summary>
            <param name="role">The role to remove.</param>
            <example>
  The following code retrieves an external user from the Encompass Server and remove loan officer role.
  <code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external user from external user id
      ExternalUser externalUser = session.Users.GetExternalUserByExternalID("sampleExternalUesrId");

      //remove loan officer role
      if(externalUser.IsLoanOfficer)
        externalUser.RemoveRole(ExternalUserRoles.LoanOfficer);


      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.AddPersona(EllieMae.Encompass.BusinessObjects.Users.Persona)">
            <summary>
            Adds <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/> to External User
            </summary>
            <param name="persona">The role to add.</param>
            <!-- No matching elements were found for the following include tag --><include file="ExternalUser.xml" path="Examples/Example[@name=&quot;ExternalUser.AddPersona&quot;]/*"/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.RemovePersona(EllieMae.Encompass.BusinessObjects.Users.Persona)">
            <summary>
            Remove <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/> to External User
            </summary>
            <param name="persona">The persona to remove.</param>
            <!-- No matching elements were found for the following include tag --><include file="ExternalUser.xml" path="Examples/Example[@name=&quot;ExternalUser.RemovePersona&quot;]/*"/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.AddUrl(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl)">
            <summary>
            Assign <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl"/> to user account
            </summary>
            <param name="url">The url to assign to the account.</param>
            <example>
  The following code retrieves an external user from the Encompass Server and assign all available urls to this account.
  <code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external user from external user id
      ExternalUser externalUser = session.Users.GetExternalUserByExternalID("sampleExternalUesrId");

      //Get a list of url curently assigned to the company.
      ExternalUrlList urlList = externalUser.Company.GetUrlList();

      //Assign all possible url to the user
      foreach (ExternalUrl extUrl in urlList)
      {
           if (externalUser.AssignedUrls.Contains(extUrl))
              externalUser.AddUrl(extUrl);
      }


      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.RemoveUrl(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl)">
            <summary>
            Remove <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl"/> from user account
            </summary>
            <param name="url">The url to remove.</param>
            <example>
  The following code retrieves an external user from the Encompass Server and remove the first url starts with https.
  <code>
<![CDATA[
using System;
using System.IO;

using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      //Get external user from external user id
      ExternalUser externalUser = session.Users.GetExternalUserByExternalID("sampleExternalUesrId");

      //Assign all possible url to the user
      foreach (ExternalUrl extUrl in externalUser.AssignedUrls)
      {
          if (extUrl.URL.StartsWith("https:"))
          {
              externalUser.RemoveUrl(extUrl);
              break;
          }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.UpdateUrls(EllieMae.Encompass.Collections.ExternalUrlList)">
            <summary>
            Assign a set of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl">ExternalUrl</see> to user
            </summary>
            <param name="newUrlList">The list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl">ExternalUrl</see></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.GetContactStatus">
            <summary>
            Method to get contact status list
            </summary>
            <returns>The list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.CurrentContactStatus">CurrentContactStatus</see></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.GetAllExternalPersonas">
            <summary>
            Method to get all eligible personas for this user
            </summary>
            <returns>The list of <see cref="T:EllieMae.Encompass.Collections.PersonaList">Personas</see></returns>
        </member>
        <member name="E:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.Committed">
            <summary>Event indicating that the object has been committed to the server.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.ID">
            <summary>
            Gets the external user's ID
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.FirstName">
            <summary>
            Gets or sets the user's first name.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.MiddleName">
            <summary>
            Gets or sets the user's middle name
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.LastName">
            <summary>
            Gets or sets the user's last name
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.Suffix">
            <summary>
            Gets or sets the user's suffix
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.Title">
            <summary>
            Gets or sets user's Title
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.Address">
            <summary>
            Gets or sets user's address
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.City">
            <summary>
            Gets or sets user's city
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.State">
            <summary>
            Gets or sets user's state
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.Zipcode">
            <summary>
            Gets or sets user's zipcode
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.Phone">
            <summary>
            Gets or sets user's phone
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.CellPhone">
            <summary>
            Gets or sets user's cellphone
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.Fax">
            <summary>
            Gets or sets user's fax
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.SSN">
            <summary>
            Gets or sets user's ssn
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.Email">
            <summary>
            Gets or sets user's email
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.EmailForRateSheet">
            <summary>
            Gets or sets user's rate sheet email
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.FaxForRateSheet">
            <summary>
            Gets or sets user's Rate sheet fax number
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.EmailForLockInfo">
            <summary>
            Gets or sets user's lock info email
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.FaxForLockInfo">
            <summary>
            Gets or sets user's lock info fax number
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.EmailForLogin">
            <summary>
            Gets or sets user's TPO Webcenter login email
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.Notes">
            <summary>
            Gets or sets user's notes
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.OnWatchlist">
            <summary>
            Gets or sets user's add to watchlist setting
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.ApprovalDate">
            <summary>
            Gets or sets user's approval date field
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.ApprovalCurrentStatusDate">
            <summary>
            Gets or sets the approval status date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.ApprovalCurrentStatus">
            <summary>
            Gets or sets the approval status
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.SalesRep">
            <summary>
            Gets or sets user's sales rep
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.AccessibleUserList">
            <summary>
            Get accessible external user list.  These external users object does not contain detail organization information.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.LoginAttempts">
            <summary>
            Gets or sets the user's failed login attempts
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.LastLogin">
            <summary>
            Gets or sets user's last login information on TPO Webcenter
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.ExternalOrganizationId">
            <summary>
            Gets user's external organization id
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.Enabled">
            <summary>
            Check if the user if enabled to login TPO webcenter
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.PasswordChangedDate">
            <summary>
            Gets the last password change date
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.RequirePasswordChange">
            <summary>
            Gets the indicator for password change requirement
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.ParentOrganization">
            <summary>
            Gets the external organization the user belongs to
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.Company">
            <summary>
            Gets the external company the user belongs to
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.Branch">
            <summary>
            Gets the external branch the user belongs to
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.IsLoanOfficer">
            <summary>
            A flag indicating if the user is a loan officer
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.IsLoanProcessor">
            <summary>
            A flag indicating if the user is a loan processor
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.IsManager">
            <summary>
            A flag indicating if the user is a manager
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.IsAdministrator">
            <summary>
            A flag indicating if the user is administrator
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.UseCompanyAddress">
            <summary>
            Gets or sets the flag for using company address
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.Licensing">
            <summary>
            Returns the licensing information of the user
            </summary>
            <return>Returns a <see cref="T:EllieMae.Encompass.BusinessObjects.Users.ExternalLicensing"/> containing the licensing information of the user
            </return>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.ContactID">
            <summary>
            Gets contactid of the user
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.NmlsId">
            <summary>
            Gets and sets NmlsId of the user
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.UpdatedBy">
            <summary>
            Gets the userId of the user account last updating the user account.  It could be external user ID or Encompass user ID.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.UpdatedByFirstName">
            <summary>
            Gets the first name of the user account last updating the user account.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.UpdatedByMiddleName">
            <summary>
            Gets the middle name of the user account last updating the user account.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.UpdatedByLastName">
            <summary>
            Gets the last name of the user account last updating the user account.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.UpdatedByEmail">
            <summary>
            Gets the email of the user account last updating the user account.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.UpdatedDateTime">
            <summary>
            Gets last updated date and time of the user account.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.AssignedUrls">
            <summary>
            Returns the set of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl">ExternalUrl</see> to which the user belongs
            </summary>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.ExternalUrlList"/> containing the set of external urls to which
            the user assigned to.
            </returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.ExternalUser.UpdatingExternalUser">
            <summary>
            Sets external user account which updates this user account
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.ApplicationLog">
            <summary>
            Provides access to the Application log file
            </summary>
            <remarks>The ApplicationLog stores debug information written by the Encompass runtime components.
            Using the proeprties and methods provided by this class, you can add values to this log so they
            are combined with the existing logging.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.Client.ApplicationLog.Initialize">
            <summary>
            Initializes the application log file
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Client.ApplicationLog.Write(System.String,System.String)">
            <summary>
            Writes a message into the application log
            </summary>
            <param name="source">The source of the message, e.g. the class name of the writer</param>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:EllieMae.Encompass.Client.ApplicationLog.WriteError(System.String,System.String)">
            <summary>
            Writes an error message into the application log
            </summary>
            <param name="source">The source of the message, e.g. the class name of the writer</param>
            <param name="message">The message to be written.</param>
        </member>
        <member name="M:EllieMae.Encompass.Client.ApplicationLog.WriteDebug(System.String,System.String)">
            <summary>
            Writes a message into the application log, but only if the DebugEnabled property is <c>true</c>.
            </summary>
            <param name="source">The source of the message, e.g. the class name of the writer</param>
            <param name="message">The message to be written.</param>
        </member>
        <member name="P:EllieMae.Encompass.Client.ApplicationLog.Path">
            <summary>
            Gets the path of the Session.log file for the application
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.ApplicationLog.DebugEnabled">
            <summary>
            Determines if the application is in verbose/debug mode
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ListBase">
            <summary>
            Provides a base class for all of the strongly-typed lists in the 
            EllieMae.Encompass.Collections namespace.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ListBase.Sort(System.Collections.IComparer)">
            <summary>
            Sorts the objects in the list.
            </summary>
            <param name="comparer">An IComparer implementation for performing the sort.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalBanksList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalBanksList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalBanksList.Add(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalBanks)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalBanksList.Contains(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalBanks)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalBanksList.Remove(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalBanks)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalBanksList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.ExternalBanksList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IExternalDocumentList">
            <summary>
            Interface for AttachmentList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalDocumentList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalDocumentList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalDocumentList.Add(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalDocumentList.Contains(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalDocumentList.IndexOf(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalDocumentList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalDocumentList.Remove(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalDocumentList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.ExternalDocumentList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.DocumentTemplateList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate">DocumentTemplate</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IDocumentTemplateList">
            <summary>
            Interface for DocumentTemplateList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.DocumentTemplateList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.DocumentTemplateList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.DocumentTemplateList.Add(EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.DocumentTemplateList.Contains(EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.DocumentTemplateList.IndexOf(EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.DocumentTemplateList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.DocumentTemplateList.Remove(EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.DocumentTemplateList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.DocumentTemplateList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalDBAList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalDBAList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalDBAList.Add(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDBAName)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalDBAList.Contains(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDBAName)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalDBAList.Remove(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDBAName)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalDBAList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.ExternalDBAList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalFeesList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalFeesList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalFeesList.Add(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalFeesList.Contains(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalFeesList.Remove(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalFees)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalFeesList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.ExternalFeesList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalLoanCompHistoryList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalLoanCompHistoryList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalLoanCompHistoryList.Add(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalLoanCompHistoryList.Contains(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalLoanCompHistoryList.Remove(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompHistory)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalLoanCompHistoryList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.ExternalLoanCompHistoryList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalLoanCompPlanList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalLoanCompPlanList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalLoanCompPlanList.Add(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalLoanCompPlanList.Contains(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalLoanCompPlanList.Remove(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalLoanCompPlan)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalLoanCompPlanList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.ExternalLoanCompPlanList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalNotesList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalNotesList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalNotesList.Add(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalNote)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalNotesList.Contains(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalNote)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalNotesList.Remove(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalNote)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalNotesList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.ExternalNotesList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IExternalOrganizationList">
            <summary>
            Interface for OrganizationList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalOrganizationList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalOrganizationList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalOrganizationList.Add(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalOrganizationList.Contains(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalOrganizationList.IndexOf(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalOrganizationList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalOrganizationList.Remove(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalOrganizationList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.ExternalOrganizationList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalUrlList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalUrlList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalUrlList.Add(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalUrlList.Contains(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalUrlList.Remove(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalUrl)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalUrlList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.ExternalUrlList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ExternalUserList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.ExternalUser">ExternalUser</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IExternalUserList">
            <summary>
            Interface for ExternalUserList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalUserList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalUserList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalUserList.Add(EllieMae.Encompass.BusinessObjects.Users.ExternalUser)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalUserList.Contains(EllieMae.Encompass.BusinessObjects.Users.ExternalUser)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalUserList.IndexOf(EllieMae.Encompass.BusinessObjects.Users.ExternalUser)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalUserList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Users.ExternalUser)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalUserList.Remove(EllieMae.Encompass.BusinessObjects.Users.ExternalUser)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalUserList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.ExternalUserList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalWarehouseList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalWarehouseList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalWarehouseList.Add(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalWarehouseList.Contains(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalWarehouseList.Remove(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalWarehouse)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ExternalWarehouseList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.ExternalWarehouseList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.FundingFeeList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FundingFee">FundingFee</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IFundingFeeList">
            <summary>
            Interface for FundingFeeList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.FundingFeeList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.FundingFeeList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.FundingFeeList.Contains(EllieMae.Encompass.BusinessObjects.Loans.FundingFee)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.FundingFeeList.IndexOf(EllieMae.Encompass.BusinessObjects.Loans.FundingFee)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.FundingFeeList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.FundingFeeList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.LoanLockList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanLock">LoanLock</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ILoanLockList">
            <summary>
            Interface for LoanLockList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanLockList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanLockList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanLockList.Add(EllieMae.Encompass.BusinessObjects.Loans.LoanLock)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanLockList.Contains(EllieMae.Encompass.BusinessObjects.Loans.LoanLock)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanLockList.IndexOf(EllieMae.Encompass.BusinessObjects.Loans.LoanLock)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanLockList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Loans.LoanLock)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanLockList.Remove(EllieMae.Encompass.BusinessObjects.Loans.LoanLock)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanLockList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.LoanLockList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ReportingFieldDescriptorList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.Reporting.ReportingFieldDescriptor"/>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IReportingFieldDescriptorList">
            <summary>
            Interface for ReportingFieldDescriptorList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ReportingFieldDescriptorList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ReportingFieldDescriptorList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ReportingFieldDescriptorList.Add(EllieMae.Encompass.Reporting.ReportingFieldDescriptor)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ReportingFieldDescriptorList.Contains(EllieMae.Encompass.Reporting.ReportingFieldDescriptor)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ReportingFieldDescriptorList.IndexOf(EllieMae.Encompass.Reporting.ReportingFieldDescriptor)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ReportingFieldDescriptorList.Insert(System.Int32,EllieMae.Encompass.Reporting.ReportingFieldDescriptor)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ReportingFieldDescriptorList.Remove(EllieMae.Encompass.Reporting.ReportingFieldDescriptor)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ReportingFieldDescriptorList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.ReportingFieldDescriptorList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.TaskTemplateList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate">TaskTemplate</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ITaskTemplateList">
            <summary>
            Interface for TaskTemplateList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.TaskTemplateList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.TaskTemplateList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.TaskTemplateList.Add(EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.TaskTemplateList.Contains(EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.TaskTemplateList.IndexOf(EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.TaskTemplateList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.TaskTemplateList.Remove(EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.TaskTemplateList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.TaskTemplateList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.TemplateEntryList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry">TemplateEntry</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ITemplateEntryList">
            <summary>
            Interface for TemplateEntryList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.TemplateEntryList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.TemplateEntryList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.TemplateEntryList.Add(EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.TemplateEntryList.Contains(EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.TemplateEntryList.IndexOf(EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.TemplateEntryList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.TemplateEntryList.Remove(EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.TemplateEntryList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.TemplateEntryList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.BusinessCalendarType">
            <summary>
            Provides a list of the different business calendars provided by Encompass.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.Configuration.BusinessCalendarType.None">
            <summary>No calendar type specified</summary>
        </member>
        <member name="F:EllieMae.Encompass.Configuration.BusinessCalendarType.Postal">
            <summary>Represents the business calendar of the US Postal Service</summary>
        </member>
        <member name="F:EllieMae.Encompass.Configuration.BusinessCalendarType.Company">
            <summary>Represents your company's business calendar</summary>
        </member>
        <member name="F:EllieMae.Encompass.Configuration.BusinessCalendarType.RegZ">
            <summary>Represents the Reg-Z business calendar</summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.BusinessCalendarDayType">
            <summary>
            Enumerates the different types of days in a Business Calendar
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.Configuration.BusinessCalendarDayType.None">
            <summary>No day type specified</summary>
        </member>
        <member name="F:EllieMae.Encompass.Configuration.BusinessCalendarDayType.BusinessDay">
            <summary>The day represents a day the business is open</summary>
        </member>
        <member name="F:EllieMae.Encompass.Configuration.BusinessCalendarDayType.Weekend">
            <summary>The day represents a recurring weekend non-work day</summary>
        </member>
        <member name="F:EllieMae.Encompass.Configuration.BusinessCalendarDayType.Holiday">
            <summary>No day represents a non-recurring non-work day</summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.DaysOfWeek">
            <summary>
            Rerpesents one or more days of the week.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.BusinessCalendar">
            <summary>
            Represents a calendar with defined business and non-business days.
            </summary>
            <remarks>The dates in the Encompass calendars range from Jan 1, 2000 to Dec 31, 2029. Any
            date outside that range will cause an exception to be raised from the calendar.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.IBusinessCalendar">
            <summary>
            Represents the interface for the DataObject object.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.BusinessCalendar.IsWeekendDay(System.DateTime)">
            <summary>
            Indicates if a specific date falls on a weekend (as defined by the calendar).
            </summary>
            <param name="date">The date to test.</param>
            <returns>Return <c>true</c> if the date falls on a day marked as a weekend day, 
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.BusinessCalendar.IsBusinessDay(System.DateTime)">
            <summary>
            Indicates if a specific date is a business day.
            </summary>
            <param name="date">The date to test.</param>
            <returns>Return <c>true</c> if the date is a business day, 
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.BusinessCalendar.GetDayType(System.DateTime)">
            <summary>
            Gets the type of day for a specific date.
            </summary>
            <param name="date">The date to test.</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.Configuration.BusinessCalendarDayType"/> of the specified date based
            on the definition of the calendar.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.BusinessCalendar.AddBusinessDays(System.DateTime,System.Int32,System.Boolean)">
            <summary>
            Adds a specified number of business days to the specified date.
            </summary>
            <param name="date">The starting date of the operation.</param>
            <param name="count">The number of business days to add.</param>
            <param name="startFromClosestBusinessDay">A flag to indicate if the date should be advanced to the
            next closest business day prior to adding the number of days specified by the count.</param>
            <returns>Returns the date of the business day as computed from the calendar.</returns>
            <remarks>If the <c>date</c> parameter is a non-business day and 
            <c>startFromClosestBusinessDay</c> is <c>true</c>, the computation will first advanced to
            the next closest business day and then add <c>count</c> additional business days. If
            the <c>startFromClosestBusinessDay</c> parameter is <c>false</c>, then the next closest
            business day will count as the first day in the computation. If the <c>date</c> parameter is
            a business day, then the <c>startFromClosestBusinessDay</c> value will have no effect on
            the computation.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.BusinessCalendar.GetNextClosestBusinessDay(System.DateTime)">
            <summary>
            Returns the next closest business day to the specified date.
            </summary>
            <param name="date">The date from which to start.</param>
            <returns>The first business day on or after the specified <c>date</c>.</returns>
            <remarks>If the date specified by the <c>date</c> parameter is a business day,
            then that date will be returned. Otherwise, the calendar will advance from the specified
            date until a business day is found and return that date.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.BusinessCalendar.CalendarType">
            <summary>
            Gets the type of calendar represented by the current object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.BusinessCalendar.WorkDays">
            <summary>
            Gets the workdays (i.e. non-weekend days) for the calendar
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplateType">
            <summary>
            Identifies the type of document represented by a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/>.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplateType.None">
            <summary>No document type specified</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplateType.StandardForm">
            <summary>Document represetns a standard print form</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplateType.CustomForm">
            <summary>Document represents a custom print form</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplateType.Needed">
            <summary>Document is one that must be provided by the borrower</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplateType.Other">
            <summary>The document does not fall into any of the other categories</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate">
            <summary>
            Represents a configured document template which can be used to create a 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.IDocumentTemplate">
            <summary>
            Represents the interface for the DocumentTemplate object.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate.Equals(System.Object)">
            <summary>
            Provides an equality comparer for two templates.
            </summary>
            <returns>Returns <c>true</c> if the IDs of the two templates are the same, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate.GetHashCode">
            <summary>
            Provides a hash code for the object based on the ID.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate.ID">
            <summary>
            Returns the unique identifier for the document template.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate.Title">
            <summary>
            Gets the title of the document.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate.IncludeInEDisclosurePackage">
            <summary>
            Indicates if the document is to be included in the eDisclosure package.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate.IncludeInClosingPackage">
            <summary>
            Indicates if the document is to be included in the closing package.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate.DaysToReceive">
            <summary>
            Gets the number of days from the date ordered until the document should be received.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate.DaysToExpire">
            <summary>
            Gets the number of days from the receipt date until the document expires.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate.Source">
            <summary>
            Gets the source of the document template if the document comes from a standard form.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate.Type">
            <summary>
            Gets the type of document represented by the template.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplates">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> objects defined in the system settings.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.IDocumentTemplates">
            <summary>
            Represents the interface for the DocumentTemplates object.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplates.GetTemplateByID(System.String)">
            <summary>
            Retrieves a template from the collection using its unique ID.
            </summary>
            <param name="templateId">The ID of the template to be retrieved.</param>
            <returns>Returns the requested <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> or, if no template matches
            the specified ID, returns <c>null</c>.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplates.GetTemplateByTitle(System.String)">
            <summary>
            Retrieves a template from the collection by title.
            </summary>
            <param name="docTitle">The title of the template to be retrieved.</param>
            <returns>Returns the requested <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> or, if no template matches
            the specified title, returns <c>null</c>. The compaison for the purposes of string matching
            is case insensitive.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplates.Refresh">
            <summary>
            Refreshes the Document Template list from the server.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplates.GetEnumerator">
            <summary>
            Provides an enumerator for the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplates.Count">
            <summary>
            Gets the number of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> objects in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplates.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> at a specified index in the collection.
            </summary>
            <param name="index">The index of the requested template.</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> at the specified index.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.CompensationSettings.#ctor(EllieMae.Encompass.Client.Session)">
            <summary>
            Provides access to the Loan Officer compensation-related settings.
            </summary>
            <param name="session"></param>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.CompensationSettings.GetCompensationForUser(System.String,System.DateTime)">
            <summary>
            Returns the Compensation Plan for the given user ID and trigger date.
            Returns NULL if no plan exists for the given user ID and trigger date.
            </summary>
            <param name="userId">The Encompass user's ID.</param>
            <param name="triggerDate">The trigger date for the compensation plan.</param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.CompensationSettings.GetCompensationByTPOID(System.String,System.DateTime)">
            <summary>
            Returns the Compensation Plan for the given TPO WebCenter ID and trigger date.
            Returns NULL if no plan exists for the given TPO WebCenter ID and trigger date.
            </summary>
            <param name="tpoWebID">The TPO Web ID.</param>
            <param name="triggerDate">The trigger date for the comp plan.</param>
            <returns></returns>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.Schema.OrmSchemaType">
            <summary>
            Indicates an ORM Schema type for the settings
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.Schema.DatabaseSettings">
            <summary>
            Provides schema information about the Encompass loan database
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.Schema.DatabaseSettings.#ctor(EllieMae.Encompass.Client.Session)">
            <summary>
            Constructor for the DatabaseSettings object
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.Schema.DatabaseSettings.GetServerSchemaVersion(EllieMae.Encompass.Configuration.Schema.OrmSchemaType)">
            <summary>
            Gets the version number of the database schema for the specified ORM mapping from the
            Encompass Server.
            </summary>
            <param name="schemaType">The <see cref="T:EllieMae.Encompass.Configuration.Schema.OrmSchemaType"/> for the schema to be retrieved.</param>
            <returns>Returns the version number of the current ORM Schema.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.Schema.DatabaseSettings.GetLocalSchemaVersion(EllieMae.Encompass.Configuration.Schema.OrmSchemaType,System.String)">
            <summary>
            Gets the version number of the database schema for the specified business object from
            a local database.
            </summary>
            <param name="schemaType">The <see cref="T:EllieMae.Encompass.Configuration.Schema.OrmSchemaType"/> for the schema to be retrieved.</param>
            <param name="connectionString">The connection string to access the local database.</param>
            <returns>Returns the version number of the ORM Schema from the local system.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.Schema.DatabaseSettings.GetSchema(EllieMae.Encompass.Configuration.Schema.OrmSchemaType)">
            <summary>
            Retrieves the specified ORM schema from the server.
            </summary>
            <param name="schemaType">The <see cref="T:EllieMae.Encompass.Configuration.Schema.OrmSchemaType"/> of the schema to be retrieved.</param>
            <returns>Returns an <see cref="T:EllieMae.Encompass.Configuration.Schema.OrmSchema"/> for the specified schema type.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.Schema.DatabaseSettings.GetOrmMappingAssembly(EllieMae.Encompass.Configuration.Schema.OrmSchemaType)">
            <summary>
            Retrieves the mapping assembly for the specified schema type.
            </summary>
            <param name="schemaType">The <see cref="T:EllieMae.Encompass.Configuration.Schema.OrmSchemaType"/> for which the mapping assembly will be retrieved.</param>
            <returns>A <see cref="T:EllieMae.Encompass.BusinessObjects.DataObject"/> containing the image of the assembly that contains the
            mapping for populating data using the specified OrmSchema.</returns>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.LoanCompensation">
            <summary>
            Provides detials of the Loan Compensation Plan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LoanCompensation.PlanName">
            <summary>
            Gets the name of the assigned plan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LoanCompensation.BasePlanPercent">
            <summary>
            Gets the compensation percent.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LoanCompensation.BasePlanAmount">
            <summary>
            Gets the compensation amount.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LoanCompensation.MinAmount">
            <summary>
            Gets the minimum compensation.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LoanCompensation.MaxAmount">
            <summary>
            Gets the maximum compensation.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LoanCompensation.PercentAmountBase">
            <summary>
            Gets the loan amount type for compensation (0: blank, 1: total loan amount, 2: base loan amount).
            If field value = 2, we will use base loan amount. Otherwiae, we will use total loan amount.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LoanCompensation.RoundingMethod">
            <summary>
            Gets the rounding type for compensation (0: blank, 1: To Nearest Cent, 2: To Nearest Dollar).
            If field value = 2, we will round value to integer. Otherwiae, we will round it to 2 decimals.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.Schema.OrmSchema">
            <summary>
            Provides a class that represents the schema for an Object-Relational Mapping
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.Schema.OrmSchema.Publish(System.String,System.Int32)">
            <summary>
            Publishes the database schema to the database at the specified connection string.
            </summary>
            <param name="connectionString">The connection string for the database to which the schema
            should be applied.</param>
            <param name="optionalCommandTimeout">Optional SQL CommandTimeout</param>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.Schema.OrmSchema.ToString">
            <summary>
            Returns a script version of the schema.
            </summary>
            <returns>Returns a SQL script that will apply the schema to a database.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.Schema.OrmSchema.Version">
            <summary>
            Gets the version of the ORM schema
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.Schema.OrmSchema.SchemaType">
            <summary>
            Gets the schema type for the object
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.LockExtensionPriceAdjustment">
            <summary>
            Represents a single price adjustment record in the Lock Extension Price Adjustment settngs table.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LockExtensionPriceAdjustment.DaysToExtend">
            <summary>
            Gets the number of days by which to extend the lock request.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LockExtensionPriceAdjustment.PriceAdjustment">
            <summary>
            Gets the price adjustment applied to the lock request when the extension is made.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.LockExtensionPriceAdjustments">
            <summary>
            Represents the collection of Price Adjustment options in the lock extension settings
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.LockExtensionPriceAdjustments.GetEnumerator">
            <summary>
            Provides an enumeration of the PriceAdjustments in the collection
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LockExtensionPriceAdjustments.Count">
            <summary>
            Gets the number of adjustments in the collection
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LockExtensionPriceAdjustments.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:EllieMae.Encompass.Configuration.LockExtensionPriceAdjustment"/> at the specified index.
            </summary>
            <param name="index">The index of the specified item in the collection</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.Configuration.LockExtensionPriceAdjustment"/> object at the 
            specified index.</returns>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.LockExtensionPricingControlOption">
            <summary>
            Indicates how lock extension price adjustments are controlled
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.LockExpirationCalendarOption">
            <summary>
            Indicates how lock extension price adjustments are controlled
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.LockExtensionSettings">
            <summary>
            Provides access to lock extension-related system settings
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.LockExtensionSettings.IsExtensionPeriodAllowed(System.Int32)">
            <summary>
            Indicates if the specified extension is permitted based on the settings
            </summary>
            <param name="daysToExtend">The number of days the extension is requested for.</param>
            <returns>Returns <c>true</c> if the price adjustment is permitted by the company policy, 
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.LockExtensionSettings.GetPriceAdjustment(System.Int32)">
            <summary>
            Returns the price adjustment based on the specified extension period length.
            </summary>
            <param name="daysToExtend">The number of days to extend the lock request.</param>
            <returns>Returns the price adjustment for the specified number of days. If the
            pricing is user-controlled, this method will return 0. If the number of days specified
            is not permitted by company policy, an exception will occur.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.LockExtensionSettings.GetPriceAdjustment(System.DateTime,System.Int32)">
            <summary>
            Returns the price adjustment based on the specified extension period length and starting
            expiration date.
            </summary>
            <param name="priorExpirationDate">The prior expiration date of the rate lock.</param>
            <param name="daysToExtend">The number of days to extend the lock request.</param>
            <returns>Returns the price adjustment for a lock extension of the specified number of days
            starting on the date specified as the prior expiration date. If the
            pricing is user-controlled, this method will return 0. If the number of days specified
            is not permitted by company policy, an exception will occur.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.LockExtensionSettings.GetExtensionExpirationDate(System.DateTime,System.Int32)">
            <summary>
            Returns the adjusted expiration date of a lock request when an extension is requested
            for a specified number of days.
            </summary>
            <param name="priorExpirationDate">The prior expiration date of the lock request.</param>
            <param name="daysToExtend">The number of days to extend the lock request.</param>
            <returns>Returns the new expiration date for the lock extension, based on the
            calendar rules specified in the Encompass Settings.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.LockExtensionSettings.Refresh">
            <summary>
            Refreshes the object with the latest data from the Encompass Server.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LockExtensionSettings.AllowExtensions">
            <summary>
            Indicates if lock extensions are permitted by the Encompass system
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LockExtensionSettings.PricingControlOption">
            <summary>
            Gets the pricing control option for lock extensions
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LockExtensionSettings.AreFixedPriceAdjustmentsSupported">
            <summary>
            Gets a flag indicating if pricing for pre-defined extension period lengths is supported.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LockExtensionSettings.AllowDailyAdjustment">
            <summary>
            Indicates if extra days for an extension use a daily adjustment rate
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LockExtensionSettings.DailyAdjustment">
            <summary>
            Gets the daily price adjustment amount for an extension
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LockExtensionSettings.ApplyAdjustmentOnOffDays">
            <summary>
            Indicates if the adjustment applies to weekends and holidays as well as work days
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LockExtensionSettings.ApplyLockExpirationCalendarToExtensions">
            <summary>
            Indicates if the lock expiration calendar setting is applied to lock extensions
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LockExtensionSettings.LockExpirationCalendar">
            <summary>
            Indicates if the lock expiration calendar setting is applied to lock extensions
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.LockExtensionSettings.PriceAdjustments">
            <summary>
            Gets the collection of price adjustments as determined by the settings
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.Packages.XferPackageImportConflictOption">
            <summary>
            Indicates the default action when a conflict is found during a package import.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.Configuration.Packages.XferPackageImportConflictOption.None">
            <summary>No option specified.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Configuration.Packages.XferPackageImportConflictOption.Overwrite">
            <summary>Existing items will be overwritten with content from the package.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Configuration.Packages.XferPackageImportConflictOption.Skip">
            <summary>Items in he package will be skipped if a matching item already exists.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Configuration.Packages.XferPackageImportConflictOption.Abort">
            <summary>The import process should abort if a duplicate occurs.</summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.Packages.XferPackageImportConflictResolver">
            <summary>
            A delegate used to allow a custom implementation of how conflicts are handled during the import process.
            </summary>
            <param name="objectType">The type of object for which the conflict occurred.</param>
            <param name="objectName">The name of the object in conflict.</param>
            <returns>The method's return value will indicate how the import resolves the conflict. A value
            of <see cref="F:EllieMae.Encompass.Configuration.Packages.XferPackageImportConflictOption.Abort"/> will cause the export to end 
            immediately.</returns>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.Packages.XferPackageImporter">
            <summary>
            Provides the methods needed to import a <see cref="T:EllieMae.Encompass.Configuration.Packages.XferPackage"/> into an Encompass system.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.Packages.XferPackageImporter.Import(EllieMae.Encompass.Configuration.Packages.XferPackage,EllieMae.Encompass.Configuration.Packages.XferPackageImportConflictOption)">
            <summary>
            Imports a package into the Encompass system.
            </summary>
            <param name="package">The <see cref="T:EllieMae.Encompass.Configuration.Packages.XferPackage"/> to be imported.</param>
            <param name="conflictOption">Determines how the import process will handle conflicts between
            the package contents and data already on the server.</param>
            <returns>Returns <c>true</c> if the import completed successfully, <c>false</c> if the import
            was aborted.</returns>
            <remarks>A <c>false</c> return value is only possible if <see cref="F:EllieMae.EMLite.Packages.PackageImportConflictOption.Abort"/>
            is specified as the <c>conflictOption</c> parameter.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.Packages.XferPackageImporter.Import(EllieMae.Encompass.Configuration.Packages.XferPackage,EllieMae.Encompass.Configuration.Packages.XferPackageImportConflictResolver)">
            <summary>
            Imports a transfer package into the Encompass system.
            </summary>
            <param name="package">The <see cref="T:EllieMae.Encompass.Configuration.Packages.XferPackage"/> to be imported.</param>
            <param name="conflictResolver">A method which will be invoked whenever a conflict is detected
            between the package contents and data already on the server.</param>
            <returns>Returns <c>true</c> if the import completed successfully, <c>false</c> if the import
            was aborted.</returns>
            <remarks>A <c>false</c> return value is only possible if the <c>conflictResolver</c>
            method returns the <see cref="F:EllieMae.EMLite.Packages.PackageImportConflictOption.Abort"/> value.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.Packages.XferPackageImporter.resolvePackageConflict(EllieMae.EMLite.Packages.ExportPackageObjectType,System.String)">
            <summary>
            Resolves conflicts during the import process.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.Packages.XferPackageObjectType">
            <summary>
            Enumerates the list of object types supported by the XferPackage.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.Configuration.Packages.XferPackageObjectType.None">
            <summary>No object type specified</summary>
        </member>
        <member name="F:EllieMae.Encompass.Configuration.Packages.XferPackageObjectType.InputForm">
            <summary>Custom Input Form</summary>
        </member>
        <member name="F:EllieMae.Encompass.Configuration.Packages.XferPackageObjectType.CodebaseAssembly">
            <summary>Custom Input Form Codebase Assembly</summary>
        </member>
        <member name="F:EllieMae.Encompass.Configuration.Packages.XferPackageObjectType.LoanCustomField">
            <summary>Loan Custom Field</summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.Packages.XferPackage">
            <summary>
            Represents a package of Encompass setting data which can be transferred between Encompass systems.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.Packages.XferPackage.#ctor">
            <summary>
            Constructs a new, empty transfer package.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.Packages.XferPackage.#ctor(System.String)">
            <summary>
            Constructs a transfer package from a file on disk.
            </summary>
            <param name="path">The path of the EMPKG file containing the transfer package.</param>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.Packages.XferPackage.Unwrap">
            <summary>
            Returns the internal ExportPackage object.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.SecondarySettings">
            <summary>
            Provides access to Secondary-related system settings
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.SecondarySettings.LockExtensions">
            <summary>
            Gets the accessor for lock extension-related settings in Encompass
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.SecondarySettings.InvestorTemplates">
            <summary>
            Gets access to all the Investor Templates configured in Encompass settings.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.SecondarySettings.TradePriceAdjustmentTemplates">
            <summary>
            Gets access to all the Trade Price Adjustment Templates configured in Encompass settings.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.SecondarySettings.SRPTableTemplates">
            <summary>
            Gets access to all the SRP Table Templates configured in Encompass settings.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.SystemSettings">
            <summary>
            Provides access to system settings information for Encompass.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.ISystemSettings">
            <summary>
            Represents the interface for the SystemSettings object.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.SystemSettings.GetBusinessCalendar(EllieMae.Encompass.Configuration.BusinessCalendarType)">
            <summary>
            Retrieves one of the configured <see cref="T:EllieMae.Encompass.Configuration.BusinessCalendar"/> settings for the system.
            </summary>
            <param name="calendarType">The type of calendar to be retrieved.</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.Configuration.BusinessCalendar"/> object based on the specified type.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.SystemSettings.GetCompanySetting(System.String)">
            <summary>
            Retrieves the value of one of the Encompass company settings accessible in the AdminTools
            Settings Manager.
            </summary>
            <param name="settingName">The name of the settings, in the form "Category.Name", e.g.
            "Password.MinLength"</param>
            <returns>Returns the value of the setting. This may be a numeric, bool, datetime or string value,
            depending on the setting being retrieved.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Configuration.SystemSettings.CreatePackageImporter">
            <summary>
            Creates a <see cref="T:EllieMae.Encompass.Configuration.Packages.XferPackageImporter"/> tied to the current Session.
            </summary>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Configuration.Packages.XferPackageImporter"/> which can be used to import Transfer
            Packages into the system.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.SystemSettings.Secondary">
            <summary>
            Gets the accessor for secondary-related system settings.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.SystemSettings.CompensationSettings">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.Configuration.SystemSettings.CompensationSettings"/> object, which will provide access to compensation functions.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.SystemSettings.Database">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.Configuration.Schema.DatabaseSettings"/> object, which will provide access to database schema information.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.SystemSettings.TablesFeesSettings">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.Configuration.SystemSettings.TablesFeesSettings"/> object, which will provide access to Tables and Fees information.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.Address">
            <summary>
            Represents an Address.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.IAddress">
            <summary>
            Interface for Address class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Address.Street1">
            <summary>
            Gets or sets the first line of the street portion of the address.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Address.Street2">
            <summary>
            Gets or sets the second line of the street portion of the address.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Address.City">
            <summary>
            Gets or sets the city portion of the address.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Address.State">
            <summary>
            Gets or sets the two characters state code for the address.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Address.Zip">
            <summary>
            Gets or sets the zip/postal code for the address.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.BizCategoryCustomFields">
            <summary>
            Provides access to the business category-specific custom fields for
            a <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.IBizCategoryCustomFields">
            <summary>
            Interface for BizContact class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizCategoryCustomFields.Item(System.String)">
            <summary>
            Gets the custom fields collection for a specific business category.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact">
            <summary>
            Represents a single business contact within the system. A business contact may be
            an appraiser, lender, etc. and can include information on the licenses/fees associated
            with this contact.
            </summary>
            <example>
The following code opens an existing Business Contact, modifies its first
and last name and then commits the changes to the Encompass server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the contact specified on the command line
      Contact contact = session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Update his personal information
      contact.FirstName = "Fred";
      contact.LastName = "Silverman";

      // Until Commit is called, the changes are held locally. Commit persists
      // them back to the Encompass Server.
      contact.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.Contact">
            <summary>
            Provides a base class for both the <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact">BizContact</see> and
            <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact">BorrowerContact</see> classes.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.IContact">
            <summary>
            Interface for Contact class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.Contact.Commit">
            <summary>Saves pending changes to the current contact.</summary>
            <example>
The following code opens an existing Business Contact, modifies its first
and last name and then commits the changes to the Encompass server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the contact specified on the command line
      Contact contact = session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Update his personal information
      contact.FirstName = "Fred";
      contact.LastName = "Silverman";

      // Until Commit is called, the changes are held locally. Commit persists
      // them back to the Encompass Server.
      contact.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.Contact.Delete">
            <summary>Deletes the current contact.</summary>
            <example>
The following code deletes all Appraisers from the contacts database.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the query criterion to get the Appraisers from the server
      NumericFieldCriterion catCri = new NumericFieldCriterion();
      catCri.FieldName = "Contact.CategoryID";
      catCri.Value = session.Contacts.BizCategories.GetItemByName("Appraiser").ID;

      // Retrieve the set of all Business Contacts matching our criteria
      ContactList contacts = session.Contacts.Query(catCri, ContactLoanMatchType.None, ContactType.Biz);

      // Delete all of these contacts
      for (int i = 0; i < contacts.Count; i++)
         contacts[i].Delete();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.Contact.Refresh">
            <summary>Refreshes the contact's information from the server.</summary>
            <example>
The following code demonstrates how using the Refresh method will discard
any pending changes to a Contact that haven't been committed.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the contact specified on the command line
      Contact contact = session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Print the original first name of the contact, e.g. "Mary"
      Console.WriteLine(contact.FirstName);

      // Modify the first name
      contact.FirstName = "Marilyn";

      // The following line will print the new value, "Marilyn"
      Console.WriteLine(contact.FirstName);

      // Refresh the contact to reload the fields from the server
      contact.Refresh();

      // The first name will now be restored to its prior state (unless
      // it was changed by another user since originally retrieved).
      Console.WriteLine(contact.FirstName);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.Contact.GetLoanRelationships">
            <summary>
            Returns a collection of the relationships this contact has with the Loans.
            </summary>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.LoanContactRelationshipList"/> containing an entry
            for each loan relationship this contact is assigned to. If a contact is assigned to multiple
            relationships within the same loan, multiple records will be returned, one for each
            relationship.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.Contact.ToString">
            <summary>
            Provides a string representation of the contact.
            </summary>
            <returns>Returns the first and last name of the contact.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.Contact.GetHashCode">
            <summary>
            Provides a hash code implementation for the Contact object.
            </summary>
            <returns>A hash code usable in a Hashtable object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.Contact.Equals(System.Object)">
            <summary>
            Determines if two contact objects represent the same persistent contact.
            </summary>
            <param name="obj">The contact to which to compare this object.</param>
            <returns>Returns <c>true</c> if the two objects represent the same
            contact, <c>false</c> otherwise.</returns>
        </member>
        <member name="E:EllieMae.Encompass.BusinessObjects.Contacts.Contact.Committed">
            <summary>Event indicating that the object has been committed to the server.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.ID">
            <summary>Gets the unique ID for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.Guid">
            <summary>Gets the Guid for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.LastName">
            <summary>Gets or sets the last name for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.Salutation">
            <summary>Gets or sets the salutation for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.FirstName">
            <summary>Gets or sets the first name for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.FullName">
            <summary>
            Gets the combined first and last name of the contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.JobTitle">
            <summary>Gets or sets the job title for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.WorkPhone">
            <summary>Gets or sets the work phone number for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.HomePhone">
            <summary>Gets or sets the home phone number for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.MobilePhone">
            <summary>Gets or sets the mobile/cell phone for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.FaxNumber">
            <summary>Gets or sets the fax number for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.CustField1">
            <summary>Gets or sets the first custom field for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.CustField2">
            <summary>Gets or sets the second custom field for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.CustField3">
            <summary>Gets or sets the third custom field for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.CustField4">
            <summary>Gets or sets the fourth custom field for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.PersonalEmail">
            <summary>Gets or sets the personal/home email address for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.BizEmail">
            <summary>Gets or sets the business/work email address for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.BizWebUrl">
            <summary>Gets or sets the business web page URL for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.BizAddress">
            <summary>Gets or sets the business/employer address for the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.NoSpam">
            <summary>Gets or sets a flag indicating if the user should receive unsolicited email.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.LastModified">
            <summary>Gets the date and time the contact was last saved.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.Owner">
            <summary>Gets or sets the owner of the contact.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.AccessLevel">
            <summary>Gets or sets the access level for the contact, either Public or Private.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.Type">
            <summary>Gets the type of contact represented by this object.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.IsNew">
            <summary>
            Gets a flag indicating if the current contact has yet to be saved to the server.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.Notes">
            <summary>
            Gets the set of notes associated with the current contact.
            </summary>
            <example>
The following code demonstrates retrieving, updating and adding 
notes for a contact.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new Business Contact in the database
      BizContact contact = (BizContact) session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Print all of the notes for the contact
      for (int i = 0; i < contact.Notes.Count; i++)
      {
         Console.WriteLine("Timestamp: " + contact.Notes[i].Timestamp);
         Console.WriteLine("Subject:   " + contact.Notes[i].Subject);
         Console.WriteLine(contact.Notes[i].Details);
      }

      // Now add a new note. We do not have to call Commit() to save to database --
      // the act of adding it saves it to the server.
      ContactNote newNote = contact.Notes.Add("The subject of the note", "The body of the note");
      Console.WriteLine("New note created with ID " + newNote.ID);
      
      // Modify the note and save it
      newNote.Subject = "The corrected subject of the note";
      newNote.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.Events">
            <summary>
            Gets the set of events associated with the current contact.
            </summary>
            <example>
The following code lists all of the events for a Business Contact whose
unique ID is specified on the command line.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new Business Contact in the database
      BizContact contact = (BizContact) session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Print all of the events for the contact
      for (int i = 0; i < contact.Events.Count; i++)
      {
         Console.WriteLine("Timestamp: " + contact.Events[i].Timestamp);
         Console.WriteLine("Subject:   " + contact.Events[i].EventType);

         // If there's a loan related to this event, output some of its properties
         if (contact.Events[i].RelatedLoan != null)
         {
            ContactLoan loan = contact.Events[i].RelatedLoan;
            Console.WriteLine("Loan Amount:   " + loan.LoanAmount);
            Console.WriteLine("Loan Closed:   " + loan.DateCompleted);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contact.CustomFields">
            <summary>
            Gets the set of custom fields associated with the current contact.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.IBizContact">
            <summary>
            Interface for BizContact class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.Commit">
            <summary>
            Saves any pending changes to the current contact to the server or creates a new
            contact if not previously committed.
            </summary>
            <example>
The following code opens an existing Business Contact, modifies its first
and last name and then commits the changes to the Encompass server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the contact specified on the command line
      Contact contact = session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Update his personal information
      contact.FirstName = "Fred";
      contact.LastName = "Silverman";

      // Until Commit is called, the changes are held locally. Commit persists
      // them back to the Encompass Server.
      contact.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.Delete">
            <summary>
            Deletes the current contact from the contact database.
            </summary>
            <example>
The following code deletes all Appraisers from the contacts database.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the query criterion to get the Appraisers from the server
      NumericFieldCriterion catCri = new NumericFieldCriterion();
      catCri.FieldName = "Contact.CategoryID";
      catCri.Value = session.Contacts.BizCategories.GetItemByName("Appraiser").ID;

      // Retrieve the set of all Business Contacts matching our criteria
      ContactList contacts = session.Contacts.Query(catCri, ContactLoanMatchType.None, ContactType.Biz);

      // Delete all of these contacts
      for (int i = 0; i < contacts.Count; i++)
         contacts[i].Delete();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.Refresh">
            <summary>
            Refreshes the object from the server. Any uncommitted changes made to the object
            are lost.
            </summary>
            <example>
The following code demonstrates how using the Refresh method will discard
any pending changes to a Contact that haven't been committed.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the contact specified on the command line
      Contact contact = session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Print the original first name of the contact, e.g. "Mary"
      Console.WriteLine(contact.FirstName);

      // Modify the first name
      contact.FirstName = "Marilyn";

      // The following line will print the new value, "Marilyn"
      Console.WriteLine(contact.FirstName);

      // Refresh the contact to reload the fields from the server
      contact.Refresh();

      // The first name will now be restored to its prior state (unless
      // it was changed by another user since originally retrieved).
      Console.WriteLine(contact.FirstName);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.ID">
            <summary>
            Gets the unique ID for the contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.Guid">
            <summary>
            Gets the GUID for the contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.Category">
            <summary>
            Gets or sets the <see cref="T:EllieMae.Encompass.BusinessEnums.BizCategory">BizCategory</see> associated with this contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.FirstName">
            <summary>
            Gets or sets the contact's first name.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.LastName">
            <summary>
            Gets or sets the contact's last name.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.Salutation">
            <summary>
            Gets or sets the contact's salutation.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.CompanyName">
            <summary>
            Gets or sets the name of the company for which the contact works.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.JobTitle">
            <summary>
            Gets or sets the contact's job title.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.BizAddress">
            <summary>
            Gets the contact's business address.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.BizWebUrl">
            <summary>
            Gets or sets the URL of the contact's business web site.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.HomePhone">
            <summary>
            Gets or sets the contact's home phone number.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.WorkPhone">
            <summary>
            Gets or sets the contact's work phone number.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.MobilePhone">
            <summary>
            Gets or sets the contact's mobile phone number.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.FaxNumber">
            <summary>
            Gets or sets the contact's fax number.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.PersonalEmail">
            <summary>
            Gets or sets the contact's personal email address.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.BizEmail">
            <summary>
            Gets or sets the contact's business email address.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.LicenseNumber">
            <summary>
            Gets or sets the contact's license number, if appropriate.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.Fees">
            <summary>
            Gets or sets the contact's fees, in dollars.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.Comment">
            <summary>
            Gets or sets a comment to be associated with this contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.CustField1">
            <summary>
            Gets or sets the first custom field value for the contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.CustField2">
            <summary>
            Gets or sets the second custom field value for the contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.CustField3">
            <summary>
            Gets or sets the third custom field value for the contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.CustField4">
            <summary>
            Gets or sets the fourth custom field value for the contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.BizCategoryCustomFields">
            <summary>
            Gets the custom fields collections associated with the defined business categories.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.NoSpam">
            <summary>
            Gets or sets a flag indicating if the user should receive mass e-mailings.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.LastModified">
            <summary>
            Gets the last modification date and time for this contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.Owner">
            <summary>
            Gets or sets the Encompass User to whom the contact belongs.
            </summary>
            <remarks>The currently logged in user must have the Administrator
            persona in order to modify the owner of a contact.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.AccessLevel">
            <summary>
            Gets or sets the access level for the contact, which determines which users
            can view/modify this object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BizContact.Type">
            <summary>Gets the type of contact represented by this object.</summary>
            <remarks>This property will always return <see cref="F:EllieMae.Encompass.BusinessObjects.Contacts.ContactType.Biz"/>.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact">
            <summary>
            Represents a single borrower contact within the system. A borrower contact may be
            an individual who has previously closed a loan or could simply be a current or 
            prospective client.
            </summary>
            <example>
The following code opens an existing Business Contact, modifies its first
and last name and then commits the changes to the Encompass server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the contact specified on the command line
      Contact contact = session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Update his personal information
      contact.FirstName = "Fred";
      contact.LastName = "Silverman";

      // Until Commit is called, the changes are held locally. Commit persists
      // them back to the Encompass Server.
      contact.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.IBorrowerContact">
            <summary>
            Interface for BorrowerContact class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.EllieMae#Encompass#BusinessObjects#Contacts#IBorrowerContact#SetBirthdate(System.Object)">
            <summary>
            Interface method for COM components that cannot set the date directly by using
            the Birthdate property.
            </summary>
            <param name="value">The new date or the Empty variant to clear the date.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.EllieMae#Encompass#BusinessObjects#Contacts#IBorrowerContact#SetAnniversary(System.Object)">
            <summary>
            Interface method for COM components that cannot set the date directly by using
            the Anniversary property.
            </summary>
            <param name="value">The new date or the Empty variant to clear the date.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.Commit">
            <summary>
            Saves any pending changes to the current contact to the server or creates a new
            contact if not previously committed.
            </summary>
            <example>
The following code opens an existing Business Contact, modifies its first
and last name and then commits the changes to the Encompass server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the contact specified on the command line
      Contact contact = session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Update his personal information
      contact.FirstName = "Fred";
      contact.LastName = "Silverman";

      // Until Commit is called, the changes are held locally. Commit persists
      // them back to the Encompass Server.
      contact.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.Delete">
            <summary>
            Deletes the current contact from the contact database.
            </summary>
            <example>
The following code deletes all Appraisers from the contacts database.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the query criterion to get the Appraisers from the server
      NumericFieldCriterion catCri = new NumericFieldCriterion();
      catCri.FieldName = "Contact.CategoryID";
      catCri.Value = session.Contacts.BizCategories.GetItemByName("Appraiser").ID;

      // Retrieve the set of all Business Contacts matching our criteria
      ContactList contacts = session.Contacts.Query(catCri, ContactLoanMatchType.None, ContactType.Biz);

      // Delete all of these contacts
      for (int i = 0; i < contacts.Count; i++)
         contacts[i].Delete();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.Refresh">
            <summary>
            Refreshes the object from the server. Any uncommitted changes made to the object
            are lost.
            </summary>
            <example>
The following code demonstrates how using the Refresh method will discard
any pending changes to a Contact that haven't been committed.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the contact specified on the command line
      Contact contact = session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Print the original first name of the contact, e.g. "Mary"
      Console.WriteLine(contact.FirstName);

      // Modify the first name
      contact.FirstName = "Marilyn";

      // The following line will print the new value, "Marilyn"
      Console.WriteLine(contact.FirstName);

      // Refresh the contact to reload the fields from the server
      contact.Refresh();

      // The first name will now be restored to its prior state (unless
      // it was changed by another user since originally retrieved).
      Console.WriteLine(contact.FirstName);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.ID">
            <summary>
            Gets the unique ID for the contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.Guid">
            <summary>
            Gets the GUID for the contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.FirstName">
            <summary>
            Gets or sets the contact's first name.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.MiddleName">
            <summary>
            Gets or sets the contact's middle name.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.LastName">
            <summary>
            Gets or sets the contact's last name.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.Suffix">
            <summary>
            Gets or sets the suffix for the contact's name.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.Salutation">
            <summary>
            Gets or sets the contact's salutation.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.HomeAddress">
            <summary>
            Gets the contact's home address.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.BizAddress">
            <summary>
            Gets or sets the contact's work address.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.BizWebUrl">
            <summary>
            Gets or sets the URL of the contact's business web site.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.EmployerName">
            <summary>
            Gets or sets the name of the contact's current employer.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.JobTitle">
            <summary>
            Gets or sets the contact's job title.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.AccessLevel">
            <summary>
            Gets or sets the access level for the contact, which determines which users
            can view/modify this object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.SocialSecurityNumber">
            <summary>
            Gets or sets the borrower's social security number.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.BorrowerType">
            <summary>
            Gets or sets the type of borrower this contact represents.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.Status">
            <summary>
            Gets or sets the borrower's status.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.NoCall">
            <summary>
            Gets or sets a flag indicating if this contact can be called.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.NoFax">
            <summary>
            Gets or sets a flag indicating if this contact can be faxed.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.Referral">
            <summary>
            Gets or sets a field which provides information regarding how this borrower was referred.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.Income">
            <summary>
            Gets or sets a field indicating the borrower's income.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.WorkPhone">
            <summary>
            Gets or sets the contact's work phone number.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.HomePhone">
            <summary>
            Gets or sets the contact's home phone number.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.MobilePhone">
            <summary>
            Gets or sets the contact's mobile phone number.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.FaxNumber">
            <summary>
            Gets or sets the contact's fax number.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.PersonalEmail">
            <summary>
            Gets or sets the contact's personal email address.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.BizEmail">
            <summary>
            Gets or sets the contact's work email address.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.Birthdate">
            <summary>
            Gets or sets the contact's birthdate.
            </summary>
            <remarks>
            <p>Note to COM clients: Because of a limitation in the way COM marshals the date values
            when exposed as a VARIANT, you should call the <c>SetBirthdate()</c> method
            to set this property.</p>
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.Married">
            <summary>
            Gets or sets a flag indicating if the contact is married.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.PrimaryContact">
            <summary>
            Gets or sets a flag indicating if the contact is a primary contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.SpouseContactID">
            <summary>
            Gets or sets the ID of the contact which is this contact's spouse.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.SpouseName">
            <summary>
            Gets or sets the name of the contact's spouse.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.Anniversary">
            <summary>
            Gets or sets the contact's anniversary date. Only the month and day value of the
            returned DateTime object should be considered valid.
            </summary>
            <remarks>
            <p>Note to COM clients: Because of a limitation in the way COM marshals the date values
            when exposed as a VARIANT, you should call the <c>SetAnniversary()</c> method
            to set this property.</p>
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.CustField1">
            <summary>
            Gets or sets the first custom field value for the contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.CustField2">
            <summary>
            Gets or sets the second custom field value for the contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.CustField3">
            <summary>
            Gets or sets the third custom field value for the contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.CustField4">
            <summary>
            Gets or sets the fourth custom field value for the contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.NoSpam">
            <summary>
            Gets or sets a flag indicating if the user should receive mass e-mailings.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.LastModified">
            <summary>
            Gets the last modification date and time for this contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.Owner">
            <summary>
            Gets or sets the Encompass User to whom the contact belongs.
            </summary>
            <remarks>The currently logged in user must have the Administrator
            persona in order to modify the owner of a contact.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.Opportunities">
            <summary>
            Gets the set of opportunities associated with this contact.
            </summary>
            <remarks>This property is not accessible until the contact has been
            committed to the server.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact.Type">
            <summary>Gets the type of contact represented by this object.</summary>
            <remarks>This property will always return <see cref="F:EllieMae.Encompass.BusinessObjects.Contacts.ContactType.Borrower"/>.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactCursor">
            <summary>
            Provides a server-side cursor for iterating over a large set of 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.Contact"/> objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Cursors.Cursor">
            <summary>
            Provides an interface for collections of objects stored on the Encompass Server
            to allow for quick random access without having to pull all of the data to the
            client.
            </summary>
            <remarks>A Cursor represents a list of objects which is held on the Encompass
            Server and which the client can then access by directly fetching individual items
            or even subsets. This provides a great deal of optimization to operations that would
            otherwise require large amounts of data to be transferred to the client.
            <p>Every method invocation on a cursor requires a round trip to the Encompass Server,
            so you should make every attempt to retrieve the data in as efficient a manner as 
            possible. For example, you should use the GetItems() method to retrieve
            a set of contiguous elements from the cursor instead of invoking the GetItem()
            method multiple times, which would be far more expensive.</p>
            <p>Because a cursor consumes resources on the server, you should invoke the Cursor's
            <see cref="M:EllieMae.Encompass.Cursors.Cursor.Close"/> method when you are done using it. This will release the server
            resources immediately. Failure to invoke Close() (or, equivalently, Dispose()) will
            cause a resource leak on the server until the <see cref="T:EllieMae.Encompass.Client.Session"/> is closed, at
            which point any open cursors for the session are released.</p>
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.Cursors.Cursor.GetItem(System.Int32)">
            <summary>
            Retrieves the item from the cursor at the specified index.
            </summary>
            <param name="index">Index of the item to be retrieved (with 0 as the first
            index).</param>
            <returns>Returns the specified object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Cursors.Cursor.GetItems(System.Int32,System.Int32)">
            <summary>
            Retrieves a subset of the cursor items starting at a specified index.
            </summary>
            <param name="startIndex">The index at which to start the subset.</param>
            <param name="count">The number of items to retrieve</param>
            <returns>Returns an list containing the elements specified.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Cursors.Cursor.Close">
            <summary>
            Closes the cursor, releasing any resources allocated by it on the Encompass
            Server.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Cursors.Cursor.GetEnumerator">
            <summary>
            Provides a fast, efficient enumerator for the cursor.
            </summary>
            <returns>
            <p>The enumerator returned by this method is optimized for iterating over the
            contents of a Cursor. It pulls the cursor data down in chunks instead of
            fetching the items individually in order to minimize round trips to the server
            while also preventing large chunks of data from having to be passed back and
            forth in any one single transaction.</p>
            <p>From the application perspective, the enumerator will return objects
            of the underlying type of the Cursor. For example, interating over a 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineCursor"/>
            will return a sequence of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineData"/>
            object.</p>
            </returns>
        </member>
        <member name="M:EllieMae.Encompass.Cursors.Cursor.System#IDisposable#Dispose">
            <summary>
            Implementation of the IDisposable interface's Dispose() method, which invokes the
            <see cref="M:EllieMae.Encompass.Cursors.Cursor.Close"/> method if the cursor is not already closed.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Cursors.Cursor.Count">
            <summary>
            Returns the number of items in the cursor.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.IContactCursor">
            <summary>
            Interface for ContactCursor class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactCursor.GetItem(System.Int32)">
            <summary>
            Retrieves the item from the cursor at the specified index.
            </summary>
            <param name="index">Index of the item to be retrieved (with 0 as the first
            index).</param>
            <returns>Returns the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.Contact"/> object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactCursor.GetItems(System.Int32,System.Int32)">
            <summary>
            Retrieves a subset of the cursor items starting at a specified index.
            </summary>
            <param name="startIndex">The index at which to start the subset.</param>
            <param name="count">The number of items to retrieve</param>
            <returns>Returns an array containing the <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.Contact"/> objects 
            within the specified range</returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactCustomField">
            <summary>
            Represents a custom field for a contact.
            </summary>
            <example>
The following code lists all of the custom fields associated with a contact
along with the value of each.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Retrieve a borrower based on a command-line argument
      Contact contact = session.Contacts.Open(int.Parse(args[0]), ContactType.Borrower);

      // Loop over the defined custom fields
      foreach (ContactCustomField field in contact.CustomFields)
      {
         // Display the name of the field and the value for this contact
         Console.WriteLine(field.Name + " = " + field.Value);

         // If this is a drop-down field, display the possible options
         if ((field.Type == CustomFieldType.DROPDOWN) ||
            (field.Type == CustomFieldType.DROPDOWN_EDITABLE))
         {
            for (int i = 0; i < field.PossibleValues.Count; i++)
               Console.WriteLine("   " + field.PossibleValues[i]);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.IContactCustomField">
            <summary>
            Interface for ContactCustomFields class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactCustomField.Value">
            <summary>
            Gets or sets the value of the custom field.
            </summary>
            <remarks>
            When setting this property, the value will be automatically reformatted or converted,
            if possible, based on the <see cref="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactCustomField.Type"/> of the field. For example, if the property
            has type <see cref="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.ZIPCODE"/> and you set the Value to "123456789", it will automatically be
            reformatted as "12345-6789". 
            <p>
            If you attempt to set this property to a value which is cannot be converted to a value which is appropriate for the
            field's <see cref="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactCustomField.Type"/>, an exception will be raised. For example, attempting to
            set the Value to "X" for a field whose type is <see cref="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.YN"/> will
            cause an exception to be raised. Similarly, if the field's <see cref="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactCustomField.Type"/> is 
            <see cref="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.DROPDOWN"/>, then attempting to set the field's value
            to something other than one of the values in the <see cref="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactCustomField.PossibleValues"/> list
            (or to the empty string) will result in an exception.
            </p>
            </remarks>
            <example>
The following code lists all of the custom fields associated with a contact
along with the value of each.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Retrieve a borrower based on a command-line argument
      Contact contact = session.Contacts.Open(int.Parse(args[0]), ContactType.Borrower);

      // Loop over the defined custom fields
      foreach (ContactCustomField field in contact.CustomFields)
      {
         // Display the name of the field and the value for this contact
         Console.WriteLine(field.Name + " = " + field.Value);

         // If this is a drop-down field, display the possible options
         if ((field.Type == CustomFieldType.DROPDOWN) ||
            (field.Type == CustomFieldType.DROPDOWN_EDITABLE))
         {
            for (int i = 0; i < field.PossibleValues.Count; i++)
               Console.WriteLine("   " + field.PossibleValues[i]);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactCustomField.Name">
            <summary>
            Gets the name of the custom field.
            </summary>
            <example>
The following code lists all of the custom fields associated with a contact
along with the value of each.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Retrieve a borrower based on a command-line argument
      Contact contact = session.Contacts.Open(int.Parse(args[0]), ContactType.Borrower);

      // Loop over the defined custom fields
      foreach (ContactCustomField field in contact.CustomFields)
      {
         // Display the name of the field and the value for this contact
         Console.WriteLine(field.Name + " = " + field.Value);

         // If this is a drop-down field, display the possible options
         if ((field.Type == CustomFieldType.DROPDOWN) ||
            (field.Type == CustomFieldType.DROPDOWN_EDITABLE))
         {
            for (int i = 0; i < field.PossibleValues.Count; i++)
               Console.WriteLine("   " + field.PossibleValues[i]);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactCustomField.Type">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType"/> of the field.
            </summary>
            <example>
The following code lists all of the custom fields associated with a contact
along with the value of each.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Retrieve a borrower based on a command-line argument
      Contact contact = session.Contacts.Open(int.Parse(args[0]), ContactType.Borrower);

      // Loop over the defined custom fields
      foreach (ContactCustomField field in contact.CustomFields)
      {
         // Display the name of the field and the value for this contact
         Console.WriteLine(field.Name + " = " + field.Value);

         // If this is a drop-down field, display the possible options
         if ((field.Type == CustomFieldType.DROPDOWN) ||
            (field.Type == CustomFieldType.DROPDOWN_EDITABLE))
         {
            for (int i = 0; i < field.PossibleValues.Count; i++)
               Console.WriteLine("   " + field.PossibleValues[i]);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactCustomField.PossibleValues">
            <summary>
            Gets the list of possible values which the field may take on when
            the field's <see cref="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactCustomField.Type"/> is either <see cref="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.DROPDOWN"/> or
            <see cref="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.DROPDOWN_EDITABLE"/>.
            </summary>
            <remarks>
            The returned <see cref="T:EllieMae.Encompass.Collections.StringList"/> cannot be modified. Attempting to do so
            will result in an exception.
            </remarks>
            <example>
The following code lists all of the custom fields associated with a contact
along with the value of each.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Retrieve a borrower based on a command-line argument
      Contact contact = session.Contacts.Open(int.Parse(args[0]), ContactType.Borrower);

      // Loop over the defined custom fields
      foreach (ContactCustomField field in contact.CustomFields)
      {
         // Display the name of the field and the value for this contact
         Console.WriteLine(field.Name + " = " + field.Value);

         // If this is a drop-down field, display the possible options
         if ((field.Type == CustomFieldType.DROPDOWN) ||
            (field.Type == CustomFieldType.DROPDOWN_EDITABLE))
         {
            for (int i = 0; i < field.PossibleValues.Count; i++)
               Console.WriteLine("   " + field.PossibleValues[i]);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.Collections.StringList">
            <summary>
            Represents a list of strings.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IStringList">
            <summary>
            Interface for StringList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.StringList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.StringList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.StringList.Add(System.String)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.StringList.Contains(System.String)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.StringList.IndexOf(System.String)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.StringList.Insert(System.Int32,System.String)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.StringList.Remove(System.String)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.StringList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.StringList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactCustomFields">
            <summary>
            Provides access to the set of custome fields for a contact.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="ContactCustomFields.xml" path="Examples/Example[@name=&quot;ContactCustomFields.GetFieldByName&quot;]/*"/>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.IContactCustomFields">
            <summary>
            Interface for ContactCustomFields class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactCustomFields.GetEnumerator">
            <summary>
            Allows for enumeration over the custom fields defined for this contact.
            </summary>
            <returns>An enumerator for the set of custom fields.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactCustomFields.Item(System.String)">
            <summary>
            Retrieves a custom field using the field's name.
            </summary>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactCustomField"/> corresponding to this name, or <c>null</c>
            is no such custom field is defined.</returns>
            <example>
The following code lists the favorite color of each Borrower Contact in the
database assuming a custom field with the name <c>FavoriteColor</c> has been defined.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Retrieve all borrower contacts from the server
      ContactList contacts = session.Contacts.GetAll(ContactType.Borrower);

      foreach (Contact contact in contacts)
      {
         // Write the contact's name and favorit color
         Console.WriteLine(contact.FirstName + " " + contact.LastName + ": " +
            contact.CustomFields["FavoriteColor"].Value);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactCustomFields.Count">
            <summary>
            Gets the number of custom fields defined for the current contact.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactAccessLevel">
            <summary>
            Defines the access levels for Borrower Contacts in Encompass.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.ContactAccessLevel.Private">
            <summary>Contact is accessible only by the contact's owner.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.ContactAccessLevel.Public">
            <summary>Contact is publicly accessible by all other users.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContactType">
            <summary>
            Defines the the type of contact a BorrowerContact object represents.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContactType.Unspecified">
            <summary>The borrower contact type has not been specified for this contact.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContactType.Propspect">
            <summary>The contact represents a business prospect.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContactType.Client">
            <summary>Contact represents a past or present borrower.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContactType.Lead">
            <summary>Contact represents a lead.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.LoanPurpose">
            <summary>
            Defines the loan purposes which can be assigned to a loan.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.LoanPurpose.Unspecified">
            <summary>The loan purpose has not been specified.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.LoanPurpose.Purchase">
            <summary>The loan is for the purchase of property.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.LoanPurpose.CashOutRefi">
            <summary>The loan is a cash-out refinance.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.LoanPurpose.NoCashOutRefi">
            <summary>The loan is a no-cash-out refinance.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.LoanPurpose.Construction">
            <summary>The loan is a construction loan.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.LoanPurpose.ConstructionPerm">
            <summary>The loan is a construction-to-permanent loan.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.LoanPurpose.Other">
            <summary>The loan is another, custom type of loan.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.PropertyType">
            <summary>
            Defines the possible property types for a loan.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.PropertyType.Unspecified">
            <summary>No property type is specified </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.PropertyType.Attached">
            <summary>Property is attached to another unit</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.PropertyType.Condominium">
            <summary>Property is part of a multi-unit condominium</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.PropertyType.Coop">
            <summary>Property is part of a Co-op</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.PropertyType.Detached">
            <summary>Property is a detached residence</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.PropertyType.HighRiseCondo">
            <summary>Property is part of a high-rise condo</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.PropertyType.MfdHousing">
            <summary>Property is a manufactured home</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.PropertyType.PUD">
            <summary>Property is part of a PUD</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.PropertyType.DetachedCondo">
            <summary>Property is a detached condominium</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.PropertyType.MfdCondoPUDCoop">
            <summary>Property is a Manufactured/Condo/PUD/Co-op</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.PropertyType.MHSelect">
            <summary>Property is a MH Select</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.PropertyUse">
            <summary>
            Defines the possible property uses for a loan.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.PropertyUse.Unspecified">
            <summary>The property use is unknown or has not been specified.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.PropertyUse.Primary">
            <summary>The property is to be used as a primary residence.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.PropertyUse.Secondary">
            <summary>The property is to be used as a secondary residence.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.PropertyUse.Investment">
            <summary>The property is an investment property.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.EmploymentStatus">
            <summary>
            Defines the possible employment statuses for a borrower.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.EmploymentStatus.Unspecified">
            <summary>The borrower's employment status is unknown or has not been specified.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.EmploymentStatus.Employed">
            <summary>The borrower is currently employed.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.EmploymentStatus.SelfEmployed">
            <summary>The borrower is currently self-emplyed.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.EmploymentStatus.Unemployed">
            <summary>The borrower is currently unemployed.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.AmortizationType">
            <summary>
            Defines the possible amortization types for a loan.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.AmortizationType.Unspecified">
            <summary>The amortization type is unknown or has not been specified.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.AmortizationType.FixedRate">
            <summary>The associated loan is at a fixed rate.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.AmortizationType.GPM">
            <summary>The associated loan is a graduate payment mortgage.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.AmortizationType.ARM">
            <summary>The associated loan is at an adjustable rate.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.AmortizationType.Other">
            <summary>The amortization is of another type.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType">
            <summary>
            Defines the possible formats for a custom field associated with a contact.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.NONE">
            <summary>No specific field type.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.STRING">
            <summary>A generic string field.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.YN">
            <summary>A Yes/No field which can take on the value "Y" or "N".</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.X">
            <summary>A boolean field which can take on the value "X" or "".</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.ZIPCODE">
            <summary>A string field formatted as a zip code (XXXXX-XXXX).</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.STATE">
            <summary>A 2-character state abbreviation.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.PHONE">
            <summary>A string field formatted as a phone number with optional extension (XXX-XXX-XXXX XXXX).</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.SSN">
            <summary>A string field formatted as a Social Security Number (XXX-XX-XXXX).</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.INTEGER">
            <summary>An integer field.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.DECIMAL_1">
            <summary>An decimal field with one decimal place of precision.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.DECIMAL_2">
            <summary>An decimal field with two decimal places of precision.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.DECIMAL_3">
            <summary>An decimal field with three decimal places of precision.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.DECIMAL_4">
            <summary>An decimal field with four decimal places of precision.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.DECIMAL_5">
            <summary>An decimal field with five decimal places of precision.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.DECIMAL_6">
            <summary>An decimal field with four decimal places of precision.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.DECIMAL_7">
            <summary>An decimal field with seven decimal places of precision.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.DECIMAL_10">
            <summary>An decimal field with ten decimal places of precision.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.DECIMAL">
            <summary>An decimal field without a specified precision.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.DATE">
            <summary>An date value (no time included).</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.TIME">
            <summary>An date and time value.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.MONTHDAY">
            <summary>An recurring date value (month and day only).</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.DROPDOWN">
            <summary>A field which provides a list of possible values from which the user must select.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.CustomFieldType.DROPDOWN_EDITABLE">
            <summary>A field which provides a list of possible values from which the user may select or enter a custom value.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvent">
            <summary>
            Represents a single event in the history of a contact.
            </summary>
            <remarks>Encompass predefines two events: 
            <list type="bullet"><item>First Contact, which is automatically
            generated when the contact is first created</item>
            <item>Completed Loan, when a loan associated with this contact (either as a
            borrower or as a business partner) is completed</item></list></remarks>
            <example>
The following code lists all of the events for a Business Contact whose
unique ID is specified on the command line.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new Business Contact in the database
      BizContact contact = (BizContact) session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Print all of the events for the contact
      for (int i = 0; i < contact.Events.Count; i++)
      {
         Console.WriteLine("Timestamp: " + contact.Events[i].Timestamp);
         Console.WriteLine("Subject:   " + contact.Events[i].EventType);

         // If there's a loan related to this event, output some of its properties
         if (contact.Events[i].RelatedLoan != null)
         {
            ContactLoan loan = contact.Events[i].RelatedLoan;
            Console.WriteLine("Loan Amount:   " + loan.LoanAmount);
            Console.WriteLine("Loan Closed:   " + loan.DateCompleted);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.IContactEvent">
            <summary>
            Interface for ContactEvent class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvent.ID">
            <summary>
            Gets the unique ID of this event in the log.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvent.EventType">
            <summary>
            Gets the type of event that occurred.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvent.Timestamp">
            <summary>
            Gets the date and time at which the event occurred.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvent.RelatedLoan">
            <summary>
            Gets the loan with which this event is related. 
            </summary>
            <remarks>For events that are not related to a particular loan, 
            this value should be set to null.</remarks>
            <example>
The following code lists all of the events for a Business Contact whose
unique ID is specified on the command line.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new Business Contact in the database
      BizContact contact = (BizContact) session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Print all of the events for the contact
      for (int i = 0; i < contact.Events.Count; i++)
      {
         Console.WriteLine("Timestamp: " + contact.Events[i].Timestamp);
         Console.WriteLine("Subject:   " + contact.Events[i].EventType);

         // If there's a loan related to this event, output some of its properties
         if (contact.Events[i].RelatedLoan != null)
         {
            ContactLoan loan = contact.Events[i].RelatedLoan;
            Console.WriteLine("Loan Amount:   " + loan.LoanAmount);
            Console.WriteLine("Loan Closed:   " + loan.DateCompleted);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvents">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvent">ContactEvent</see> objects associated
            with a single contact.
            </summary>
            <example>
The following code lists all of the events for a Business Contact whose
unique ID is specified on the command line.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new Business Contact in the database
      BizContact contact = (BizContact) session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Print all of the events for the contact
      for (int i = 0; i < contact.Events.Count; i++)
      {
         Console.WriteLine("Timestamp: " + contact.Events[i].Timestamp);
         Console.WriteLine("Subject:   " + contact.Events[i].EventType);

         // If there's a loan related to this event, output some of its properties
         if (contact.Events[i].RelatedLoan != null)
         {
            ContactLoan loan = contact.Events[i].RelatedLoan;
            Console.WriteLine("Loan Amount:   " + loan.LoanAmount);
            Console.WriteLine("Loan Closed:   " + loan.DateCompleted);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.IContactEvents">
            <summary>
            Interface for ContactEvents class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvents.Add(System.String)">
            <summary>
            Adds a new <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvent">ContactEvent</see> to the set of events for this Contact.
            </summary>
            <param name="eventType">The type of event to create.</param>
            <returns>Returns the new <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvent">ContactEvent</see> object.</returns>
            <remarks>The Timestamp for the new Event is set to the current date and time.</remarks>
            <example>
The following code creates a new custom event on every Borrower Contact to 
indicate that a marketing email was sent to them.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get all of the Borrower Contacts
      ContactList contacts = session.Contacts.GetAll(ContactType.Borrower);

      // For each contact, add a new event to indicate the mailing was sent
      for (int i = 0; i < contacts.Count; i++)
         contacts[i].Events.Add("Marketing mail sent");

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvents.AddForDate(System.String,System.DateTime)">
            <summary>
            Adds a new <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvent"/> to the set of events for this Contact
            using the specified date as the event's timestamp.
            </summary>
            <param name="eventType">The type of event to create.</param>
            <param name="eventDate">The date/time at which the event occurred.</param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvents.Remove(EllieMae.Encompass.BusinessObjects.Contacts.ContactEvent)">
            <summary>
            Deletes a event from the server.
            </summary>
            <param name="evnt">The event to delete. This event must belong to the current contact.</param>
            <example>
The following code deletes all of the notes associated with a specific Borrower.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the query criteria to do a search by first and last name
      StringFieldCriterion fnCri = new StringFieldCriterion("Contact.FirstName", "George", StringFieldMatchType.Exact, true);
      StringFieldCriterion lnCri = new StringFieldCriterion("Contact.LastName", "Donahue", StringFieldMatchType.Exact, true);

      // Perform the query for any matching Borrower contacts
      ContactList contacts = session.Contacts.Query(fnCri.And(lnCri), ContactLoanMatchType.None, ContactType.Borrower);

      // Delete all the notes for these borrowers
      foreach (BorrowerContact contact in contacts)
      {
         for (int i = contact.Events.Count - 1; i >= 0; i--)
            contact.Events.Remove(contact.Events[i]);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvents.GetEnumerator">
            <summary>
            Allows for enumeration over the set of events for this contact.
            </summary>
            <returns>An enumerator for the set of events.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvents.Refresh">
            <summary>
            Refreshes the set of events from the server.
            </summary>
            <remarks>Any changes to the set of events made by other users since the 
            contact was originaly load can be seen by refreshing the list.</remarks>
            <example>
The following code waits until a "Closed Loan" event has occurred for 
a specific Business Partner.
<code>
<![CDATA[
using System;
using System.Collections;
using System.IO;
using System.Threading;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the contact specified on the command line
      Contact contact = session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Save the event IDs of the events that we've reported on
      ArrayList eventIds = new ArrayList();

      for (;;)
      {
         // Iterate over all of the events for the contact
         foreach (ContactEvent evnt in contact.Events)
         {
            // Ensure this is a "Closed Loan" event which we haven't reported on yet
            if ((evnt.EventType == "Closed Loan") && (!eventIds.Contains(evnt.ID)))
            {
               Console.WriteLine("A new Closed Loan event has occured!");

               // Add the event ID to our list so we don't report on it again.
               eventIds.Add(evnt.ID);
            }
         }

         // Sleep for 1 minute before checking again
         Thread.Sleep(60000);

         // Refresh the list of events so we get any new events that have occurred
         contact.Events.Refresh();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvents.Item(System.Int32)">
            <summary>
            Gets the ContactEvent from the set with the specified index.
            </summary>
            <example>
The following code lists all of the events for a Business Contact whose
unique ID is specified on the command line.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new Business Contact in the database
      BizContact contact = (BizContact) session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Print all of the events for the contact
      for (int i = 0; i < contact.Events.Count; i++)
      {
         Console.WriteLine("Timestamp: " + contact.Events[i].Timestamp);
         Console.WriteLine("Subject:   " + contact.Events[i].EventType);

         // If there's a loan related to this event, output some of its properties
         if (contact.Events[i].RelatedLoan != null)
         {
            ContactLoan loan = contact.Events[i].RelatedLoan;
            Console.WriteLine("Loan Amount:   " + loan.LoanAmount);
            Console.WriteLine("Loan Closed:   " + loan.DateCompleted);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvents.Count">
            <summary>
            Gets the number of events in the set.
            </summary>
            <example>
The following code lists all of the events for a Business Contact whose
unique ID is specified on the command line.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new Business Contact in the database
      BizContact contact = (BizContact) session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Print all of the events for the contact
      for (int i = 0; i < contact.Events.Count; i++)
      {
         Console.WriteLine("Timestamp: " + contact.Events[i].Timestamp);
         Console.WriteLine("Subject:   " + contact.Events[i].EventType);

         // If there's a loan related to this event, output some of its properties
         if (contact.Events[i].RelatedLoan != null)
         {
            ContactLoan loan = contact.Events[i].RelatedLoan;
            Console.WriteLine("Loan Amount:   " + loan.LoanAmount);
            Console.WriteLine("Loan Closed:   " + loan.DateCompleted);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoan">
            <summary>
            Represents the historical data for a closed loan that may be associated with one
            or more contacts.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.IContactLoan">
            <summary>
            Interface for ContactLoan class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoan.ID">
            <summary>
            Gets the unique identifier for this ContactLoan object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoan.BorrowerID">
            <summary>
            Returns the ID of the primary Borrower contact with which the loan is associated.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoan.LoanStatus">
            <summary>
            Gets the status of the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoan.AppraisedValue">
            <summary>
            Gets the appraised value of the property.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoan.LoanAmount">
            <summary>
            Gets the amount of the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoan.InterestRate">
            <summary>
            Gets the interest rate of the loan as a decimal between 0 and 1.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoan.Term">
            <summary>
            Gets the term of the loan, in months.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoan.Purpose">
            <summary>
            Gets the purpose of the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoan.DownPayment">
            <summary>
            Gets the amount of the down payment made on the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoan.LTV">
            <summary>
            Gets the Loan-to-Value ratio for the loan as a decimal between 0 and 1.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoan.Amortization">
            <summary>
            Returns the amortization method applied to the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoan.DateCompleted">
            <summary>
            Gets the date on which the loan was closed.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoan.LoanType">
            <summary>
            Gets the type of loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoan.LienPosition">
            <summary>
            Gets the lien position of this loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactNote">
            <summary>
            Represents a single note made for a contact.
            </summary>
            <example>
The following code demonstrates retrieving, updating and adding 
notes for a contact.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new Business Contact in the database
      BizContact contact = (BizContact) session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Print all of the notes for the contact
      for (int i = 0; i < contact.Notes.Count; i++)
      {
         Console.WriteLine("Timestamp: " + contact.Notes[i].Timestamp);
         Console.WriteLine("Subject:   " + contact.Notes[i].Subject);
         Console.WriteLine(contact.Notes[i].Details);
      }

      // Now add a new note. We do not have to call Commit() to save to database --
      // the act of adding it saves it to the server.
      ContactNote newNote = contact.Notes.Add("The subject of the note", "The body of the note");
      Console.WriteLine("New note created with ID " + newNote.ID);
      
      // Modify the note and save it
      newNote.Subject = "The corrected subject of the note";
      newNote.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.IContactNote">
            <summary>
            Interface for ContactNote class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactNote.Commit">
            <summary>
            Commits any pending changes to the object to the server.
            </summary>
            <remarks>This function saves any changes made to an existing object
            or commits a new object if not already saved. Failing to call commit
            will result in the loss of any changes made.</remarks>
            <example>
The following code demonstrates retrieving, updating and adding 
notes for a contact.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new Business Contact in the database
      BizContact contact = (BizContact) session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Print all of the notes for the contact
      for (int i = 0; i < contact.Notes.Count; i++)
      {
         Console.WriteLine("Timestamp: " + contact.Notes[i].Timestamp);
         Console.WriteLine("Subject:   " + contact.Notes[i].Subject);
         Console.WriteLine(contact.Notes[i].Details);
      }

      // Now add a new note. We do not have to call Commit() to save to database --
      // the act of adding it saves it to the server.
      ContactNote newNote = contact.Notes.Add("The subject of the note", "The body of the note");
      Console.WriteLine("New note created with ID " + newNote.ID);
      
      // Modify the note and save it
      newNote.Subject = "The corrected subject of the note";
      newNote.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactNote.Refresh">
            <summary>
            Refreshes the current note from the server.
            </summary>
            <remarks>Any changes made by other users will become visible once refreshed.
            However, any pending changes that weren't committed will be lost.</remarks>
            <example>
The following code demonstrates how pending changes to a note can be discarded
using the Refresh() method.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a Business Contact using the contact's unique ID
      BizContact contact = (BizContact) session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Fetch the first note for this contact
      ContactNote note = contact.Notes[0];

      // Modify the note
      note.Subject = "This is the new subject";
      note.Details = "This is the new body of the note";

      // Discard the changes by refreshing the note
      note.Refresh();

      // Verify that the previous values have been restored
      Console.WriteLine(note.Subject);
      Console.WriteLine(note.Details);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="E:EllieMae.Encompass.BusinessObjects.Contacts.ContactNote.Committed">
            <summary>Event indicating that the object has been committed to the server.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactNote.ID">
            <summary>
            Gets the unique identifier for the note.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactNote.Subject">
            <summary>
            Gets or sets the subject of the note.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactNote.Timestamp">
            <summary>
            Gets or sets the date and time associated with the note.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactNote.Details">
            <summary>
            Gets or sets the body or details of the note.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactNotes">
            <summary>
            Represents the set of all <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactNote">ContactNote</see> objects
            associated with a contact.
            </summary>
            <example>
The following code demonstrates retrieving, updating and adding 
notes for a contact.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new Business Contact in the database
      BizContact contact = (BizContact) session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Print all of the notes for the contact
      for (int i = 0; i < contact.Notes.Count; i++)
      {
         Console.WriteLine("Timestamp: " + contact.Notes[i].Timestamp);
         Console.WriteLine("Subject:   " + contact.Notes[i].Subject);
         Console.WriteLine(contact.Notes[i].Details);
      }

      // Now add a new note. We do not have to call Commit() to save to database --
      // the act of adding it saves it to the server.
      ContactNote newNote = contact.Notes.Add("The subject of the note", "The body of the note");
      Console.WriteLine("New note created with ID " + newNote.ID);
      
      // Modify the note and save it
      newNote.Subject = "The corrected subject of the note";
      newNote.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.IContactNotes">
            <summary>
            Interface for ContactNotes class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactNotes.Add(System.String,System.String)">
            <summary>
            Creates a new Note for the current contact.
            </summary>
            <param name="subject">The subject of the note.</param>
            <param name="details">The body or details of the note</param>
            <returns>The newly created <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactNote">ContactNote</see> object.</returns>
            <remarks>The Timestamp for the new note is set to the current date and time.</remarks>
            <example>
The following code demonstrates retrieving, updating and adding 
notes for a contact.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new Business Contact in the database
      BizContact contact = (BizContact) session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Print all of the notes for the contact
      for (int i = 0; i < contact.Notes.Count; i++)
      {
         Console.WriteLine("Timestamp: " + contact.Notes[i].Timestamp);
         Console.WriteLine("Subject:   " + contact.Notes[i].Subject);
         Console.WriteLine(contact.Notes[i].Details);
      }

      // Now add a new note. We do not have to call Commit() to save to database --
      // the act of adding it saves it to the server.
      ContactNote newNote = contact.Notes.Add("The subject of the note", "The body of the note");
      Console.WriteLine("New note created with ID " + newNote.ID);
      
      // Modify the note and save it
      newNote.Subject = "The corrected subject of the note";
      newNote.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactNotes.Remove(EllieMae.Encompass.BusinessObjects.Contacts.ContactNote)">
            <summary>
            Deletes the specified note from the server.
            </summary>
            <param name="note">The note to delete. This note must belong to the current contact.</param>
            <example>
The following code deletes all of the notes associated with a specific Borrower.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the query criteria to do a search by first and last name
      StringFieldCriterion fnCri = new StringFieldCriterion("Contact.FirstName", "George", StringFieldMatchType.Exact, true);
      StringFieldCriterion lnCri = new StringFieldCriterion("Contact.LastName", "Donahue", StringFieldMatchType.Exact, true);

      // Perform the query for any matching Borrower contacts
      ContactList contacts = session.Contacts.Query(fnCri.And(lnCri), ContactLoanMatchType.None, ContactType.Borrower);

      // Delete all the notes for these borrowers
      foreach (BorrowerContact contact in contacts)
      {
         for (int i = contact.Notes.Count - 1; i >= 0; i--)
            contact.Notes.Remove(contact.Notes[i]);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactNotes.GetEnumerator">
            <summary>
            Allows for enumeration over the set of notes for this contact.
            </summary>
            <returns>An enumerator for the set of notes.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactNotes.Refresh">
            <summary>
            Refreshes the set of notes from the server. 
            </summary>
            <remarks>Any changes to the set of notes made by other users since the 
            contact was last retrieved will be retrieved.</remarks>
            <example>
The following code modifies several of the notes associated with a contact
and then discards those changes by calling Refresh().
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a Business Contact using the contact's unique ID
      BizContact contact = (BizContact) session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Modify the subject of all of the contact's notes
      foreach (ContactNote note in contact.Notes)
         note.Subject = "This is the new subject";

      // Refresh the note set, which results in all pending changes to be lost
      contact.Notes.Refresh();

      // Output the subject lines of the notes to verify the've been restored
      foreach (ContactNote note in contact.Notes)
         Console.WriteLine(note.Subject);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactNotes.Item(System.Int32)">
            <summary>
            Gets the ContactNote object from the list with the specified index.
            </summary>
            <example>
The following code demonstrates retrieving, updating and adding 
notes for a contact.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new Business Contact in the database
      BizContact contact = (BizContact) session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Print all of the notes for the contact
      for (int i = 0; i < contact.Notes.Count; i++)
      {
         Console.WriteLine("Timestamp: " + contact.Notes[i].Timestamp);
         Console.WriteLine("Subject:   " + contact.Notes[i].Subject);
         Console.WriteLine(contact.Notes[i].Details);
      }

      // Now add a new note. We do not have to call Commit() to save to database --
      // the act of adding it saves it to the server.
      ContactNote newNote = contact.Notes.Add("The subject of the note", "The body of the note");
      Console.WriteLine("New note created with ID " + newNote.ID);
      
      // Modify the note and save it
      newNote.Subject = "The corrected subject of the note";
      newNote.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactNotes.Count">
            <summary>
            Gets the number of notes contained in the set.
            </summary>
            <example>
The following code demonstrates retrieving, updating and adding 
notes for a contact.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new Business Contact in the database
      BizContact contact = (BizContact) session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      // Print all of the notes for the contact
      for (int i = 0; i < contact.Notes.Count; i++)
      {
         Console.WriteLine("Timestamp: " + contact.Notes[i].Timestamp);
         Console.WriteLine("Subject:   " + contact.Notes[i].Subject);
         Console.WriteLine(contact.Notes[i].Details);
      }

      // Now add a new note. We do not have to call Commit() to save to database --
      // the act of adding it saves it to the server.
      ContactNote newNote = contact.Notes.Add("The subject of the note", "The body of the note");
      Console.WriteLine("New note created with ID " + newNote.ID);
      
      // Modify the note and save it
      newNote.Subject = "The corrected subject of the note";
      newNote.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunities">
            <summary>
            Represents the collection of <see cref="T:EllieMae.EMLite.ClientServer.Contacts.Opportunity"/> objects associated
            with a single contact.
            </summary>
            <remarks>Encompass 2.0 supports only a single Opportnity for a contact. Future
            versions may support multiple opportunities.</remarks>
            <example>
The following code queries for all Borrower Contacts that have loan opportunities
with amounts greater than $200,000. It then prints these contacts along with
the accompanying loan amount.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.Query;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the query criterion to find all borrower with loan opportunities
      // of at least $200K.
      NumericFieldCriterion cri = new NumericFieldCriterion("Opp.LoanAmount", 200000, 
         OrdinalFieldMatchType.GreaterThanOrEquals);
   
      // Perform the query
      ContactList contacts = session.Contacts.Query(cri, ContactLoanMatchType.None, ContactType.Borrower);

      // Display the loan amount for each opportunity along with the contact's name
      foreach (BorrowerContact contact in contacts)
      {
         Console.WriteLine(contact.FirstName + " " + contact.LastName + ":");
         
         for (int i = 0; i < contact.Opportunities.Count; i++)
         if (contact.Opportunities[i].LoanAmount >= 200000)
            Console.WriteLine("   Loan Amount: " + contact.Opportunities[i].LoanAmount);
      }
      
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.IContactOpportunities">
            <summary>
            Interface for ContactOpportunities class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunities.Add">
            <summary>
            Adds a new opportunity to the set.
            </summary>
            <remarks>Attempting to add more than one Opportunity to the collection
            will result in an exception.</remarks>
            <returns>The newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity"/> object.</returns>
            <example>
The following code adds a new ContactOpportunity to a Borrower Contact.
<code>
<![CDATA[
using System;
using System.Collections;
using System.IO;
using System.Threading;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new contact
      BorrowerContact contact = (BorrowerContact) session.Contacts.CreateNew(ContactType.Borrower);

      // Set some basic properties
      contact.FirstName = "Mary";
      contact.LastName = "Jones";
      contact.HomePhone = "(555) 555-5555";
      contact.BorrowerType = BorrowerContactType.Propspect;

      // Save the contact before we attempt to create the opportunity
      contact.Commit();

      // Create an opportunity for the contact
      ContactOpportunity opp = contact.Opportunities.Add();

      opp.LoanAmount = 245000;
      opp.MortgageBalance = 255000;
      opp.MortgageRate = 6.75f;
      opp.EmploymentStatus = EmploymentStatus.Employed;
      opp.PropertyUse = PropertyUse.Primary;
      opp.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunities.Remove(EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity)">
            <summary>
            Removes an opportunity from the current borrower contact.
            </summary>
            <param name="opp">The <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity"/> object to remove.</param>
            <example>
The following code removes the opportunity information from every Borrower Contact
for which the current mortgage rate is less than 4%.
<code>
<![CDATA[
using System;
using System.Collections;
using System.IO;
using System.Threading;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the query criterion to find all borrowers with an opportunity who
      // have a current mortgage rate of less than 4%.
      NumericFieldCriterion cri = new NumericFieldCriterion("Opp.MortRate", 4, 
         OrdinalFieldMatchType.LessThan);
   
      // Perform the query
      ContactList contacts = session.Contacts.Query(cri, ContactLoanMatchType.None, ContactType.Borrower);

      // For each of these contacts, delete the associate opportunity
      foreach (BorrowerContact contact in contacts)
         contact.Opportunities.Remove(contact.Opportunities[0]);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunities.GetEnumerator">
            <summary>
            Allows for enumeration over the set of events for this contact.
            </summary>
            <returns>An enumerator for the set of opps.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunities.Refresh">
            <summary>
            Refreshes the set of events from the server.
            </summary>
            <remarks>Any changes to the set of events made by other users since the 
            contact was originaly load can be seen by refreshing the list.</remarks>
            <!-- No matching elements were found for the following include tag --><include file="ContactOpportunities.xml" path="Examples/Example[@name=&quot;ContactOpportunities.Refresh&quot;]/*"/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunities.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:EllieMae.EMLite.ClientServer.Contacts.Opportunity"/> from the set with the specified index.
            </summary>
            <example>
The following code queries for all Borrower Contacts that have loan opportunities
with amounts greater than $200,000. It then prints these contacts along with
the accompanying loan amount.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.Query;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the query criterion to find all borrower with loan opportunities
      // of at least $200K.
      NumericFieldCriterion cri = new NumericFieldCriterion("Opp.LoanAmount", 200000, 
         OrdinalFieldMatchType.GreaterThanOrEquals);
   
      // Perform the query
      ContactList contacts = session.Contacts.Query(cri, ContactLoanMatchType.None, ContactType.Borrower);

      // Display the loan amount for each opportunity along with the contact's name
      foreach (BorrowerContact contact in contacts)
      {
         Console.WriteLine(contact.FirstName + " " + contact.LastName + ":");
         
         for (int i = 0; i < contact.Opportunities.Count; i++)
         if (contact.Opportunities[i].LoanAmount >= 200000)
            Console.WriteLine("   Loan Amount: " + contact.Opportunities[i].LoanAmount);
      }
      
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunities.Count">
            <summary>
            Gets the number of opportunities in the set.
            </summary>
            <remarks>The present version of Encompass supports at most one Opportunity per
            Borrower Contact. Thus, this property will always return either 0 or 1.
            </remarks>
            <example>
The following code queries for all Borrower Contacts that have loan opportunities
with amounts greater than $200,000. It then prints these contacts along with
the accompanying loan amount.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.Query;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the query criterion to find all borrower with loan opportunities
      // of at least $200K.
      NumericFieldCriterion cri = new NumericFieldCriterion("Opp.LoanAmount", 200000, 
         OrdinalFieldMatchType.GreaterThanOrEquals);
   
      // Perform the query
      ContactList contacts = session.Contacts.Query(cri, ContactLoanMatchType.None, ContactType.Borrower);

      // Display the loan amount for each opportunity along with the contact's name
      foreach (BorrowerContact contact in contacts)
      {
         Console.WriteLine(contact.FirstName + " " + contact.LastName + ":");
         
         for (int i = 0; i < contact.Opportunities.Count; i++)
         if (contact.Opportunities[i].LoanAmount >= 200000)
            Console.WriteLine("   Loan Amount: " + contact.Opportunities[i].LoanAmount);
      }
      
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity">
            <summary>
            Represents a business opportunity with a borrower contact.
            </summary>
            <example>
The following code demonstrates how to add an Opportunity record to a 
Borrower Contact.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new contact
      BorrowerContact contact = (BorrowerContact) session.Contacts.CreateNew(ContactType.Borrower);

      // Set some basic properties
      contact.FirstName = "Mary";
      contact.LastName = "Jones";
      contact.HomePhone = "(555) 555-5555";
      contact.BorrowerType = BorrowerContactType.Propspect;

      // Save the contact before we attempt to create the opportunity
      contact.Commit();

      // Create an opportunity for the contact
      ContactOpportunity opp = contact.Opportunities.Add();

      opp.LoanAmount = 245000;
      opp.MortgageBalance = 255000;
      opp.MortgageRate = 6.75f;
      opp.EmploymentStatus = EmploymentStatus.Employed;
      opp.PropertyUse = PropertyUse.Primary;
      opp.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.IContactOpportunity">
            <summary>
            Interface for ContactOpportunity class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.Commit">
            <summary>
            Commits the opportunity to the server.
            </summary>
            <example>
The following code demonstrates how to add an Opportunity record to a 
Borrower Contact.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new contact
      BorrowerContact contact = (BorrowerContact) session.Contacts.CreateNew(ContactType.Borrower);

      // Set some basic properties
      contact.FirstName = "Mary";
      contact.LastName = "Jones";
      contact.HomePhone = "(555) 555-5555";
      contact.BorrowerType = BorrowerContactType.Propspect;

      // Save the contact before we attempt to create the opportunity
      contact.Commit();

      // Create an opportunity for the contact
      ContactOpportunity opp = contact.Opportunities.Add();

      opp.LoanAmount = 245000;
      opp.MortgageBalance = 255000;
      opp.MortgageRate = 6.75f;
      opp.EmploymentStatus = EmploymentStatus.Employed;
      opp.PropertyUse = PropertyUse.Primary;
      opp.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.Refresh">
            <summary>
            Refreshes the opportunity from the server.
            </summary>
            <remarks>Any changes to the object which has been made since the last
            call to <see cref="M:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.Commit"/> are discarded.</remarks>
            <example>
The following code demonstrates how to use the Refresh method to restore
the prior data to an opportunity.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Retrieve an existing contact from the server
      BorrowerContact contact = (BorrowerContact) session.Contacts.Open(209, ContactType.Borrower);

      // Retrieve the borrower's Opportunity
      ContactOpportunity opp = contact.Opportunities[0];

      // Change the loan amount on the opportunity
      opp.LoanAmount = opp.LoanAmount + 10000;
      
      // Refresh the opportunity to restore the original values
      opp.Refresh();

      // Print the Loan Amount -- it should reflect the value before we changed
      // it with the code above
      Console.WriteLine(opp.LoanAmount.ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.ID">
            <summary>
            The unique identifier for this Opportunity.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.LoanAmount">
            <summary>
            Gets or sets the loan amount for the opportunity.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.Purpose">
            <summary>
            Gets or sets the loan purpose.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.PurposeOther">
            <summary>
            Gets or sets the purpose of the loan when <see cref="F:EllieMae.Encompass.BusinessObjects.Contacts.LoanPurpose.Other"/>
            is selected for the <see cref="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.Purpose"/> field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.Term">
            <summary>
            Gets or sets the term, in months, of the proposed loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.Amortization">
            <summary>
            Getsor sets the amortization type of the proposed loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.DownPayment">
            <summary>
            Gets or sets the borrower's proposed down payment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.PropertyAddress">
            <summary>
            Gets the property address for which the borrower is seeking a mortgage.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.PropertyUse">
            <summary>
            Gets or sets the property use type for the borrower's property.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.PropertyType">
            <summary>
            Gets or sets the type of property being financed.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.PropertyValue">
            <summary>
            Gets or sets the estimated or actual value of the property.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.MortgageBalance">
            <summary>
            Gets or sets the borrower's current mortgage balance.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.MortgageRate">
            <summary>
            Gets or sets the borrower's current mortgage interest rate.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.HousingPayment">
            <summary>
            Gets or sets the borrower's current housing-related monthly payment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.NonHousingPayment">
            <summary>
            Gets or sets the borrower's current non-housing-related montly payments.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.PurchaseDate">
            <summary>
            Gets or sets the date on which the property was (or will be) purchased by the borrower.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.CreditRating">
            <summary>
            Gets or sets the borrower's credit score or rating.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.InBankruptcy">
            <summary>
            Gets or sets a flag indicating if the borrower is currenly in bankruptcy.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity.EmploymentStatus">
            <summary>
            Gets or sets the borrower's current employment status.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoanMatchType">
            <summary>
            A enumeration used for performing queries against the Encompass contacts database
            that allows filtering the set of contacts retrieved based on closed loans related to
            each contact.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoanMatchType.None">
            <summary>Do not consider related loans when performing the query.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoanMatchType.AnyCompleted">
            <summary>Specified criteria must match at least one closed loan for each returned contact.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoanMatchType.LastCompleted">
            <summary>Specified criteria must match the last closed loan for each returned contact.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoanMatchType.AnyOriginated">
            <summary>Specified criteria must match at least one origniated loan for each returned contact.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.ContactLoanMatchType.LastOriginated">
            <summary>Specified criteria must match the most recently originated loan for each returned contact.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactType">
            <summary>
            Enumeration of the types of contacts which reside in the Encompass Contacts database.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.ContactType.Borrower">
            <summary>A current, previous or potential borrower.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Contacts.ContactType.Biz">
            <summary>A business partner or contact.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.Contacts">
            <summary>
            Provides access to the contacts database within Encompass.
            </summary>
            <example>
The following code opens a Business Contact using the contact's ID. The 
contact is then modified and saved back to the server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open the contact specified on the command line
      Contact contact = session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      if (contact != null)
      {
         // Modify the contact's e-mail address and save back to the server
         contact.BizAddress.Street1 = "409 Kensington Ave.";
         contact.BizAddress.City = "Bethesda";
         contact.BizAddress.State = "MD";
         contact.BizAddress.Zip = "21107";
         contact.Commit();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Contacts.IContacts">
            <summary>
            Interface for Contacts class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.Contacts.Open(System.Int32,EllieMae.Encompass.BusinessObjects.Contacts.ContactType)">
            <summary>
            Opens an existing <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact">BizContact</see> or
            <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact">BorrowerContact</see> object.
            </summary>
            <param name="contactId">The ID of the contact to open.</param>
            <param name="type">The type of contact being retrieved.</param>
            <returns>The requested <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.Contact">Contact</see> object or
            null if the ID specified is invalid.</returns>
            <example>
The following code opens a Business Contact using the contact's ID. The 
contact is then modified and saved back to the server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open the contact specified on the command line
      Contact contact = session.Contacts.Open(int.Parse(args[0]), ContactType.Biz);

      if (contact != null)
      {
         // Modify the contact's e-mail address and save back to the server
         contact.BizAddress.Street1 = "409 Kensington Ave.";
         contact.BizAddress.City = "Bethesda";
         contact.BizAddress.State = "MD";
         contact.BizAddress.Zip = "21107";
         contact.Commit();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.Contacts.CreateNew(EllieMae.Encompass.BusinessObjects.Contacts.ContactType)">
            <summary>
            Creates a new <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact">BizContact</see> or
            <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact">BorrowerContact</see> object.
            </summary>
            <param name="type">The type of contact being created.</param>
            <remarks>The returned object is not yet committed to the database.
            To save the contact, update the properties as necessary and call <c>Commit()</c></remarks>
            <returns>A new <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.Contact">Contact</see> object.</returns>
            <example>
The following code creates a new Business Contact, populates it contact
information and commits it to the server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open the contact specified on the command line
      Contact contact = session.Contacts.CreateNew(ContactType.Biz);

      // Set the contact's personal infomation
      contact.FirstName = "Allison";
      contact.LastName = "Meriwether";
      contact.BizEmail = "allison@somecompany.com";
      
      // Set the Business Category
      BizContact biz = (contact as BizContact);
      biz.Category = session.Contacts.BizCategories.GetItemByName("Appraiser");

      // Save to the server
      contact.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.Contacts.Delete(System.Int32,EllieMae.Encompass.BusinessObjects.Contacts.ContactType)">
            <summary>
            Deletes an existing <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact">BizContact</see> or
            <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact">BorrowerContact</see> object.
            </summary>
            <param name="type">The type of contact being deleted.</param>
            <param name="contactId">The ID of the contact to delete.</param>
            <remarks>In order to delete a BorrowerContact, the currently logged in
            user must be an administrator or must own the specified contact.</remarks>
            <example>
The following code deletes a Business Contact from the contact database
by specifying his contact ID directly.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Parse the contact ID
      int contactId = int.Parse(args[0]);

      // Open the contact specified on the command line
      session.Contacts.Delete(contactId, ContactType.Biz);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.Contacts.Query(EllieMae.Encompass.Query.QueryCriterion,EllieMae.Encompass.BusinessObjects.Contacts.ContactLoanMatchType,EllieMae.Encompass.BusinessObjects.Contacts.ContactType)">
            <summary>
            Executes a query to select a subset of the business contacts that match
            the specified citeria.
            </summary>
            <param name="criterion">The criterion to use to perform the query. This
            can be a single criterion or a logical combination of objects which
            implement the IQueryCriterion interface.</param>
            <param name="loanMatchType">The types of related loans that should
            be considered when performing this query. This parameters allows you
            to locate all contacts who satisfy certain loan-related criteria.</param>
            <param name="type">The type of contacts being queried.</param>
            <returns>The list of <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.Contact">Contact</see> objects that 
            matched the specified criteria.
            </returns>
            <remarks>When querying for BorrowerContacts, a non-administrative user will
            only be able to see those contacts which are assigned to him. An administrative user,
            however, is able to query against the set of all contacts.
            </remarks>
            <example>
The following code queries the Borrower Contacts for all borrowers who
have closed a loan exceeding $200,000 within the current year.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the criterion for the loan amount (>= $200,000)
      NumericFieldCriterion amtCriterion = new NumericFieldCriterion();
      amtCriterion.FieldName = "RelatedLoan.LoanAmount";
      amtCriterion.Value = 200000;
      amtCriterion.MatchType = OrdinalFieldMatchType.GreaterThanOrEquals;

      // Create the criterion for the loan completion date in the current year
      DateFieldCriterion closedCriterion = new DateFieldCriterion();
      closedCriterion.FieldName = "RelatedLoan.DateCompleted";
      closedCriterion.Value = DateTime.Now;
      closedCriterion.MatchType = OrdinalFieldMatchType.Equals;
      closedCriterion.Precision = DateFieldMatchPrecision.Year;

      // Join the two criteria together with an AND
      QueryCriterion jointCriterion = amtCriterion.And(closedCriterion);

      // Execute the query agains the Borrowers
      ContactList contacts = session.Contacts.Query(jointCriterion, ContactLoanMatchType.Any, ContactType.Borrower);

      // Dump all of the contacts that matched
      for (int i = 0; i < contacts.Count; i++)
         Console.WriteLine(contacts[i].FirstName + " " + contacts[i].LastName);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.Contacts.QueryCursor(EllieMae.Encompass.Query.QueryCriterion,EllieMae.Encompass.BusinessObjects.Contacts.ContactLoanMatchType,EllieMae.Encompass.Collections.SortCriterionList,EllieMae.Encompass.BusinessObjects.Contacts.ContactType)">
            <summary>
            Executes a query and returns the result in a <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactCursor"/> for
            optimal performance.
            </summary>
            <param name="criterion">The criterion to use to perform the query. This
            can be a single criterion or a logical combination of objects which
            implement the IQueryCriterion interface.</param>
            <param name="loanMatchType">The types of related loans that should
            be considered when performing this query. This parameters allows you
            to locate all contacts who satisfy certain loan-related criteria.</param>
            <param name="sortCriteria">The sort criteria to be used to sort the
            contacts. A <c>null</c> value (<c>Nothing</c> in Visual Basic) can be passed 
            to specify that no sort be applied.</param>
            <param name="type">The type of contacts being queried.</param>
            <returns>The list of <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.Contact">Contact</see> objects that 
            matched the specified criteria.
            </returns>
            <remarks>A cursor represents a server-side resource that consumes memory
            on the Encompass Server. To release this memory, be sure to call the cursor's
            Close() method when the cursor is no longer needed.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.Contacts.GetAll(EllieMae.Encompass.BusinessObjects.Contacts.ContactType)">
            <summary>
            Returns a list of all <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact">BizContact</see> or
            <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact">BorrowerContact</see> objects defined
            in the Contact Database.
            </summary>
            <param name="type">The type of contacts being retrieved.</param>
            <returns>When the <c>type</c> parameter is Borrower and the currently logged in
            user is not an administrator, this function returns the list of only those business contacts
            assigned to that user. In all other cases, this function will return all available
            contacts of the specified type.</returns>
            <example>
The following code retrieves a list of all of the Business Contacts in
the contacts database.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the list of Business contacts from the server
      ContactList contacts = session.Contacts.GetAll(ContactType.Biz);

      for (int i = 0; i < contacts.Count; i++)
         Console.WriteLine(contacts[i].FirstName + " " + contacts[i].LastName);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Contacts.Contacts.OpenCursor(EllieMae.Encompass.Collections.SortCriterionList,EllieMae.Encompass.BusinessObjects.Contacts.ContactType)">
            <summary>
            Opens a <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactCursor"/> that contains all contacts for the current
            user.
            </summary>
            <param name="sortCriteria">The sort criteria to be used to sort the
            contacts. A <c>null</c> value (<c>Nothing</c> in Visual Basic) can be passed 
            to specify that no sort be applied.</param>
            <param name="type">The type of contacts being queried.</param>
            <returns>A cursor containing the <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.Contact">Contact</see> objects 
            to which the user has access.
            </returns>
            <remarks>A cursor represents a server-side resource that consumes memory
            on the Encompass Server. To release this memory, be sure to call the cursor's
            Close() method when the cursor is no longer needed.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Contacts.Contacts.BizCategories">
            <summary>
            Returns the enumeration of all defined <see cref="T:EllieMae.Encompass.BusinessEnums.BizCategory">BizCategory</see>
            objects.
            </summary>
            <example>
The following code creates a new Business Contact, populates it contact
information and commits it to the server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open the contact specified on the command line
      Contact contact = session.Contacts.CreateNew(ContactType.Biz);

      // Set the contact's personal infomation
      contact.FirstName = "Allison";
      contact.LastName = "Meriwether";
      contact.BizEmail = "allison@somecompany.com";
      
      // Set the Business Category
      BizContact biz = (contact as BizContact);
      biz.Category = session.Contacts.BizCategories.GetItemByName("Appraiser");

      // Save to the server
      contact.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.DataObject">
            <summary>
            Represents a generic data object.
            </summary>
            <remarks>This object can be a binary or text data object.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.IDataObject">
            <summary>
            Represents the interface for the DataObject object.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.DataObject.#ctor">
            <summary>
            Creates an empty DataObject.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.DataObject.#ctor(System.Byte[])">
            <summary>
            Constructor to create a DataObject from a byte array.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.DataObject.#ctor(System.String)">
            <summary>
            Creates a new DataObject from a file on disk.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.DataObject.#ctor(System.IO.Stream)">
            <summary>
            Creates a new DataObject by reading in the data from a Stream.
            </summary>
            <param name="stream">The stream to be read. The data will be read until the end
            of the stream is reached.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.DataObject.ToString(System.Text.Encoding)">
            <summary>
            Converts the data object to a string using the specified character encoding.
            </summary>
            <param name="encoding">The character encoding to be used for converting the binary object to text.</param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.DataObject.OpenStream">
            <summary>
            Returns an open stream for the data object.
            </summary>
            <returns>An open stream set to the first byte of the object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.DataObject.SaveToDisk(System.String)">
            <summary>
            Saves the object to the specified file location.
            </summary>
            <param name="filePath">The path of the file to be written.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.DataObject.Load(System.Byte[])">
            <summary>
            Loads a new data array into the object.
            </summary>
            <param name="data">The byte data to load.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.DataObject.LoadFile(System.String)">
            <summary>
            Loads the object from a file on disk.
            </summary>
            <param name="filePath">The path of the source file.</param>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.DataObject.Size">
            <summary>
            Gets the size of the object in bytes.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.DataObject.Data">
            <summary>
            Gets the udnerlying byte data from the object.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.IPersistentObjectEvents">
            <summary>
            An interface which allows COM clients to attach to events raised by the 
            persistent objects within the API.
            </summary>
            <exclude/>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment">
            <summary>
            Represents a document or image attached to the current loan.
            </summary>
            <remarks>Every <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Attachment.Loan"/> is capable of having any number of electronic
            document attachments associated with in via the eFolder in Encompass. Attachments
            can be created in a number of ways: scanning documents into Encompass, receipt of
            a fax via the Encompass Electronic Document Management feature, by conducting
            an ePASS transaction such as requesting a credit report, direct attachment
            via the Encompass UI or import through the API.
            <p>Once an attachment is added to the loan, it can be associated with a 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/>. Once attached to a document, you can retrieve
            this document using the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Attachment.GetDocument"/> method.</p>
            </remarks>
            <example>
The following code demonstrates how to extract all of the attachments from
a loan and save them to a directory on the local disk.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Iterate over the list of attachments, saving them to the C:\Temp folder
      foreach (Attachment att in loan.Attachments)
         att.SaveToDisk("C:\\Temp\\" + att.Name);

      // Close the loan, discarding all of our changes
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IAttachment">
            <summary>
            Interface for Attachment class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Attachment.SaveToDisk(System.String)">
            <summary>
            Saves the attachment to a particular path.
            </summary>
            <param name="path">The path, including file name, to which to save the attachment.
            </param>
            <example>
The following code demonstrates how to extract all of the attachments from
a loan and save them to a directory on the local disk.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Iterate over the list of attachments, saving them to the C:\Temp folder
      foreach (Attachment att in loan.Attachments)
         att.SaveToDisk("C:\\Temp\\" + att.Name);

      // Close the loan, discarding all of our changes
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Attachment.SaveToDiskOriginal(System.String)">
            <summary>
            Saves the converted image attachment to a particular path in its original format.
            </summary>
            <param name="path">The path, including file name, to which to save the attachment.</param>
            <remarks>
            Throws an exception if the attachment was added as an image attachment but the option to keep the original was not selected.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Attachment.GetDocument">
            <summary>
            Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/> to which the attachment is
            attached.
            </summary>
            <returns>Return the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/> to which the
            current attachment is attached, or <c>null</c> if this attachment is not
            attached to any document.</returns>
            <remarks>To attach an Attachment to a TrackedDocument, use the 
            <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.Attach(EllieMae.Encompass.BusinessObjects.Loans.Attachment)"/> method.</remarks>
            <example>
The following code extracts displays the names of all TrackedDocuments that
have at least one PDF-type attachment.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Fetch all of the attachments with PDF extensions
      foreach (Attachment att in loan.Attachments)
      {
         if (att.Name.ToLower().EndsWith(".pdf"))
         {
            // Determine the document to which it is attached, if any
            TrackedDocument doc = att.GetDocument();

            if (doc != null)
               Console.WriteLine("The document '" + doc.Title + "' has a PDF attachment.");
         }
      }

      // Close the loan, discarding all of our changes
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Attachment.ToString">
            <summary>
            Provides a string representation of the Attachment, which is the attachment's
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Attachment.Name"/>.
            </summary>
            <returns>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Attachment.Name"/> of the attachment.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Attachment.Refresh">
            <summary>
            Refreshes the data of the attachment to ensure any changes have been read in.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Attachment.getLinkedDocument">
            <summary>
            Retrieves the Linked Doc for the current Attachment object
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Attachment.DownloadThumbnails">
            <summary>
            Download the thumbnail images of this attachment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Attachment.Name">
            <summary>
            Gets the unique name of the attachment.
            </summary>
            <remarks>The Name of an attachment is unique within the loan and does
            not represent the name file that was originally imported into Encompass.
            The name can be used as a file name when saving the document to disk and
            includes the correct extension for its document type (e.g. a PDF document's
            Name will end in ".pdf").</remarks>
            <example>
The following code demonstrates how to extract all of the attachments from
a loan and save them to a directory on the local disk.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Iterate over the list of attachments, saving them to the C:\Temp folder
      foreach (Attachment att in loan.Attachments)
         att.SaveToDisk("C:\\Temp\\" + att.Name);

      // Close the loan, discarding all of our changes
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Attachment.Size">
            <summary>
            Gets the size of the attachment, in bytes.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Attachment.SizeOriginal">
            <summary>
            Gets the size of the original non-converted attachment, in bytes.
            </summary>
            <remarks>
            If the attachment was not added as an image attachment this will be the same as <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Attachment.Size"/>.
            Throws an exception if the attachment was added as an image attachment but the option to keep the original was not selected.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Attachment.Data">
            <summary>
            Returns the data from the attachment as a byte array.
            </summary>
            <example>
The following code extracts the attachments from all Appraisals in the
loan and posts them to a remote URL.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Get all Appraisals from the TrackedDocument list
      LogEntryList appraisals = loan.Log.TrackedDocuments.GetDocumentsByTitle("Appraisal");

      // Post every page of every attachment to a URL on the web
      foreach (TrackedDocument appraisal in appraisals)
         foreach (Attachment att in appraisal.GetAttachments())
         {
            System.Net.WebClient wc = new System.Net.WebClient();
            wc.UploadData("https://myserver.com/postdocument.aspx", att.Data);
         }

      // Close the loan, discarding all of our changes
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Attachment.DataOriginal">
            <summary>
            Returns the data from the original non-converted attachment as a byte array.
            </summary>
            <remarks>
            If the attachment was not added as an image attachment this will be the same as <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Attachment.Data"/>.
            Throws an exception if the attachment was added as an image attachment but the option to keep the original was not selected.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Attachment.Title">
            <summary>
            Gets or sets the title of the Attachment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Attachment.Date">
            <summary>
            Gets the date the attachment was added to the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Attachment.IsActive">
            <summary>
            Gets or sets whether the Attachment is active
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Attachment.IsImageAttachment">
            <summary>
            Returns whether the Attachment is an ImageAttachment
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Attachment.PageImages">
            <summary>
            Returns the list of pages associated with this image attachment
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.AuditTrailEntry">
            <summary>
            Represents a single entry in an audit trail.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IAuditTrailEntry">
            <summary>
            Interface for AuditTrailEntry class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.AuditTrailEntry.Timestamp">
            <summary>
            Gets the date and time of the change to the field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.AuditTrailEntry.UserID">
            <summary>
            Gets the User ID of the user who modified this field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.AuditTrailEntry.UserFirstName">
            <summary>
            Gets the first name of the user who modified this field.
            </summary>
            <remarks>This value will represent the user's name at the time the audit record 
            was recorded.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.AuditTrailEntry.UserLastName">
            <summary>
            Gets the first name of the user who modified this field.
            </summary>
            <remarks>This value will represent the user's name at the time the audit record 
            was recorded.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.AuditTrailEntry.UserName">
            <summary>
            Gets the first name of the user who modified this field.
            </summary>
            <remarks>This value will represent the user's name at the time the audit record 
            was recorded.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.AuditTrailEntry.Field">
            <summary>
            Returns the Field information for the specified audit record.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ReadOnlyField">
            <summary>
            Represents a simple, read-only field value.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Field">
            <summary>
            Abstract base class for fields in the loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IField">
            <summary>
            Interface for LoanField class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Field.setFieldValue(System.String)">
            <summary>
            Abstract method for setting the value of the field.
            </summary>
            <param name="value">The formatted value of the field</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Field.IsEmpty">
            <summary>
            Determines if the field is empty.
            </summary>
            <returns>Returns <c>true</c> if the field is unset, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Field.ToString">
            <summary>
            Provides a string representation of the value in the field.
            </summary>
            <returns>Returns the value of the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Field.Value"/> property.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Field.ToInt">
            <summary>
            Provides a decimal representation of the value in the field.
            </summary>
            <returns>Returns the numeric equivalent of the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Field.Value"/> property,
            or 0 if the value cannot be converted to a Decimal.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Field.ToDecimal">
            <summary>
            Provides a decimal representation of the value in the field.
            </summary>
            <returns>Returns the numeric equivalent of the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Field.Value"/> property,
            or 0 if the value cannot be converted to a Decimal.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Field.ToDate">
            <summary>
            Provides a date/time representation of the value in the field.
            </summary>
            <returns>Returns the numeric equivalent of the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Field.Value"/> property,
            or <c>DateTime.MinValue</c> if the value cannot be converted to a DateTime.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Field.ID">
            <summary>
            Gets the Ellie Mae ID of the field within the loan file.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Field.Format">
            <summary>
            Gets the format which should be applied to the field for display to the user.
            </summary>
            <example>
The following code demonstrates how the properties of a LoanField are
affected by locking and calculations.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Set the base loan amount and appraised value of the home
      loan.Fields["1109"].Value = "250000";    // Loan amount, excluding fees
      loan.Fields["136"].Value = "370000";     // Purchase price
      loan.Fields["356"].Value = "375000";     // Appraised amount
      loan.Recalculate();

      // Get the LTV field for the loan (field ID 353)
      LoanField ltv = loan.Fields["353"];

      // Print out the properties of the field
      dumpLoanField(ltv);

      // Generally, the LTV field would be unlocked, so we'll lock it will no 
      // longer be affected by calculations.
      ltv.Locked = true;
      ltv.Value = "0.75";
      dumpLoanField(ltv);

      // Reclaculate and dump it again. The Value will not have change but the 
      // OriginalValue field will reflect the correctly calculated LTV.
      loan.Recalculate();
      dumpLoanField(ltv);

      // Unlock the field and recalculate. The calculated LTV will now overwrite the
      // value we explicitly set above.
      ltv.Locked = false;
      loan.Recalculate();
      dumpLoanField(ltv);

      // Close the loan to release its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }

   // Dumps the properties of a loan field
   private static void dumpLoanField(LoanField field)
   {
      Console.WriteLine("Formatted Value:   " + field.Value);
      Console.WriteLine("Unformatted Value: " + field.UnformattedValue);
      Console.WriteLine("Original Value:    " + field.OriginalValue);
      Console.WriteLine("Format:            " + field.Format);
      Console.WriteLine("Locked:            " + field.Locked);
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Field.UnformattedValue">
            <summary>
            Gets the raw, unformatted value of the underlying field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Field.FormattedValue">
            <summary>
            Gets the formatted value of the underlying field.
            </summary>
            <returns>This method returns the field value in a formatted form, i.e. in a manner suitable
            for display to a user.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Field.Value">
            <summary>
            Gets or sets the value of the underlying field in the field's native format.
            </summary>
            <remarks>If the field is unset, this function will return <c>null</c>, except in
            the case of string-valued fields for which the property will return the empty string. 
            If the field is set, a conversion will occur to its underlying data type (Int32, Decimal, Date or String)
            and the resulting value will be returned.
            </remarks>
            <example>
The following code demonstrates how the properties of a LoanField are
affected by locking and calculations.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Set the base loan amount and appraised value of the home
      loan.Fields["1109"].Value = "250000";    // Loan amount, excluding fees
      loan.Fields["136"].Value = "370000";     // Purchase price
      loan.Fields["356"].Value = "375000";     // Appraised amount
      loan.Recalculate();

      // Get the LTV field for the loan (field ID 353)
      LoanField ltv = loan.Fields["353"];

      // Print out the properties of the field
      dumpLoanField(ltv);

      // Generally, the LTV field would be unlocked, so we'll lock it will no 
      // longer be affected by calculations.
      ltv.Locked = true;
      ltv.Value = "0.75";
      dumpLoanField(ltv);

      // Reclaculate and dump it again. The Value will not have change but the 
      // OriginalValue field will reflect the correctly calculated LTV.
      loan.Recalculate();
      dumpLoanField(ltv);

      // Unlock the field and recalculate. The calculated LTV will now overwrite the
      // value we explicitly set above.
      ltv.Locked = false;
      loan.Recalculate();
      dumpLoanField(ltv);

      // Close the loan to release its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }

   // Dumps the properties of a loan field
   private static void dumpLoanField(LoanField field)
   {
      Console.WriteLine("Formatted Value:   " + field.Value);
      Console.WriteLine("Unformatted Value: " + field.UnformattedValue);
      Console.WriteLine("Original Value:    " + field.OriginalValue);
      Console.WriteLine("Format:            " + field.Format);
      Console.WriteLine("Locked:            " + field.Locked);
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Field.EllieMae#Encompass#BusinessObjects#Loans#IField#Value">
            <summary>
            Gets or sets the value of the field thru the ILoanField interface.
            </summary>
            <remarks>This method exists primarilly for COM-based clients which cannot marshal values
            properly to the object-valued Value property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Field.Descriptor">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor"/> for the field.
            </summary>
            <returns>Returns the FieldDesciptor for this field</returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IReadOnlyField">
            <summary>
            Interface for LoanField class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.ReadOnlyField.setFieldValue(System.String)">
            <summary>
            Sets the value of the field in the snapshot.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.ReadOnlyField.UnformattedValue">
            <summary>
            Override the Unformatted value to return the value of the lock request field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.ReadOnlyField.EllieMae#Encompass#BusinessObjects#Loans#IReadOnlyField#Value">
            <summary>
            Gets or sets the value of the field thru the ILockRequestField interface.
            </summary>
            <remarks>This method exists primarilly for COM-based clients which cannot marshal values
            properly to the object-valued Value property.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Borrower">
            <summary>
            Represents a single borrower within a loan file. Borrowers always exist as part of
            a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair">BorrowerPair</see>.
            </summary>
            <example>
The following code demonstrates how different borrower pairs can be accessed
when attached to a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Loop over the BorrowerPairs, printing their names
      foreach (BorrowerPair pair in loan.BorrowerPairs)
      {
         Console.WriteLine("Borrower First Name:   " + pair.Borrower.FirstName);
         Console.WriteLine("Borrower Last Name:    " + pair.Borrower.LastName);
         Console.WriteLine("CoBorrower First Name: " + pair.CoBorrower.FirstName);
         Console.WriteLine("CoBorrower Last Name:  " + pair.CoBorrower.LastName);
      }
      
      // Close the loan, discarding all of our changes
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IBorrower">
            <summary>
            Interface for Borrower class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Borrower.ToString">
            <summary>
            Provides a string representation of the object.
            </summary>
            <returns>The borrower full name (first and last)</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Borrower.Equals(System.Object)">
            <summary>
            Compares two Borrower objects to determine if they are the same.
            </summary>
            <param name="obj">The Borrower to compare to the current object.</param>
            <returns><c>true</c> if the Borrower objects represent the same borrower, 
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Borrower.GetHashCode">
            <summary>
            Provides a hash code for the borrower.
            </summary>
            <returns>The has code of the borrower's ID.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Borrower.op_Equality(EllieMae.Encompass.BusinessObjects.Loans.Borrower,EllieMae.Encompass.BusinessObjects.Loans.Borrower)">
            <summary>
            Equality comparison for two Borrower objects.
            </summary>
            <param name="borA">The first Borrower to compare.</param>
            <param name="borB">The second Borrower to compare.</param>
            <returns><c>true</c> if the Borrower objects represent the same borrower, 
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Borrower.op_Inequality(EllieMae.Encompass.BusinessObjects.Loans.Borrower,EllieMae.Encompass.BusinessObjects.Loans.Borrower)">
            <summary>
            Inequality operator for two Borrower objects.
            </summary>
            <param name="borA">The first Borrower to compare.</param>
            <param name="borB">The second Borrower to compare.</param>
            <returns><c>false</c> if the Borrower objects represent the same borrower, 
            <c>true</c> otherwise.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Borrower.FirstName">
            <summary>
            Gets the borrower's first name.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Borrower.LastName">
            <summary>
            Gets the borrower's last name.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Borrower.ID">
            <summary>
            Gets a unique identifier for this borrower within the current loan file.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair">
            <summary>
            Represents a borrower/coborrower pair within a loan file.
            </summary>
            <example>
The following code demonstrates how different borrower pairs can be accessed
when attached to a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Loop over the BorrowerPairs, printing their names
      foreach (BorrowerPair pair in loan.BorrowerPairs)
      {
         Console.WriteLine("Borrower First Name:   " + pair.Borrower.FirstName);
         Console.WriteLine("Borrower Last Name:    " + pair.Borrower.LastName);
         Console.WriteLine("CoBorrower First Name: " + pair.CoBorrower.FirstName);
         Console.WriteLine("CoBorrower Last Name:  " + pair.CoBorrower.LastName);
      }
      
      // Close the loan, discarding all of our changes
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IBorrowerPair">
            <summary>
            Interface for BorrowerPair class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair.ToString">
            <summary>
            Provides a string representation of the object.
            </summary>
            <returns>The first and last names of the two borrowers separated by a forward slash.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair.Equals(System.Object)">
            <summary>
            Determines if the current BorrowerPair represents the same pair as another object.
            </summary>
            <param name="obj">The BorrowerPair to which to compare the current object.</param>
            <returns><c>true</c> if the two BorrowerPair objects are equivalent,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair.GetHashCode">
            <summary>
            Provides a has code for the BorrowerPair.
            </summary>
            <returns>A hash code generated from the IDs of the borrower and coborrower.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair.op_Equality(EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair,EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair)">
            <summary>
            Compares two BorrowerPair objects for equivalence.
            </summary>
            <remarks>Two BorrowerPairs are considered equivalent if and only if the
            IDs of the borrower and coborrower contained in each are the same.</remarks>
            <param name="pairA">The first BorrowerPair to compare.</param>
            <param name="pairB">The second BorrowerPair to compare.</param>
            <returns><c>true</c> if the two BorrowerPair objects are equivalent,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair.op_Inequality(EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair,EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair)">
            <summary>
            Compares two BorrowerPair objects for equivalence.
            </summary>
            <remarks>Two BorrowerPairs are considered equivalent if and only if the
            IDs of the borrower and coborrower contained in each are the same.</remarks>
            <param name="pairA">The first BorrowerPair to compare.</param>
            <param name="pairB">The second BorrowerPair to compare.</param>
            <returns><c>false</c> if the two BorrowerPair objects are equivalent,
            <c>true</c> otherwise.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair.Borrower">
            <summary>
            Gets the primary borrower for the borrower pair.
            </summary>
            <example>
The following code demonstrates how different borrower pairs can be accessed
when attached to a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Loop over the BorrowerPairs, printing their names
      foreach (BorrowerPair pair in loan.BorrowerPairs)
      {
         Console.WriteLine("Borrower First Name:   " + pair.Borrower.FirstName);
         Console.WriteLine("Borrower Last Name:    " + pair.Borrower.LastName);
         Console.WriteLine("CoBorrower First Name: " + pair.CoBorrower.FirstName);
         Console.WriteLine("CoBorrower Last Name:  " + pair.CoBorrower.LastName);
      }
      
      // Close the loan, discarding all of our changes
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair.CoBorrower">
            <summary>
            Gets the secondary borrower for the borrower pair.
            </summary>
            <example>
The following code demonstrates how different borrower pairs can be accessed
when attached to a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Loop over the BorrowerPairs, printing their names
      foreach (BorrowerPair pair in loan.BorrowerPairs)
      {
         Console.WriteLine("Borrower First Name:   " + pair.Borrower.FirstName);
         Console.WriteLine("Borrower Last Name:    " + pair.Borrower.LastName);
         Console.WriteLine("CoBorrower First Name: " + pair.CoBorrower.FirstName);
         Console.WriteLine("CoBorrower Last Name:  " + pair.CoBorrower.LastName);
      }
      
      // Close the loan, discarding all of our changes
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
            <remarks>This value may be <c>null</c> if no coborrower is assigned to the loan.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat">
            <summary>
            A enumeration that defines the possible field formats for a loan field.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.STRING">
            <summary>Generic string format (i.e. unformatted)</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.YN">
            <summary>Yes/No boolean value</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.X">
            <summary>X/(blank) boolean value</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.ZIPCODE">
            <summary>Zip code (XXXXX-XXXX)</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.STATE">
            <summary>Two-character state value</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.PHONE">
            <summary>Phone number format</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.SSN">
            <summary>Social Security number format (XXX-XX-XXXX)</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.TRACKING">
            <summary>Tracking number format</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.INTEGER">
            <summary>Integer value format (X,XXX)</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.DECIMAL_1">
            <summary>Decimal value format with 1 decimal place (X,XXX.0)</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.DECIMAL_2">
            <summary>Decimal value format with 2 decimal places (X,XXX.00)</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.DECIMAL_3">
            <summary>Decimal value format with 3 decimal places (X,XXX.000)</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.DECIMAL_4">
            <summary>Decimal value format with 4 decimal places (X,XXX.0000)</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.DECIMAL_5">
            <summary>Decimal value format with 5 decimal places (X,XXX.000000)</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.DECIMAL_6">
            <summary>Decimal value format with 6 decimal places (X,XXX.000000)</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.DECIMAL_7">
            <summary>Decimal value format with 7 decimal places (X,XXX.0000000)</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.DECIMAL_10">
            <summary>Decimal value format with 10 decimal places (X,XXX.0000000000)</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.DECIMAL">
            <summary>Unformatted decimal value format</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.DATE">
            <summary>Date value (no time)</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.TIME">
            <summary>Time value</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.MONTHDAY">
            <summary>Month and day value only (MM/dd)</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.DROPDOWN">
            <summary>Text value which is selected from a dropdown or entered manually.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.DROPDOWNLIST">
            <summary>Text value which must be selected selected from a list of predefined values.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.AUDIT">
            <summary>An audit field for tracing the changes to another field.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldFormat.NONE">
            <summary>Unformatted</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.FieldChangeEventHandler">
            <summary>
            Delegate for the Loan's FieldChange event.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.FieldChangeEventArgs">
            <summary>
            Event arguments for the FieldChange loan event.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LogEntryEventHandler">
            <summary>
            Delegate for the Loan's LogEntry-related events.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LogEntryEventArgs">
            <summary>
            Event arguments for the LogEntry-related loan events.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.MilestoneEventHandler">
            <summary>
            Delegate for the Loan's MilestoneEvent-related events.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.MilestoneEventArgs">
            <summary>
            Event arguments for the MilestoneEvent-related loan events.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.CancelableMilestoneEventHandler">
            <summary>
            Delegate for the Loan's MilestoneEvent-related events.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.CancelableMilestoneEventArgs">
            <summary>
            Event arguments for the MilestoneEvent-related loan events.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.CancelableEventHandler">
            <summary>
            Delegate for the Loan's MilestoneEvent-related events.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.CancelableEventArgs">
            <summary>
            Event arguments for the MilestoneEvent-related loan events.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.CancelableEventArgs.Loan">
            <summary>
            Gets the affected Loan object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.CancelableEventArgs.Cancel">
            <summary>
            Gets or sets a flag to cancel the operation.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.MultiInstanceSpecifierType">
            <summary>
            Indicates the type of object used to specify an instance of a multi-instance field.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.MultiInstanceSpecifierType.None">
            <summary>Indictes the field is not multi-instance.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.MultiInstanceSpecifierType.Index">
            <summary>Instances are sepcified using a numeric index.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.MultiInstanceSpecifierType.Role">
            <summary>Instances are sepcified using a role name, e.g. "Loan Officer".</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.MultiInstanceSpecifierType.Milestone">
            <summary>Instances are sepcified using a milestone name, e.g. "Started".</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.MultiInstanceSpecifierType.Document">
            <summary>Instances are sepcified using a tracked document name, e.g. "Credit Report".</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.MultiInstanceSpecifierType.UnderwritingCondition">
            <summary>Instances are sepcified using an underwriting condition name, e.g. "Pay Stubs".</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.MultiInstanceSpecifierType.PostClosingCondition">
            <summary>Instances are sepcified using a post-closing condition name, e.g. "HMDA Report".</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.MultiInstanceSpecifierType.MilestoneTask">
            <summary>Instances are sepcified using a milestone task name, e.g. "Pull Credit".</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor">
            <summary>
            Summary description for FieldDescriptor.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IFieldDescriptor">
            <summary>
            Interface for FieldDescriptor class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.IsNumeric">
            <summary>
            Indicates if the underlying value type is numeric (integer or decimal).
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.IsDateValued">
            <summary>
            Indicates if the underlying value type is numeric (integer or decimal).
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.GetFieldInstanceID(System.Object)">
            <summary>
            Returns the Field ID for a particular instance of a multi-instance field.
            </summary>
            <param name="instanceIndexOrSpecifier">The index or other specifier type to indicate
            the desired instance of a multi-instance field.</param>
            <returns>This method can only be called if the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.MultiInstance"/> property
            is <c>true</c>.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.GetInstanceDescriptor(System.Object)">
            <summary>
            Returns a FieldDescriptor for a single instance of a multi-instance field.
            </summary>
            <param name="instanceIndexOrSpecifier">The index or other specifier type to indicate
            the desired instance of a multi-instance field.</param>
            <returns>A FieldDescriptor for the field instance.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.AppliesToEdition(EllieMae.Encompass.Client.EncompassEdition)">
            <summary>
            Indicates if the specified field is available in the specified edition of Encompass.
            </summary>
            <param name="edition">The <see cref="T:EllieMae.Encompass.Client.EncompassEdition"/> for which the applicability is to be tested.</param>
            <returns>Returns <c>true</c> if the field is applicable, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.ToString">
            <summary>
            Provides a string representation of the field descriptor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.Equals(System.Object)">
            <summary>
            Checkes for equality between two field descriptors using their Field IDs.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.GetHashCode">
            <summary>
            Provides a hash code for the Field Descriptor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.CompareTo(System.Object)">
            <summary>
            Provides a comparison between field descriptors for sorting based on the field ID.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.FormatValue(System.String)">
            <summary>
            Applies the field's formatting to a value.
            </summary>
            <param name="value"></param>
            <returns>Returns the value properly formatted for display based on the field type.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.UnformatValue(System.String)">
            <summary>
            Removes field formatting from a string.
            </summary>
            <param name="value">The value to be unformatted.</param>
            <returns>Returns the value stripped of all formatting characters.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.ConvertToNativeType(System.String)">
            <summary>
            Converts a string value into a type based on the field's <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.Format"/>.
            </summary>
            <param name="value">The string value to convert.</param>
            <returns>Returns a value of the type specified by the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.Format"/> (Int32, Decimal,
            DateTime or String). If the value cannot be converted to the native type, a <c>null</c> value
            is returned.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.ValidateInput(System.String)">
            <summary>
            Validates that an input string is consistent with the field format.
            </summary>
            <param name="value">The value to validate</param>
            <returns>A re-formatted value that can be saved into the underlying loan.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.CreateUndefined(System.String)">
            <summary>
            Allows for creation of a field descriptor. This method is meant for internal use within
            the Encompass application framework only.
            </summary>
            <param name="fieldId"></param>
            <returns></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.FieldID">
            <summary>
            Returns the ID of the field for which this is the descriptor.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.Format">
            <summary>
            Returns the format of the underlying field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.Description">
            <summary>
            Provides a text description of the field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.Options">
            <summary>
            Gets the set of pre-defined options for this field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.MaxLength">
            <summary>
            Gets the maximum length for string-based fields.
            </summary>
            <remarks>A value of 0 means there is no maximum length.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.ReadOnly">
            <summary>
            Gets a flag indicating if this field value cannot only be read through the API.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.RequiresExclusiveLock">
            <summary>
            Gets a flag indicating if you must have an exclusive lock on the loan to modify the field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.MultiInstance">
            <summary>
            Indicates if this field is a multi-instance field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.InstanceSpecifierType">
            <summary>
            Gets the type of selected used to create an instance of a multi-instance field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.InstanceSpecifier">
            <summary>
            Gets the instance specifier for the current field, if this is an instance of a multi-instance
            field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.IsInstance">
            <summary>
            Indicates if the descriptor is an instance of a multi-instance field descriptor.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.ParentDescriptor">
            <summary>
            Gets the parent field descriptor for a multi-instance field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.IsCustomField">
            <summary>
            Indicates if this field is a custom field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor.IsVirtualField">
            <summary>
            Indicates if this field is a virtual field.
            </summary>
            <remarks>A virtual field is a means of using a Field ID to access data that is
            not field data, such as Document Tracking or Milestone data. All Virtual fields are
            read-only.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptors">
            <summary>
            Summary description for FieldDescriptorCollection.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IFieldDescriptors">
            <summary>
            Interface for FieldDescriptors class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptors.Contains(System.String)">
            <summary>
            Checks if a field ID is contained in the field list.
            </summary>
            <param name="fieldId">The Field ID to be checked</param>
            <returns>Returns <c>true</c> if the field is present, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptors.GetEnumerator">
            <summary>
            Provides an enumerator for the collection.
            </summary>
            <returns>An enumerator for interating over the collection of fields.</returns>
            <remarks>When iterating over the collection of fields, instance of multi-instance
            fields are not included.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptors.Count">
            <summary>
            Returns the number of fields in the collection.
            </summary>
            <remarks>The count does not include instances of multi-instance fields since there is
            not set limit on the number of such fields.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptors.Item(System.String)">
            <summary>
            Retrieves a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor"/> using the field's Field ID.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptors.StandardFields">
            <summary>
            Retrieves the list of all Standard Encompass fields.
            </summary>
            <returns>Returns the collection of standard fields.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptors.VirtualFields">
            <summary>
            Retrieves the list of all Standard Encompass fields.
            </summary>
            <returns>Returns the collection of standard fields.</returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.FieldOption">
            <summary>
            Summary description for FieldOption.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IFieldOption">
            <summary>
            Interface for FieldOptions class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldOption.Value">
            <summary>
            Gets the value for the option.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.FieldOption.Text">
            <summary>
            Gets the display text for the option.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.FieldOptions">
            <summary>
            Summary description for FieldOptionCollection.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IFieldOptions">
            <summary>
            Interface for FieldOptions class.
            </summary>
            <exclude/>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanExportFormat">
            <summary>
            Enumerates the supported export formats for a loan file.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanExportFormat.FNMA30">
            <summary>Fannie Mae verion 3.0 format.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanExportFormat.FNMA32">
            <summary>Fannie Mae verion 3.2 format.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanExportFormat.CLOSING231">
            <summary>MISMO Closing v2.3.1 format.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanExportFormat.CLOSING24">
            <summary>MISMO Closing v2.4 format.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanExportFormat.CLOSING26">
            <summary>MISMO Closing v2.6 format.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanExportFormat.CWLEDA">
            <summary>CountryWide LEDA export format.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanExportFormat.AUS231">
            <summary>MISMO AUS v2.3.1 format.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanExportFormat.AUS24">
            <summary>MISMO AUS v2.4 format.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanExportFormat.EDRS">
            <summary>Encompass Data Replication Services format.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanExportFormat.LOANDELIVERY">
            <summary> ULDD Loan Deliver.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanImportFormat">
            <summary>
            Enumerates the supported import formats for a loan file.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanImportFormat.FNMA3X">
            <summary>Fannie Mae verion 3.0 or 3.2 format.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAccessRights">
            <summary>
            Enumerates the rights that a user may have on a loan file.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanAccessRights.None">
            <summary>No access</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanAccessRights.ReadOnly">
            <summary>Read-only access</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanAccessRights.ReadWrite">
            <summary>Read and write access</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanAccessRights.Full">
            <summary>Read, write and reassignment rights</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.CalculationTriggerOptions">
            <summary>
            Enumerates the calculation trigger that you can trigger the calculation.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.CalculationTriggerOptions.ApplyDDM">
            <summary>Apply DDM Rules</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.CalculationTriggerOptions.Calculation_2015RESPA">
            <summary>Trigger 2015 RESPA-TILA Calculation</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.CalculationTriggerOptions.Calculation_AggregateEscrow">
            <summary>Trigger Aggregate Escrow Account Calculation</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.CalculationTriggerOptions.Calculation_CityCountyStateTax">
            <summary>Trigger City, County and State Tax Calculation</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.CalculationTriggerOptions.Calculation_FHA203K">
            <summary>Trigger FHA 203K Calculation</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.CalculationTriggerOptions.Calculation_MIP">
            <summary>Trigger Calculation for Mortgagae Insurance</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.CalculationTriggerOptions.Calculation_MLDS">
            <summary>Trigger CA MLDS Calculation</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.CalculationTriggerOptions.Calculation_PTCPOC">
            <summary>Trigger Calculation for PTC and POC Fields in Fee Detail</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.CalculationTriggerOptions.Calculation_USDAMIP">
            <summary>Trigger Calculation for USDA Mortgagae Insurance</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.CalculationTriggerOptions.Calculation_TPO">
            <summary>Trigger Calculation for TPO</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Loan">
            <summary>
            The Loan class represents a single loan file within Encompass. All loan-related data
            for this this file is accessible from this object's properties and methods.
            </summary>
            <example>
The following code creates a new loan, sets the value of several fields
and then commits the loan to the database.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the empty shell for the new loan. At this point,
      // the loan has not been saved to the Encompass server.
      Loan loan = session.Loans.CreateNew();

      // Set the loan folder and loan name for the loan
      loan.LoanFolder = "My Pipeline";
      loan.LoanName = "Harrison";

      // Set the borrower's name and property address
      loan.Fields["36"].Value = "Howard";        // First name
      loan.Fields["37"].Value = "Harrison";      // Last name
      loan.Fields["11"].Value = "235 Main St.";  // Street Address
      loan.Fields["12"].Value = "Anycity";       // City
      loan.Fields["13"].Value = "Anycounty";     // County
      loan.Fields["14"].Value = "CA";            // State
      loan.Fields["15"].Value = "94432";         // Zip code

      // Save the loan to the server
      loan.Commit();

      // Write out the GUID of the newly created loan
      Console.WriteLine(loan.Guid);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoan">
            <summary>
            Interface for Loan class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.ApplyInvestorToLoan(EllieMae.Encompass.BusinessEnums.InvestorTemplate)">
            <summary>
            Applies the investor from the provided <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorTemplate"/> to the current loan.
            </summary>
            <param name="investorTemplate">The <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorTemplate"/> to apply.</param>
            <remarks><para>The <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorTemplate"/> is obtained from the secondary settings.</para><para>Passing a null <see cref="T:EllieMae.Encompass.BusinessEnums.InvestorTemplate"/> will throw an exception.</para></remarks>
            <example>
    The following code manually applies a given investor to the current loan.
    <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Templates;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");
      loan.Lock();
           
      // Get investor name from arguments
      string investorName = args[0];
      
      // Get investor template for investor
      InvestorTemplate investorTemplate = session.SystemSettings.Secondary.InvestorTemplates[investorName];
      
      // Check to make sure an investor template exists for the give name
      if(investorTemplate == null)
      {
          Console.WriteLine("InvestorTemplate not found.");
          return;
      }
      
      // Applies the MilestoneTemplate to the loan.
      loan.ApplyInvestorToLoan(investorTemplate);

      // Save and close the loan file
      loan.Commit();
      loan.Close();
      session.End();
   }
}
]]>
    </code>
  </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.ApplyManualMilestoneTemplate(EllieMae.Encompass.BusinessEnums.MilestoneTemplate,System.Boolean)">
            <summary>
            Applies a given <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.MilestoneTemplate"/> to the loan.
            </summary>
            <param name="milestoneTemplate">The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.MilestoneTemplate"/> to apply to the loan.</param>
            <param name="forceApplyMilestoneTemplate">Used to force apply the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.MilestoneTemplate"/> even when Manual mode is disabled. 
            This parameter is optional. The default value is false.</param>
            <remarks><para>If Manual Mode is disabled, the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.MilestoneTemplate"/> conditions don't match the loan data while the "Allow non-matching templates to be applied to loans" is disabled or the given <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.MilestoneTemplate"/> is not active this will throw and exception.</para>
            <para>If the Milestone list on the loan is locked the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.MilestoneTemplate"/> will not be applied.</para></remarks>
            <example>
      The following code manually applies a specific MilestoneTemplate to an existing loan file.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Templates;
using EllieMae.Encompass.BusinessEnums;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");
      loan.Lock();

      // Retrieve the desired MilestoneTemplate
      MilestoneTemplate mt = session.Loans.MilestoneTemplates.GetItemByName("Test Template");
      
      // Applies the MilestoneTemplate to the loan.
      loan.ApplyManualMilestoneTemplate(mt);

      // Save and close the loan file
      loan.Commit();
      loan.Close();
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.ApplyBestMatchingMilestoneTemplate(System.Boolean)">
            <summary>
            Applies the best matching <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.MilestoneTemplate"/> to the loan.
            </summary>
            <param name="forceApplyMilestoneTemplate">Used to force apply the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.MilestoneTemplate"/> even when Manual mode is disabled. 
            This parameter is optional. The default value is false.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.LinkTo(EllieMae.Encompass.BusinessObjects.Loans.Loan)">
            <summary>
            Links the current loan to another loan.
            </summary>
            <param name="loan">The loan to which to link the current loan.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Unlink">
            <summary>
            Breaks the link between the current loan and its linked loan, if one is present.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.SendToLoanOfficer(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Sets the Loan Officer (LO) currently responsible for this loan file.
            </summary>
            <param name="loanOfficer">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User">User</see> object 
            representing the new Loan Officer.</param>
            <remarks>This method is equivalent to calling <c>Loan.Associates.AssignUser(FixedRole.LoanOfficer, loanOfficer)</c>.
            The system determines which <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> is mapped to the LoanOfficer <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FixedRole"/>
            and then assigns the user to all LoanAssociate records for that role.
            </remarks>
            <example>
      The following code demonstrates how to set the Loan Officer currently
      responsible for a loan.
      <code>
        <![CDATA[       
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Get the "Loan Officer" Persona
      Persona lo = session.Users.Personas.GetPersonaByName("Loan Officer");

      // Fetch the list of Loan Officers from the server
      UserList los = session.Users.GetUsersWithPersona(lo, false);

      if (los.Count > 0)
      {
      	// Lock the loan so we can edit it
      	loan.Lock();

      	// Assign the first LO returned to the loan. This will automatically
      	// grant that user read/write access rights to the current loan.
      	loan.SendToLoanOfficer(los[0]);

      	// Commit the change and unlock the loan
      	loan.Commit();
      	loan.Unlock();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
        ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.SendToProcessing(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Sends the current loan to processing and sets the Loan Processor (LP)
            responsible for handling the loan.
            </summary>
            <param name="loanProcessor">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User">User</see> object 
            representing the new Loan Processor.</param>
            <remarks>This method is equivalent to calling <c>Loan.Associates.AssignUser(FixedRole.LoanProcessor, loanProcessor)</c>.
            The system determines which <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> is mapped to the LoanProcessor <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FixedRole"/>
            and then assigns the user to all LoanAssociate records for that role.
            </remarks>
            <example>
      The following code demonstrates how to send a loan to processing by specifying
      the Loan Processor who will handle this loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Get the "Loan Officer" Persona
      Persona lp = session.Users.Personas.GetPersonaByName("Loan Processor");

      // Fetch the list of Loan Officers from the server
      UserList los = session.Users.GetUsersWithPersona(lp, false);

      if (lps.Count > 0)
      {
      	// Lock the loan so we can edit it
      	loan.Lock();

      	// Assign the first LP returned to the loan. This user will automatically
      	// be granted Read/Write rights to the loan when the loan is committed.
      	loan.SendToProcessing(los[0]);

      	// Commit and unlock the loan
      	loan.Commit();
      	loan.Unlock();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
        ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Lock">
            <summary>
            Locks the loan for exclusive editing. Once locked, you may make changes to the loan and
            invoke the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Commit">Commit</see> method to save those changes to the
            server.
            </summary>
            <remarks>This method obtains an exclusive lock on the loan.</remarks>
            <example>
      The following code demonstrates how to safely lock and unlock a loan in order
      to make changes to its data.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open an existing loan using the GUID from the command line
         Loan loan = session.Loans.Open(args[0]);

         // Lock the loan
         loan.Lock();

         // Modify some of the loan data
         loan.Fields["11"].Value = "3094 Underwood Lane";    // Property Address
         loan.Fields["12"].Value = "Westchester";            // Property City
         loan.Fields["14"].Value = "PA";                     // Property State

         // Commit the changes
         loan.Commit();

         // Unlock the loan, allowing other clients to obtain a lock
         loan.Unlock();

         // We can still safely read data from the loan
         Console.WriteLine(loan.Fields["1335"].Value);       // Down Payment
         Console.WriteLine(loan.Fields["LOANSUB.X3"].Value); // Appraisal Fee

         // End the session to gracefully disconnect from the server
         session.End();
   }
}
        ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Lock(System.Boolean)">
            <summary>
            Locks the loan for editing. Once locked, you may make changes to the loan and
            invoke the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Commit">Commit</see> method to save those changes to the
            server.
            </summary>
            <param name="exclusive">Indicates if an exclusive lock is required.</param>
            <remarks><p>A loan can be locked for either exclusive or shared editing. An exclusive lock
            will prevent other users from editing the loan, but obtaining an exclusive lock requires 
            that no other user has an exclusive or shared lock on the loan.</p>
            <p>A shared lock will allow other users to open and edit the loan as long as they are
            also using a shared lock. If an exclusive lock is on the loan, you cannot obtain a shared lock
            and an exception will occur.</p>
            <p>If you have previously obtained a shared lock and you need to upgrade it to an exclusive
            lock, you can invoke the Lock() method a second time, passing <c>true</c> for the parameter.
            If you have an exclusive lock, you cannot downgrade the lock to a shared lock without
            unlocking the loan completely (via the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Unlock"/> method).</p>
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Unlock">
            <summary>
            Unlocks the loan once editing has been finished. Any pending changes should be
            Committed prior to unlocking the loan.
            </summary>
            <example>
      The following code demonstrates how to safely lock and unlock a loan in order
      to make changes to its data.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open an existing loan using the GUID from the command line
         Loan loan = session.Loans.Open(args[0]);

         // Lock the loan
         loan.Lock();

         // Modify some of the loan data
         loan.Fields["11"].Value = "3094 Underwood Lane";    // Property Address
         loan.Fields["12"].Value = "Westchester";            // Property City
         loan.Fields["14"].Value = "PA";                     // Property State

         // Commit the changes
         loan.Commit();

         // Unlock the loan, allowing other clients to obtain a lock
         loan.Unlock();

         // We can still safely read data from the loan
         Console.WriteLine(loan.Fields["1335"].Value);       // Down Payment
         Console.WriteLine(loan.Fields["LOANSUB.X3"].Value); // Appraisal Fee

         // End the session to gracefully disconnect from the server
         session.End();
   }
}
        ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetCurrentLock">
            <summary>
            Returns the current <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanLock"/> on the loan.
            </summary>
            <returns>The lock information for the current loan, or <c>null</c> if no lock is currently
            held on this loan. If concurrent editing is enabled, you should consider calling 
            <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetCurrentLocks"/> instead to retrieve all locks held on the current loan.
            If multiple locks are held on this loan, this method will return only one of them.</returns>
            <example>
      The following code opens a loan and retrieves the information about the
      current lock holder, if any.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open a loan from the My Pipeline folder and retrieve the information on the current lock
         Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");
         LoanLock lockInfo = loan.GetCurrentLock();

         if (lockInfo == null)
         Console.WriteLine("Loan is not locked");
         else
         Console.WriteLine("Loan is locked by " + lockInfo.LockedBy + ", since " + lockInfo.LockedSince +
         ", for " + lockInfo.LockType);

         // Close the loan and end the session
         loan.Close();
         session.End();
   }
}
              ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetCurrentLocks">
            <summary>
            Returns all locks currently held <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanLock"/> on the loan.
            </summary>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.LoanLockList"/> containing all locks held on the current loan.
            If concurrent editing is enabled and the loan is being edited by multiple users, a LockLock
            object will be returned for each user who has a lock on the loan.</returns>
            <example>
      The following code opens a loan and retrieves the information about the
      current locks, if any.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open a loan from the My Pipeline folder and retrieve the information on the current lock
         Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");
         LoanLockList lockInfoList = loan.GetCurrentLocks();

         foreach (LoanLock lockInfo in lockInfoList)
         {
            Console.WriteLine("Loan is locked by " + lockInfo.LockedBy + ", since " + lockInfo.LockedSince +
            ", for " + lockInfo.LockType);
         }

         // Close the loan and end the session
         loan.Close();
         session.End();
   }
}
              ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.ForceLock">
            <summary>
            Removes an existing locks on the current loan and then locks it for the current user.
            </summary>
            <remarks>If a lock already exists on the loan, this function will remove it before
            applying a lock for the current user. This action may cause a user editing the document in Encompass
            to lose their changes as they will not be able to save the loan. Only invoke
            this function if you know that existing lock is no longer valid. 
            <p>When you are done with the lock, call the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Unlock"/> method. It is
            not necessary to call <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.ForceUnlock"/> to remove the lock applied by
            this method.</p>
            <p>This function requires Administrator rights to invoke if a lock already exists
            on the loan.</p>
            </remarks>
            <example>
      The following code opens a loan and forces a lock onto it. If another user was
      modifying the loan, their changes will be lost.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

          // Open a loan from the My Pipeline folder
         Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");

         // Force a lock on the loan and then modify the loan amount
         loan.ForceLock();
         loan.Fields["1109"].Value = "167000";

         // Commit the changes and unlock the loan
         loan.Commit();
         loan.Unlock();

         // Close the loan and end the session
         loan.Close();
         session.End();
   }
}
              ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.ForceUnlock">
            <summary>
            Removes any lock currently held on the loan.
            </summary>
            <remarks>This function may cause a user editing the document in Encompass
            to lose their changes as they will not be able to save the loan. Only invoke
            this function if you know that existing lock is no longer valid. To remove
            a lock on the loan which was created using the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Lock"/> method,
            call <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Unlock"/> instead.
            <p>This function requires Administrator rights to invoke.</p>
            </remarks>
            <example>
      The following code attempts to open a loan and, if it finds the loan is already locked,
      forcibly removes the lock. This is logically equivalent to the functionality of the
      <see href="ForceLock"/> method.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open a loan from the My Pipeline folder
         Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");

         try
         {
            // Attempt the lock on the loan
            loan.Lock();
         }
         catch (LockException)
         {
            // The LockException means the loan is already locked, so we forcibly unlock it.
            // This will cause the user who has the loan locked to be unable to save their
            // changes (if any).
            loan.ForceUnlock();
            loan.Lock();
         }

         // Modify the loan amount now that the loan is locked
         loan.Fields["1109"].Value = "156000";

         // Commit the changes and unlock the loan
         loan.Commit();
         loan.Unlock();

         // Close the loan and end the session
         loan.Close();
         session.End();
   }
}
              ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Recalculate">
            <summary>
            Forces a full recalculation for the loan's calculated fields.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.ExecuteCalculation(System.String)">
            <summary>
            Executes a specific calculation for a form or process.
            </summary>
            <param name="calcName">The name of the calculation to be run.</param>
            <remarks>This method is for internal use by Encompass only.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Export(System.String,System.String,EllieMae.Encompass.BusinessObjects.Loans.LoanExportFormat)">
            <summary>
            Exports the loan information to one of serveral supported formats.
            </summary>
            <param name="format">The target format to which the loan data will
            be converted.</param>
            <param name="exportKey">Your Encompass API Export Key (see Remarks below for more information).</param>
            <param name="filePath">The path to which to export the file. Any existing
            file will be overwritten.</param>
            <returns>A string containing the formatted loan data.</returns>
            <remarks>
            <p>Exporting loans using the API requires the use of an Encompass API Export Key.
            This key is the same as the CD Key used to register the Encompass API SDK/Runtime.</p>
            <p>If you are a licensed Encompass Partner and your application is being distributed to Encompass Customers,
            you should use your own CD Key when calling this method, not the CD Key of of the individual
            customers who use your software. In general, simply hard-coding this key to your Encompass API
            CD Key is the preferred technique.</p>
            <p>For customer doing their own in-house development, simply use your own Encompass API Key
            for this purpose.</p>
            <p>Before Encompass will perform the export, it must first validate your Export Key by communicating
            with the Encompass Licensing Servers. To do this, your application must be running on a computer
            which has Internet access and which permits anonymous requests to the host <c>encompass.elliemae.com</c>.
            If you are running behind a proxy which requires authentication for outbound connections, an exception
            will need to be made for this host in order to export data with this method.</p>
            </remarks>
            <example>
      The following code demonstrates how to export the data of an existing loan
      to Fannie Mae 3.2 format.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open an existing loan using the GUID from the command line
         Loan loan = session.Loans.Open(args[0]);

         string exportPath = "C:\\Export\\" + loan.LoanName;

         // Export the loan to Fannie Mae 3.2 format. You would need to provide
         // your own Export Key to perform the export.
         loan.Export(exportPath, "AAAAAAAAAA", LoanExportFormat.FNMA32);

         // Read the file in and display it
         using (StreamReader reader = new StreamReader(exportPath))
         Console.Write(reader.ReadToEnd());

         // End the session to gracefully disconnect from the server
         session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.ExportAsText(System.String,EllieMae.Encompass.BusinessObjects.Loans.LoanExportFormat)">
            <summary>
            Exports the loan information to one of serveral supported formats.
            </summary>
            <param name="format">The target format to which the loan data will
            be converted.</param>
            <param name="exportKey">Your Encompass API Export Key (see Remarks below for more information).</param>
            <remarks>
            <p>Exporting loans using the API requires the use of an Encompass API Export Key.
            This key is the same as the CD Key used to register the Encompass API SDK/Runtime.</p>
            <p>If you are a licensed Encompass Partner and your application is being distributed to Encompass Customers,
            you should use your own CD Key when calling this method, not the CD Key of of the individual
            customers who use your software. In general, simply hard-coding this key to your Encompass API
            CD Key is the preferred technique.</p>
            <p>For customer doing their own in-house development, simply use your own Encompass API Key
            for this purpose.</p>
            <p>Before Encompass will perform the export, it must first validate your Export Key by communicating
            with the Encompass Licensing Servers. To do this, your application must be running on a computer
            which has Internet access and which permits anonymous requests to the host <c>encompass.elliemae.com</c>.
            If you are running behind a proxy which requires authentication for outbound connections, an exception
            will need to be made for this host in order to export data with this method.</p>
            </remarks>
            <example>
      The following code demonstrates how to export the data of an existing loan
      to Fannie Mae 3.2 format.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open an existing loan using the GUID from the command line
         Loan loan = session.Loans.Open(args[0]);

         string exportPath = "C:\\Export\\" + loan.LoanName;

         // Export the loan to Fannie Mae 3.2 format. You would need to provide
         // your own Export Key to perform the export.
         loan.Export(exportPath, "AAAAAAAAAA", LoanExportFormat.FNMA32);

         // Read the file in and display it
         using (StreamReader reader = new StreamReader(exportPath))
         Console.Write(reader.ReadToEnd());

         // End the session to gracefully disconnect from the server
         session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.ExportAsText(System.String,EllieMae.Encompass.BusinessObjects.Loans.LoanExportFormat,System.Boolean)">
            <summary>
            Exports the loan information to one of serveral supported formats.
            </summary>
            <param name="exportKey">Your Encompass API Export Key (see Remarks below for more information).</param>
            <param name="format">The target format to which the loan data will
            be converted.</param>
            <param name="currentBorPairOnly">Indicates whether only the "current" borrower pair
            should be exported.</param>
            <remarks>
            <p>Exporting loans using the API requires the use of an Encompass API Export Key.
            This key is the same as the CD Key used to register the Encompass API SDK/Runtime.</p>
            <p>If you are a licensed Encompass Partner and your application is being distributed to Encompass Customers,
            you should use your own CD Key when calling this method, not the CD Key of of the individual
            customers who use your software. In general, simply hard-coding this key to your Encompass API
            CD Key is the preferred technique.</p>
            <p>For customer doing their own in-house development, simply use your own Encompass API Key
            for this purpose.</p>
            <p>Before Encompass will perform the export, it must first validate your Export Key by communicating
            with the Encompass Licensing Servers. To do this, your application must be running on a computer
            which has Internet access and which permits anonymous requests to the host <c>encompass.elliemae.com</c>.
            If you are running behind a proxy which requires authentication for outbound connections, an exception
            will need to be made for this host in order to export data with this method.</p>
            <p>Not all export formats support the <c>currentBorPairOnly</c> option. If you pass a value of
            <c>true</c> but this option is not supported by your selected export format, a
            <c>NotSupportedException</c> will be raised. Pass a <c>false</c> value to ensure the export will
            be successful.</p>
            </remarks>
            <example>
      The following code demonstrates how to export the data of an existing loan
      to Fannie Mae 3.2 format.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open an existing loan using the GUID from the command line
         Loan loan = session.Loans.Open(args[0]);

         string exportPath = "C:\\Export\\" + loan.LoanName;

         // Export the loan to Fannie Mae 3.2 format. You would need to provide
         // your own Export Key to perform the export.
         loan.Export(exportPath, "AAAAAAAAAA", LoanExportFormat.FNMA32);

         // Read the file in and display it
         using (StreamReader reader = new StreamReader(exportPath))
         Console.Write(reader.ReadToEnd());

         // End the session to gracefully disconnect from the server
         session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Import(System.String,EllieMae.Encompass.BusinessObjects.Loans.LoanImportFormat)">
            <summary>
            Imports loan data from a disk file into the current loan.
            </summary>
            <param name="filePath">The path to the file from which data will be imported.</param>
            <param name="format">The format of the data within the import file.</param>
            <remarks>This method imports data into the current loan without changing the
            identifying information of this loan (i.e. GUID and Loan Number). 
            If you wish for the identifying information from the imported loan to be
            preserved, use the <c>ImportLoan</c>
            method on the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loans">Loans</see> object.</remarks>
            <example>
      The following code demonstrates how to import Fannie Mae 3.x data into
      an existing Loan.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open an existing loan using the GUID from the command line
         Loan loan = session.Loans.Open(args[0]);

         // Lock the loan since we will be modifying its contents
         loan.Lock();

         // Import the loan from Fannie Mae 3.x format
         string importPath = "C:\\Import\\" + loan.LoanName;

         loan.Import(importPath, LoanImportFormat.FNMA3X);

         // Commit the changes and unlock the loan
         loan.Commit();
         loan.Unlock();

         // End the session to gracefully disconnect from the server
         session.End();
   }
}
             ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.ImportWithTemplate(System.String,EllieMae.Encompass.BusinessObjects.Loans.LoanImportFormat,EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanTemplate)">
            <summary>
            Imports loan data from a disk file into the current loan using a specified template.
            </summary>
            <param name="filePath">The path to the file from which data will be imported.</param>
            <param name="format">The format of the data within the import file.</param>
            <param name="template">The template to use for the import.</param>
            <remarks>This method imports data into the current loan without changing the
            identifying information of this loan (i.e. GUID and Loan Number). 
            If you wish for the identifying information from the imported loan to be
            preserved, use the <c>ImportLoan</c>
            method on the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loans">Loans</see> object.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.ImportWithLoanOfficer(System.String,EllieMae.Encompass.BusinessObjects.Loans.LoanImportFormat,EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanTemplate,EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Imports loan data from a disk file into the current loan using a specified template.
            Assigns the specified user as the loan officer when there is no match between the
            loan officer name in the loan data and loan officer names in the organization.
            </summary>
            <param name="filePath">The path to the file from which data will be imported.</param>
            <param name="format">The format of the data within the import file.</param>
            <param name="template">The template to use for the import.</param>
            <param name="user">The user to assign as the loan officer.</param>
            <remarks>This method imports data into the current loan without changing the
            identifying information of this loan (i.e. GUID and Loan Number). 
            If you wish for the identifying information from the imported loan to be
            preserved, use the <c>ImportLoan</c>
            method on the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loans">Loans</see> object.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.ImportFromBytes(System.Byte[]@,EllieMae.Encompass.BusinessObjects.Loans.LoanImportFormat)">
            <summary>
            Imports loan data from a byte array into the current loan.
            </summary>
            <param name="importData">A byte array containing the data to be imported. This parameter
            is passed by reference solely for compatibility with Visual Basic 6.0 clients.
            The array passed to this function will not be modified.</param>
            <param name="format">The format of the data within the import file.</param>
            <remarks>This method imports data into the current loan without changing the
            identifying information of this loan (i.e. GUID and Loan Number). 
            If you wish for the identifying information from the imported loan to be
            preserved, use the <c>ImportLoan</c>
            method on the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loans">Loans</see> object.</remarks>
            <remarks><note type="implementnotes">Because of language restrictions, this method
            cannot be used from using a weakly-typed language such as VBScript or
            JScript. Use the Import method instead.</note></remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Commit">
            <summary>
            Saves any pending changes to the loan to the server.
            </summary>
            <remarks>This method is used either to update an existing loan
            or to save a new loan to the server. In the latter case, the loan's
            Guid property will be populated once the loan has been saved.</remarks>
            <example>
      The following code demonstrates how to safely lock and unlock a loan in order
      to make changes to its data.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open an existing loan using the GUID from the command line
         Loan loan = session.Loans.Open(args[0]);

         // Lock the loan
         loan.Lock();

         // Modify some of the loan data
         loan.Fields["11"].Value = "3094 Underwood Lane";    // Property Address
         loan.Fields["12"].Value = "Westchester";            // Property City
         loan.Fields["14"].Value = "PA";                     // Property State

         // Commit the changes
         loan.Commit();

         // Unlock the loan, allowing other clients to obtain a lock
         loan.Unlock();

         // We can still safely read data from the loan
         Console.WriteLine(loan.Fields["1335"].Value);       // Down Payment
         Console.WriteLine(loan.Fields["LOANSUB.X3"].Value); // Appraisal Fee

         // End the session to gracefully disconnect from the server
         session.End();
   }
}
        ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Refresh">
            <summary>
            Refreshes the loan from the server. Any changes made by other users will becomes
            visible after the refresh. Any pending changes will be lost.
            </summary>
            <example>
      The following code demonstrates how to use the Refresh method to reload the
      loan's data from the server.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open an existing loan using the GUID from the command line
         Loan loan = session.Loans.Open(args[0]);

         // Lock the loan since we will be modifying its contents
         loan.Lock();

         // Set the property address fields an dcommit those changes
         loan.Fields["11"].Value = "202 Howard St., SW";
         loan.Fields["12"].Value = "Baltimore";
         loan.Fields["14"].Value = "MD";
         loan.Commit();

         // Set new address fields, but then call Refresh instead of Commit
         loan.Fields["11"].Value = "202 Nowhere Street";
         loan.Fields["12"].Value = "Noplace";
         loan.Fields["14"].Value = "XX";
         loan.Refresh();

         // Dump the values of the field. The values printed will reflect those
         // we saved when we commited to loan to the server.
         Console.WriteLine(loan.Fields["11"].Value);
         Console.WriteLine(loan.Fields["12"].Value);
         Console.WriteLine(loan.Fields["14"].Value);

         // Unlock the loan
         loan.Unlock();

         // End the session to gracefully disconnect from the server
         session.End();
   }
}
              ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Close">
            <summary>
            Closes the loan object, releasing its resources.
            </summary>
            <remarks>If the loan had been previously locked, it will be unlocked
            when closed. Any pending changes to the loan will not be saved.
            </remarks>
            <example>
      The following code demonstrates how to use the Close method to release the
      resources held by a loan and discard any changes made to it.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open an existing loan using the GUID from the command line
         Loan loan = session.Loans.Open(args[0]);

         // Lock the loan since we will be modifying its contents
         loan.Lock();

         // Set the property address fields an dcommit those changes
         loan.Fields["11"].Value = "202 Howard St., SW";
         loan.Fields["12"].Value = "Baltimore";
         loan.Fields["14"].Value = "MD";

         // Close the loan. This will discard any changes that have not
         // been committed and will unlock the loan if Lock() was
         // previously called.
         loan.Close();

         // The following line will cause an exception because the loan's
         // resources have been released.
         try
         {
            Console.WriteLine(loan.Fields["11"].Value);
         }
         catch (Exception ex)
         {
            Console.WriteLine("Error accessing loan: " + ex.Message);
         }

         // End the session to gracefully disconnect from the server
         session.End();
   }
}
              ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Move(EllieMae.Encompass.BusinessObjects.Loans.LoanFolder,System.String)">
            <summary>
            Moves an existing loan to a new loan folder and/or assigns it a new name.
            </summary>
            <param name="newFolder">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder"/> 
            to which to move the loan.</param>
            <param name="newLoanName">The new name for the loan.</param>
            <remarks>This method allows existing loans to be moved between loan folders
            or to be renamed within the current loan folder. To move a loan without changing
            its name, pass the loan's current <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.LoanName"/> for the second
            parameter. To change the loan's name but keep it in the current folder,
            pass the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder"/> object 
            corresponding to the loan's current <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.LoanFolder"/> property value.
            <p>If a loan with the name provided already exists in the specified loan folder,
            an exception will be raised. To have a new name assigned automatically, use the
            <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.MoveToFolder(EllieMae.Encompass.BusinessObjects.Loans.LoanFolder)"/> method instead.</p>
            </remarks>
            <example>
      The following code demonstrates how to move an existing loan from one
      loan folder to another.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open a loan from the My Pipeline folder
         Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");

         // Move the loan to the (Archive) folder without changing its name
         loan.Move(session.Loans.Folders["(Archive)"], loan.LoanName);

         // Display the loan's new loan folder information
         Console.WriteLine(loan.LoanFolder);

         // Close the loan and end the session
         loan.Close();
         session.End();
   }
}
              ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.MoveToFolder(EllieMae.Encompass.BusinessObjects.Loans.LoanFolder)">
            <summary>
            Moves the loan to the specified loan folder.
            </summary>
            <param name="newFolder">The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.LoanFolder"/> to which the loan will be moved.</param>
            <remarks>Calling this method may result in the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.LoanName"/> of the loan changing
            since a loan's LoanName is unique within its folder. If a loan with the same LoanName already
            exists in the target folder, a new loan name will be generated automatically and assigned
            to the loan. You can determine the new loan name by reading the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.LoanName"/>
            property after calling this method.
            <p>To specify the a new loan name for the loan, use the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Move(EllieMae.Encompass.BusinessObjects.Loans.LoanFolder,System.String)"/> method instead.</p>
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.System#IDisposable#Dispose">
            <summary>
            Closes the loan and releases any resources held by it.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Delete">
            <summary>
            Deletes the current loan from the server.
            </summary>
            <remarks>This operation is irrevocable so the loan, once deleted, cannot be recovered.
            </remarks>
            <example>
      The following code demonstrates how to delete an existing loan.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open an existing loan using the GUID from the command line
         Loan loan = session.Loans.Open(args[0]);

         try
         {
            if (loan != null)
              loan.Delete();
         }
         catch (Exception ex)
         {
            // Loan deletion could fail if the loan is locked by another user
            Console.WriteLine("Unable to delete loan due to error: " + ex.Message);
         }

         // End the session to gracefully disconnect from the server
         session.End();
   }
}
             ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetCustomDataObject(System.String)">
            <summary>
            Retrieves a custom object for a loan.
            </summary>
            <param name="name">The name of the object to retrieve.</param>
            <returns>Returns the specified custom object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.SaveCustomDataObject(System.String,EllieMae.Encompass.BusinessObjects.DataObject)">
            <summary>
            Saves a custom data object for the loan.
            </summary>
            <param name="name">The name to assign to the Data Object</param>
            <param name="data">The object to be written</param>
            <remarks></remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.AppendToCustomDataObject(System.String,EllieMae.Encompass.BusinessObjects.DataObject)">
            <summary>
            Appends data to an existing custom data object or creates a new one.
            </summary>
            <param name="name">The name to of the data object</param>
            <param name="data">The data to be appended</param>
            <remarks>If the specified data object does not exist, an empty object will first be created
            and then the specified data appended to it.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.DeleteCustomDataObject(System.String)">
            <summary>
            Deletes a custom data object associated with the loan.
            </summary>
            <param name="name">The name of the data object</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetEPassTransactionDataObject(System.String)">
            <summary>
            Retrieves an object associated with an ePASS Transaction.
            </summary>
            <param name="name">The name of the object to retrieve.</param>
            <returns>Returns the specified custom object.</returns>
            <remarks>This method is intended for internal use only by the Encompass application.
            To retrieve a custom data object stored using the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.SaveCustomDataObject(System.String,EllieMae.Encompass.BusinessObjects.DataObject)"/> method,
            use <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetCustomDataObject(System.String)"/>.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.SaveEPassTransactionDataObject(System.String,EllieMae.Encompass.BusinessObjects.DataObject)">
            <summary>
            Saves an object associated with an ePASS transaction.
            </summary>
            <param name="name">The name to assign to the Data Object</param>
            <param name="data">The object to be written</param>
            <remarks>This method is intended for internal use only by the Encompass application. Use of this
            method by other applications can cause data corruption or loss of data for the current loan.
            To save a custom data object in a safe manner, you should use the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.SaveCustomDataObject(System.String,EllieMae.Encompass.BusinessObjects.DataObject)"/>
            method. Objects saved in that manner can be retrieved using the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetCustomDataObject(System.String)"/>
            method.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetAccessRights">
            <summary>
            Returns the effective access rights the currently logged in user 
            has to the current loan.
            </summary>
            <returns>The rights for the current user.</returns>
            <remarks>For information about effective versus assigned access rights, see
            the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetEffectiveAccessRights(EllieMae.Encompass.BusinessObjects.Users.User)"/> method.</remarks>
            <example>
      The following code iterates throught each loan in the "My Pipeline" folder,
      verifies that the user has at least Read/Write access and, if so, adds a new
      GeneralEntry to the loan's log.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Query for all loans in the "My Pipeline" folder
         LoanIdentityList ids = session.Loans.Folders["My Pipeline"].GetContents();

         foreach (LoanIdentity id in ids)
         {
            // Open the loan with the specified GUID and check if the current user has
            // write access. If so, create a new General log entry.
            Loan loan = session.Loans.Open(id.Guid);

            // If the user has at least read/write rights, modify the loan
            if (loan.GetAccessRights() >= LoanAccessRights.ReadWrite)
            {
                loan.Lock();
                loan.Fields["4000"].Value = "John";
                loan.Fields["4002"].Value = "Doe";
                loan.Commit();
                loan.Unlock();
                loan.Close();
            }
         }

         // Close the loan and end the session
         session.End();
   }
}
             ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetAssignedAccessRights(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Returns the access rights the specified user has to the current loan.
            </summary>
            <param name="user">The user for which to query the rights.</param>
            <returns>The rights for the specified user.</returns>
            <remarks>This method may only be called by a user with Full rights on the current
            loan. Additionally, it may only be called on a commited loan.</remarks>
            <example>
      The following code demonstrates how to display the assigned and effective rights
      of every named user to a particular loan.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open a loan from the My Pipeline folder
         Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");

         // Iterate over all users in the system, printing their assigned and effective rights
         foreach (User user in session.Users.GetAllUsers())
            Console.WriteLine(user.ID + ": " + loan.GetAssignedAccessRights(user) + " "
            + loan.GetEffectiveAccessRights(user));

         // Close the loan and end the session
         loan.Close();
         session.End();
   }
}
             ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetEffectiveAccessRights(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Returns the effective rights the specified user has to the current loan.
            </summary>
            <param name="user">The user for which to query the rights.</param>
            <returns>The user effective rights for the specified user.</returns>
            <remarks>A user's effective rights are determined by a combination of their
            assigned rights, their persona and their position within the organization
            hierarchy as follows:
            <list type="bullet">
            <item>An administrator at the top level of the organization hierarchy will
            always have <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.LoanAccessRights.Full"/> rights to all loans.</item>
            <item>An administrator at any other level of the organization hierarchy will
            have rights equal to the greatest of their assigned rights and the assigned rights
            of all users user below them in the hierarchy.</item>
            <item>A non-administrative user's effective rights will always be equal to their
            assigned rights, if any rights are assigned.</item>
            <item>A non-administrative user with no assigned rights will have either read or read/write
            rights to the loan (based on their user profile) if at least one subordinate has read 
            access to the loan.
            </item>
            </list>
            <p>This method may only be called by a user with Full rights on the current
            loan. Additionally, it may only be called on a commited loan.</p>
            </remarks>
            <example>
      The following code demonstrates how to display the assigned and effective rights
      of every named user to a particular loan.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open a loan from the My Pipeline folder
         Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");

         // Iterate over all users in the system, printing their assigned and effective rights
         foreach (User user in session.Users.GetAllUsers())
            Console.WriteLine(user.ID + ": " + loan.GetAssignedAccessRights(user) + " "
            + loan.GetEffectiveAccessRights(user));

         // Close the loan and end the session
         loan.Close();
         session.End();
   }
}
             ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetUsersWithAssignedRights">
            <summary>
            Generates a list of all users who have assigned rights for the loan.
            </summary>
            <returns>A <see cref="T:EllieMae.Encompass.Collections.UserList"/> containing all Users that
            have assigned rights for the loan.</returns>
            <remarks>This method may only be called by a user with Full rights on the current
            loan. Additionally, it may only be called on a commited loan.</remarks>
            <example>
      The following code demonstrates how to revoke the assigned rights of every
      user that has assigned rights for a particular loan.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open a loan from the My Pipeline folder
         Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");

         // Iterate over each user with assigned rights and revoke them
         foreach (User user in loan.GetUsersWithAssignedRights())
            loan.AssignRights(user, LoanAccessRights.None);

         // Close the loan and end the session
         loan.Close();
         session.End();
   }
}
              ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.AssignRights(EllieMae.Encompass.BusinessObjects.Users.User,EllieMae.Encompass.BusinessObjects.Loans.LoanAccessRights)">
            <summary>
            Modifies the assigned rights of a user to the current loan.
            </summary>
            <param name="user">The user for whom the rights will be assigned.</param>
            <param name="rights">The rights to assign to this user.</param>
            <remarks>This function replaces the previous rights of the specified user,
            if any, with the new rights provided. To revoke all rights from the user,
            use <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.LoanAccessRights.None"/>.
            <p>Changes made with this method take affect immediately and do not require you
            to invoke the Commit() method on the loan. Additionally, the loan does not
            need to be locked to invoke this method.</p>
            <p>This method may only be called by a user with Full rights on the current
            loan. Additionally, it may only be called on a commited loan.</p>
            </remarks>
            <example>
      The following code demonstrates how to revoke the assigned rights of every
      user that has assigned rights for a particular loan.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open a loan from the My Pipeline folder
         Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");

         // Iterate over each user with assigned rights and revoke them
         foreach (User user in loan.GetUsersWithAssignedRights())
            loan.AssignRights(user, LoanAccessRights.None);

         // Close the loan and end the session
         loan.Close();
         session.End();
   }
}
              ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.ApplyTemplate(EllieMae.Encompass.BusinessObjects.Loans.Templates.Template,System.Boolean)">
            <summary>
            Applies a template to the current loan.
            </summary>
            <param name="tmpl">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.Template"/> to be applied.</param>
            <param name="appendData">Indicates if the data in the template should be appended to the 
            existing data in the loan or overwrite the data in the loan.</param>
            <remarks>If the <c>appendData</c> parameter is <c>true</c>, only non-empty values from the
            template will be applied to the loan. Thus, if a field is populated in the loan and unpopulated
            in the template, the field's value will be preserved. If the parameter is <c>false</c>,
            all fields from the template, including blank fields values, will overwrite the data in the loan.
            </remarks>
            <example>
      The following code applies a loan template to an existing loan file,
      appending the templates data to the loan to ensure only non-empty template
      data is applied.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Templates;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");
      loan.Lock();

      // Retrieve the desired loan template
      LoanTemplate template = (LoanTemplate)session.Loans.Templates.GetTemplate(TemplateType.LoanTemplate,
        @"public:\Companywide\Example Purchase Loan Template");

      // Apply the template to the loan in "append" mode. This will ensure that blank values
      // from the template do not overwrite data in the loan file.
      loan.ApplyTemplate(template, true);

      // Save and close the loan file
      loan.Commit();
      loan.Close();
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.SetClosingDocumentFieldOverride(System.String,System.Boolean)">
            <summary>
            Sets a flag indicating if the specified field should be overridden with the loan
            field value when orderino Closing Documents thru the Ellie Mae Docs Service.
            </summary>
            <param name="fieldId">The ID of the field to be overridden.</param>
            <param name="ovrrde">Indicates the Doc Service setting should be overriden
            by the loan's data if <c>true</c>, otherwise the Doc Service value will be used.</param>
            <remarks>
            <p>The Ellie Mae Closing Doc Service provides customer configuration that is applied to
            all loans that are run thru the system. It is possible to override the values of certain
            fields on a per-loan basis by setting the value of the loan field and enabling the override
            flag for the field.</p>
            <p>The only fields that are appropriate to be used for this call are those that start with
            the "Closing" prefix, e.g. "Closing.LndNm". The fields map to settings within the Doc
            Service that are configured with the customer's data.</p>
            <p>Note that if you set the value of a "Closing" field to a non-empty value, you do
            not need to explicitly set the override for this field. A non-empty value will always be
            treated as an override when closing docs are generated. Use this method only to override
            Doc Service field values with a blank value.</p>
            <p>Additionally, if this method is called and the <c>ovrrde</c> parameter is <c>false</c>,
            any value stored in the field will be wiped out.</p>
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.IsClosingDocumentFieldOverridden(System.String)">
            <summary>
            Indicates if a value from the loan will override the Ellie Mae Doc Service setting
            for the specified field.
            </summary>
            <param name="fieldId">The Field ID to be checked. This field ID must start with the
            "Closing" prefix.</param>
            <returns>Returns <c>true</c> if the field either contains a non-empty value or has been
            overridden explicitly using the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.SetClosingDocumentFieldOverride(System.String,System.Boolean)"/> method;
            otherwise, it returns <c>false</c>.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetFundingFees(System.Boolean)">
            <summary>
            Provides an API to get Funding Fees from Funding Worksheet.
            </summary>
            <returns>A List with FundingFee class.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetHashCode">
            <summary>
            Provides a hash code implementation for the Loan object.
            </summary>
            <returns>A hash code usable in a Hashtable object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Equals(System.Object)">
            <summary>
            Determines if two Loan objects represent the same persistent loan.
            </summary>
            <param name="obj">The loan to which to compare this object.</param>
            <returns>Returns <c>true</c> if the two objects represent the same
            loan and come from the same <see cref="T:EllieMae.Encompass.Client.Session">Session</see>, 
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Wrap(EllieMae.Encompass.Client.Session,EllieMae.EMLite.DataEngine.LoanDataMgr)">
            <summary>
            This method is for internal Encompass use only and should not be called from
            your code.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.validateExportKey(System.String,EllieMae.Encompass.BusinessObjects.Loans.LoanExportFormat)">
            <summary>
            Performs export key validation to allow the user to export loans using the API.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.ensureExportAssemblyExists(EllieMae.Encompass.BusinessObjects.Loans.LoanExportFormat)">
            <summary>
            Ensures that the export assembly for the specified format is downloaded and available
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetUCDForLoanEstimate(System.Boolean)">
            <summary>
            Gets UCD XML for Loan estimate .Input parameter should be true to set total fields.
            </summary>
            <param name="setTotalFields"></param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetUCDForClosingDisclosure(System.Boolean)">
            <summary>
            Gets UCD XML for Closing Disclosure .Input parameter should be true to set total fields.
            </summary>
            <param name="setTotalFields"></param>
            <returns></returns>
        </member>
        <member name="E:EllieMae.Encompass.BusinessObjects.Loans.Loan.BeforeCommit">
            <summary>
            The BeforeCommit event is raised just before a the loan is saved.
            </summary>
            <remarks>Use this event to run custom validation and, if necessary cancel the save operation.</remarks>
        </member>
        <member name="E:EllieMae.Encompass.BusinessObjects.Loans.Loan.Committed">
            <summary>
            The Committed event is raised whenever changes to the current loan are committed
            to the server.
            </summary>
        </member>
        <member name="E:EllieMae.Encompass.BusinessObjects.Loans.Loan.FieldChange">
            <summary>
            The FieldChange event is fired any time a change is made to field within the loan.
            </summary>
        </member>
        <member name="E:EllieMae.Encompass.BusinessObjects.Loans.Loan.LogEntryAdded">
            <summary>
            The LogEntryAdded event is fired when a new LogEntry is added to the loan's log.
            </summary>
        </member>
        <member name="E:EllieMae.Encompass.BusinessObjects.Loans.Loan.LogEntryRemoved">
            <summary>
            The LogEntryRemoved event is fired when a LogEntry is removed from the loan's log.
            </summary>
            <remarks>This event is fired just prior to the removal of the event from the log.
            The event cannot be used to prevent the log entry from being removed.</remarks>
        </member>
        <member name="E:EllieMae.Encompass.BusinessObjects.Loans.Loan.LogEntryChange">
            <summary>
            The LogEntryChange event is fired when a field on a LogEntry object is modified.
            </summary>
            <remarks>This event only fires for LogEntry objects that are part of the Loan object.
            </remarks>
        </member>
        <member name="E:EllieMae.Encompass.BusinessObjects.Loans.Loan.BeforeMilestoneCompleted">
            <summary>
            The BeforeMilestoneCompleted event is raised just before a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent"/>
            is marked as completed.
            </summary>
            <remarks>Use this event to run custom validation and, if necessary cancel the completion of the
            milestone.</remarks>
        </member>
        <member name="E:EllieMae.Encompass.BusinessObjects.Loans.Loan.MilestoneCompleted">
            <summary>
            The MilestoneCompleted event is raised when a milestone is marked as complete.
            </summary>
            <remarks>This event occurs after the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent"/> is set to 
            completed. To run custom validation logic prior to the completion of the milestone
            event, use the <see cref="E:EllieMae.Encompass.BusinessObjects.Loans.Loan.BeforeMilestoneCompleted"/> event.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.LoanFolder">
            <summary>
            Gets or, in the case of a new loan, sets the loan folder in which the loan resides.
            </summary>
            <example>
The following code creates a new loan, sets the value of several fields
and then commits the loan to the database.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the empty shell for the new loan. At this point,
      // the loan has not been saved to the Encompass server.
      Loan loan = session.Loans.CreateNew();

      // Set the loan folder and loan name for the loan
      loan.LoanFolder = "My Pipeline";
      loan.LoanName = "Harrison";

      // Set the borrower's name and property address
      loan.Fields["36"].Value = "Howard";        // First name
      loan.Fields["37"].Value = "Harrison";      // Last name
      loan.Fields["11"].Value = "235 Main St.";  // Street Address
      loan.Fields["12"].Value = "Anycity";       // City
      loan.Fields["13"].Value = "Anycounty";     // County
      loan.Fields["14"].Value = "CA";            // State
      loan.Fields["15"].Value = "94432";         // Zip code

      // Save the loan to the server
      loan.Commit();

      // Write out the GUID of the newly created loan
      Console.WriteLine(loan.Guid);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.LoanName">
            <summary>
            Gets or, in the case of a new loan, sets the name of the loan.
            </summary>
            <remarks>The loan name must be unique within its loan folder.</remarks>
            <example>
The following code creates a new loan, sets the value of several fields
and then commits the loan to the database.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the empty shell for the new loan. At this point,
      // the loan has not been saved to the Encompass server.
      Loan loan = session.Loans.CreateNew();

      // Set the loan folder and loan name for the loan
      loan.LoanFolder = "My Pipeline";
      loan.LoanName = "Harrison";

      // Set the borrower's name and property address
      loan.Fields["36"].Value = "Howard";        // First name
      loan.Fields["37"].Value = "Harrison";      // Last name
      loan.Fields["11"].Value = "235 Main St.";  // Street Address
      loan.Fields["12"].Value = "Anycity";       // City
      loan.Fields["13"].Value = "Anycounty";     // County
      loan.Fields["14"].Value = "CA";            // State
      loan.Fields["15"].Value = "94432";         // Zip code

      // Save the loan to the server
      loan.Commit();

      // Write out the GUID of the newly created loan
      Console.WriteLine(loan.Guid);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.Guid">
            <summary>
            Gets the unique global identifier for the loan.
            </summary>
            <example>
The following code creates a new loan, sets the value of several fields
and then commits the loan to the database.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the empty shell for the new loan. At this point,
      // the loan has not been saved to the Encompass server.
      Loan loan = session.Loans.CreateNew();

      // Set the loan folder and loan name for the loan
      loan.LoanFolder = "My Pipeline";
      loan.LoanName = "Harrison";

      // Set the borrower's name and property address
      loan.Fields["36"].Value = "Howard";        // First name
      loan.Fields["37"].Value = "Harrison";      // Last name
      loan.Fields["11"].Value = "235 Main St.";  // Street Address
      loan.Fields["12"].Value = "Anycity";       // City
      loan.Fields["13"].Value = "Anycounty";     // County
      loan.Fields["14"].Value = "CA";            // State
      loan.Fields["15"].Value = "94432";         // Zip code

      // Save the loan to the server
      loan.Commit();

      // Write out the GUID of the newly created loan
      Console.WriteLine(loan.Guid);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.LoanNumber">
            <summary>
            Gets or sets the internal loan number for the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.EncompassVersion">
            <summary>
            Gets or sets the internal loan number for the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.MersNumber">
            <summary>
            Gets or sets the MERS number for the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.CalculationsEnabled">
            <summary>
            Enables or disables the calculation engine in Encompass.
            </summary>
            <remarks>By default, calculations within Encompass are always enabled. Setting this property
            to <c>false</c> will temporarily disable the calculations, which can have unexpected results
            when setting the values of fields which are used in calcaultions. Only modify this property if
            you have verified that your code works correctly when it is disabled.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.BusinessRulesEnabled">
            <summary>
            Enables or disables the business rule validation for the loan.
            </summary>
            <remarks>If this property is <c>false</c> (the default), the business rules
            defined for loans will not be enforced. When <c>true</c>, all business rules will
            be evaluated. As a result, exceptions may occur when setting field values,
            moving the loan between milestones, etc.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.LoanAccessExceptionsEnabled">
            <summary>
            Enables or disables exceptions when setting a field would violate a Loan Access Rule.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.LastModified">
            <summary>
            Gets the last modification date for the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.LoanOfficerID">
            <summary>
            Gets the Login ID of the Loan Officer for the current loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.LoanProcessorID">
            <summary>
            Gets the Login ID of the Loan Processor for the current loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.LoanCloserID">
            <summary>
            Gets the Login ID of the Loan Processor for the current loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.Fields">
            <summary>
            Provides access to all of the fields on the loan.
            </summary>
            <example>
The following code creates a new loan, sets the value of several fields
and then commits the loan to the database.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the empty shell for the new loan. At this point,
      // the loan has not been saved to the Encompass server.
      Loan loan = session.Loans.CreateNew();

      // Set the loan folder and loan name for the loan
      loan.LoanFolder = "My Pipeline";
      loan.LoanName = "Harrison";

      // Set the borrower's name and property address
      loan.Fields["36"].Value = "Howard";        // First name
      loan.Fields["37"].Value = "Harrison";      // Last name
      loan.Fields["11"].Value = "235 Main St.";  // Street Address
      loan.Fields["12"].Value = "Anycity";       // City
      loan.Fields["13"].Value = "Anycounty";     // County
      loan.Fields["14"].Value = "CA";            // State
      loan.Fields["15"].Value = "94432";         // Zip code

      // Save the loan to the server
      loan.Commit();

      // Write out the GUID of the newly created loan
      Console.WriteLine(loan.Guid);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.BorrowerPairs">
            <summary>
            Provides access to defined sets of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair">BorrowerPairs</see> as well as providing methods
            and proeprties for adding or removing BorrowerPairs.
            </summary>
            <example>
      The following code demonstrates how to add a second Borrower Pair to a loan
      and then manipulate the two pairs independently.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.StartOffline("mary", "maryspwd");

         // Create the empty shell for the new loan.
         Loan loan = session.Loans.CreateNew();

         // Set the loan folder and loan name for the loan
         loan.LoanFolder = "My Pipeline";
         loan.LoanName = "BorrowerPairExample";

         // The loan is created with one Borrower Pair already, so set
         // the borrower and coborrower names
         loan.Fields["36"].Value = "Howard";        // Borrower First name
         loan.Fields["37"].Value = "Harrison";      // Borrower Last name
         loan.Fields["68"].Value = "Martha";        // CoBorrower First name
         loan.Fields["69"].Value = "Harrison";      // CoBorrower Last name

         // Add a new borrower pair to the loan
         BorrowerPair newPair = loan.BorrowerPairs.Add();

         // Set the borrower and coborrower information for this pair
         loan.Fields["36"].SetValueForBorrowerPair(newPair, "Caroline");
         loan.Fields["37"].SetValueForBorrowerPair(newPair, "Irving");
         loan.Fields["68"].SetValueForBorrowerPair(newPair, "Thomas");
         loan.Fields["69"].SetValueForBorrowerPair(newPair, "Irving");

         // Set the newly created pair as the current (primary) pair
         loan.BorrowerPairs.Current = newPair;

         // Set the mailing address for the "current" pair
         loan.Fields["1519"].Value = "20221 Highway 99";
         loan.Fields["1520"].Value = "Maynorsville";
         loan.Fields["1521"].Value = "IA";
         loan.Fields["1522"].Value = "51223";

         // Commit the changes to the server
         loan.Commit();

         // End the session gracefully
         session.End();
   }
}
        ]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.Liabilities">
            <summary>
            Provides access to the methods for adding to and removing from the defined
            set of liabilities for the loan.
            </summary>
            <example>
      The following code demonstrates how to add a new liability to an existing
      loan and then set its field values.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open an existing loan using the GUID from the command line
         Loan loan = session.Loans.Open(args[0]);

         // Lock the loan so we can modify it safely
         loan.Lock();

         // Add a new liability and save off it index in the liabilities list
         int newIndex = loan.Liabilities.Add();

         // Set the value of some of theliability fields
         loan.Fields.GetFieldAt("FL02", newIndex).Value = "Bank of Havasu";  // Liability Holder
         loan.Fields.GetFieldAt("FL10", newIndex).Value = "2220001-003";     // Account #
         loan.Fields.GetFieldAt("FL20", newIndex).Value = "(555) 555-0233";  // Holder Phone

         // Commit the changes to the server
         loan.Commit();

         // Release the lock on the loan
         loan.Unlock();

         // End the session to gracefully disconnect from the server
         session.End();
   }
}
        ]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.Mortgages">
            <summary>
            Provides access to the methods for adding to and removing from the defined
            set of mortgages for the loan.
            </summary>
            <example>
      The following code demonstrates how to add an existing mortgage to a loan file
      and then set a subset of its field values.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open an existing loan using the GUID from the command line
         Loan loan = session.Loans.Open(args[0]);

         // Lock the loan so we can modify it safely
         loan.Lock();

         // Add a new liability and save off it index in the liabilities list
         int newIndex = loan.Liabilities.Add();

         // Set the value of some of theliability fields
         loan.Fields.GetFieldAt("FL02", newIndex).Value = "Thomas Olden";    // Asset Holder
         loan.Fields.GetFieldAt("FL10", newIndex).Value = "2220001-003";     // Account #
         loan.Fields.GetFieldAt("FL20", newIndex).Value = "(555) 555-0233";  // Holder Phone

         // Create an IntegerList to hold the ID of the liability
         IntegerList liabIds = new IntegerList();
         liabIds.Add(newIndex);

          // Create the new Mortgage, attaching the liability to it
         int newMort = loan.Mortgages.Add(liabIds);

         // Set some Mortgage-related fields
         loan.Fields.GetFieldAt("FM04", newMort).Value = "2056 Blue Hollow Lane";  // Street Addr
         loan.Fields.GetFieldAt("FM06", newMort).Value = "Lake Mary";              // City
         loan.Fields.GetFieldAt("FM07", newMort).Value = "FL";                     // State

         // Commit the changes to the server
         loan.Commit();

         // Release the lock on the loan
         loan.Unlock();

         // End the session to gracefully disconnect from the server
         session.End();
   }
}
        ]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.Deposits">
            <summary>
            Provides access to the methods for adding to and removing from the defined
            set of assets/deposits for the loan.
            </summary>
            <example>
      The following code demonstrates how to add a new asset/deposit to an existing
      loan and then set its field values.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open an existing loan using the GUID from the command line
         Loan loan = session.Loans.Open(args[0]);

         // Lock the loan so we can modify it safely
         loan.Lock();

         // Add a new deposit and save off it index in the deposits list
         int newIndex = loan.Deposits.Add();

         // Set the value of some of theliability fields
         loan.Fields.GetFieldAt("FD02", newIndex).Value = "Thomas Olden";    // Asset Holder
         loan.Fields.GetFieldAt("FD10", newIndex).Value = "2220001-003";     // Account #
         loan.Fields.GetFieldAt("FD26", newIndex).Value = "(555) 555-0233";  // Holder Phone

         // Commit the changes to the server
         loan.Commit();

         // Release the lock on the loan
         loan.Unlock();

         // End the session to gracefully disconnect from the server
         session.End();
   }
}
        ]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.BorrowerResidences">
            <summary>
            Provides access to the methods for adding to and removing from the defined
            set of borrower residences (past and current) for the loan.
            </summary>
            <example>
      The following code demonstrates how to print the addresses of all of the
      prior residences of both the primary borrower and the coborrower.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Loop over the set of residences, printing the addresses
      for (int i = 1; i <= loan.BorrowerResidences.Count; i++)
      {
         Console.WriteLine("Borrower Residence " + i + ":");
         Console.WriteLine(loan.Fields.GetFieldAt("BR04", i));   // Street Addr
         Console.WriteLine(loan.Fields.GetFieldAt("BR06", i));   // City
         Console.WriteLine(loan.Fields.GetFieldAt("BR07", i));   // State
         Console.WriteLine(loan.Fields.GetFieldAt("BR08", i));   // Zip
      }

      // Now the CoBorrower residences
      for (int i = 1; i <= loan.CoBorrowerResidences.Count; i++)
      {
         Console.WriteLine("CoBorrower Residence " + i + ":");
         Console.WriteLine(loan.Fields.GetFieldAt("CR04", i));   // Street Addr
         Console.WriteLine(loan.Fields.GetFieldAt("CR06", i));   // City
         Console.WriteLine(loan.Fields.GetFieldAt("CR07", i));   // State
         Console.WriteLine(loan.Fields.GetFieldAt("CR08", i));   // Zip
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.CoBorrowerResidences">
            <summary>
            Provides access to the methods for adding to and removing from the defined
            set of coborrower residences (past and current) for the loan.
            </summary>
            <example>
      The following code demonstrates how to print the addresses of all of the
      prior residences of both the primary borrower and the coborrower.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Loop over the set of residences, printing the addresses
      for (int i = 1; i <= loan.BorrowerResidences.Count; i++)
      {
         Console.WriteLine("Borrower Residence " + i + ":");
         Console.WriteLine(loan.Fields.GetFieldAt("BR04", i));   // Street Addr
         Console.WriteLine(loan.Fields.GetFieldAt("BR06", i));   // City
         Console.WriteLine(loan.Fields.GetFieldAt("BR07", i));   // State
         Console.WriteLine(loan.Fields.GetFieldAt("BR08", i));   // Zip
      }

      // Now the CoBorrower residences
      for (int i = 1; i <= loan.CoBorrowerResidences.Count; i++)
      {
         Console.WriteLine("CoBorrower Residence " + i + ":");
         Console.WriteLine(loan.Fields.GetFieldAt("CR04", i));   // Street Addr
         Console.WriteLine(loan.Fields.GetFieldAt("CR06", i));   // City
         Console.WriteLine(loan.Fields.GetFieldAt("CR07", i));   // State
         Console.WriteLine(loan.Fields.GetFieldAt("CR08", i));   // Zip
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.BorrowerEmployers">
            <summary>
            Provides access to the methods for adding to and removing from the defined
            set of borrower employers (past and current) for the loan.
            </summary>
            <example>
      The following code demonstrates how to print the names and locations of all of the
      prior employers for both the primary borrower and the coborrower.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Loop over the set of residences, printing the addresses
      for (int i = 1; i <= loan.BorrowerEmployers.Count; i++)
      {
         Console.WriteLine("Borrower Employer " + i + ":");
         Console.WriteLine(loan.Fields.GetFieldAt("BE02", i));   // Employer Name
         Console.WriteLine(loan.Fields.GetFieldAt("BE05", i));   // City
         Console.WriteLine(loan.Fields.GetFieldAt("BE06", i));   // State
      }

      // Now the CoBorrower residences
      for (int i = 1; i <= loan.CoBorrowerEmployers.Count; i++)
      {
         Console.WriteLine("CoBorrower Employer " + i + ":");
         Console.WriteLine(loan.Fields.GetFieldAt("CE02", i));   // Employer Name
         Console.WriteLine(loan.Fields.GetFieldAt("CE05", i));   // City
         Console.WriteLine(loan.Fields.GetFieldAt("CE06", i));   // State
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.CoBorrowerEmployers">
            <summary>
            Provides access to the methods for adding to and removing from the defined
            set of coborrower employers (past and current) for the loan.
            </summary>
            <example>
      The following code demonstrates how to print the names and locations of all of the
      prior employers for both the primary borrower and the coborrower.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Loop over the set of residences, printing the addresses
      for (int i = 1; i <= loan.BorrowerEmployers.Count; i++)
      {
         Console.WriteLine("Borrower Employer " + i + ":");
         Console.WriteLine(loan.Fields.GetFieldAt("BE02", i));   // Employer Name
         Console.WriteLine(loan.Fields.GetFieldAt("BE05", i));   // City
         Console.WriteLine(loan.Fields.GetFieldAt("BE06", i));   // State
      }

      // Now the CoBorrower residences
      for (int i = 1; i <= loan.CoBorrowerEmployers.Count; i++)
      {
         Console.WriteLine("CoBorrower Employer " + i + ":");
         Console.WriteLine(loan.Fields.GetFieldAt("CE02", i));   // Employer Name
         Console.WriteLine(loan.Fields.GetFieldAt("CE05", i));   // City
         Console.WriteLine(loan.Fields.GetFieldAt("CE06", i));   // State
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.AdditionalVestingParties">
            <summary>
            Provides access to the methods for adding to and removing from the defined
            set of Additiona Vesting Parties for the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.Log">
            <summary>
            Provides access to the loan's log, which provides a record of all
            events, past and future, in the timeline of the current loan.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="Loan.xml" path="Examples/Example[@name=&quot;Loan.Log&quot;]/*"/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.MilestoneTemplate">
            <summary>
            Provides access to the loan's current MilestoneTemplate, which provides information of the
            template applied to the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.Attachments">
            <summary>
            Provides access to the set of documents attached to the loan through the
            loan's eFolder.
            </summary>
            <example>
The following code demonstrates how to iterate over each attachment associated
with a loan and extract it to disk.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Iterate over the list of attachments, saving them to the C:\Temp folder
      foreach (Attachment att in loan.Attachments)
         att.SaveToDisk("C:\\Temp\\" + att.Name);

      // Close the loan, discarding all of our changes
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.Associates">
            <summary>
            Gets the collection of Loan Associates for the loan.
            </summary>
            <example>
      The following code assigns a users to the fixed Loan Officer role in the loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");
      loan.Lock();

      User u = session.Users.GetUser("officer");
      loan.Associates.AssignUser(FixedRole.LoanOfficer, u);

      // Save and close the loan file
      loan.Commit();
      loan.Close();
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.Contacts">
            <summary>
            Gets the collection of Contact Relationships for the loan.
            </summary>
            <example>
      The following code assigns a users to the fixed Loan Officer role in the loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");

      // Iterate over the contact relationships that are part of the loan
      // and identify the appraiser, if one exists.
      foreach (LoanContactRelationship rel in loan.Contacts)
        if (rel.RelationshipType == LoanContactRelationshipType.Appraiser)
        {
          BizContact contact = (BizContact)rel.OpenContact();
          Console.WriteLine("The appraiser is " + contact.FullName +
            " and has an email address of " + contact.BizEmail);
          break;
        }

      // Close the loan file
      loan.Close();
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.AuditTrail">
            <summary>
            Provides access to audit trail information for the loan.
            </summary>
            <example>
      The following code demonstrates how to retrieve the list of all fields
      included in the Audit Trail and, for each field, display the history of changes
      to its value.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Iterate over the list of fields that are included in the audit trail
      foreach (string fieldId in loan.AuditTrail.GetAuditFieldList())
      {
        Console.WriteLine("Audit trail for field " + fieldId);

        // Retrieve the history for the current field
        AuditTrailEntryList entries = loan.AuditTrail.GetHistory(fieldId);
        
        // Iterate over the historical changes and print the time of the change and
        // the user's identity that made the change.
        foreach (AuditTrailEntry e in entries)
          Console.WriteLine("   -> " + e.Timestamp + " by " + e.UserName + " (" + e.UserID + ") -> " + e.Field.FormattedValue);

        Console.WriteLine();
      }

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.Servicing">
            <summary>
            Provides access to interim servicing data for the loan.
            </summary>
            <example>
      The following code demonstrates how to activate the servicing activities
      for a loan and display the payment schedule for the loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Set the first payment date on the loan. This is a required field before
      // starting servicing since it determines the payment schedule for the loan
      loan.Fields["682"].Value = "6/1/2008";

      // First, activate the servicing if not already started. This will calculate
      // the initial payment schedule for the loan.
      if (!loan.Servicing.IsStarted())
        loan.Servicing.Start();

      // Display the payment schedule on the screen, showing the date of each
      // payment along with the amount of principal and interest due.
      PaymentSchedule schedule = loan.Servicing.GetPaymentSchedule();

      foreach (ScheduledPayment payment in schedule.Payments)
        Console.WriteLine(payment.DueDate + ": P = " + payment.Principal + ", I = " + payment.Interest);

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.LinkedLoan">
            <summary>
            Returns the loan which is linked to the current loan or <c>null</c> if
            no loan is currently linked.
            </summary>
            <remarks>Linked loans are typically used in a piggy-back loan scenario
            in which one loan is the primary and the other the secondary. The relative positions
            of the loans is determined by the lien positions set on the loans themselves.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.MSLock">
            <summary>
            Gets or sets if the Milestone list is locked.
            </summary>
            <remarks>
            A true value means the Milestone list is locked in manual mode and MilestoneTemplate will not be applied automatically on save.
            A false value means the Milestone list is not in manual mode and MillstoneTemplate will be applied automatically on save.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.MSDateLock">
            <summary>
            Gets or sets if the Milestone dates are locked.
            </summary>
            <remarks>
            A true value means future expected milestone dates will not but updated when one is changed.
            A false value means future expected milestone dates will be upated when one is changed.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.Locked">
            <summary>
            Indicates if the Loan object has been locked for editing by the current session.
            </summary>
            <remarks>This method only indicates if the loan is locked by the current session (i.e.
            the Lock() method has been invoked successfully). It does not indicate whether or not
            a lock is held on the loan by another user. For information on what lock, if any, is held
            on the loan, use the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetCurrentLock"/> method.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.LockedExclusive">
            <summary>
            Indicates if an exclusive lock is held on the loan by the current session.
            </summary>
            <remarks>This method only indicates if the loan is locked by the current session (i.e.
            the Lock() method has been invoked successfully). It does not indicate whether or not
            a lock is held on the loan by another user. For information on what lock, if any, is held
            on the loan, use the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.GetCurrentLock"/> method.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.IsNew">
            <summary>
            Gets a flag indicating if the loan has yet to be saved to the server.
            </summary>
            <remarks>A new loan will not be saved to the server until Commit is called.
            </remarks>
            <example>
      The following code demonstrates how to use the IsNew property.
      <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Create the empty shell for the new loan.
         Loan loan = session.Loans.CreateNew();

         // Print the value of the IsNew flag
         Console.WriteLine("IsNew = " + loan.IsNew.ToString());

         // Set the loan folder and name at a minimum
         loan.LoanFolder = "My Pipeline";
         loan.LoanName = "IsNewExample";

         // Now commit the loan to the server
         loan.Commit();

         // Print the value of the IsNew flag
         Console.WriteLine("IsNew = " + loan.IsNew.ToString());

         // End the session to gracefully disconnect from the server
         session.End();
   }
}
             ]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loan.Modified">
            <summary>
            Indicates if the loan has been modified since it was opened or last saved.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociateType">
            <summary>
            Enumeration for the different types of Loan Associates which can be assigned to a loan.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociateType.None">
            <summary>No associate is assigned</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociateType.User">
            <summary>A User is assigned as the loan associate</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociateType.UserGroup">
            <summary>A UserGroup is assigned as the loan associate</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate">
            <summary>
            Represents a Loan Associate within a loan.
            </summary>
            <remarks>A Loan Associate is a <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.User"/> or <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.UserGroup"/> which has been
            assigned to a role within the loan. A loan associate is typically reposnsible for completeing
            one or more tasks during the lifetime of a loan.</remarks>
            <example>
      The following code displays the list of all assigned loan associates. If an
      individual user is assigned to the role, that user's name is displayed. If
      a User Group is assigned, the group's name is displayed instead.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");

      // Loop thru the assigned loan associates and display the user info for each.
      foreach (LoanAssociate la in loan.Associates)
      {
        // Write the role abbreviation and the user's name
        if (la.AssociateType == LoanAssociateType.User)
          Console.WriteLine(la.WorkflowRole.Abbreviation + ": " + la.User.FullName);
        else if (la.AssociateType == LoanAssociateType.UserGroup)
          Console.WriteLine(la.WorkflowRole.Abbreviation + ": " + la.UserGroup.Name);
      }

      // Close the loan file
      loan.Close();
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanAssociate">
            <summary>
            Interface for ILoanAssociate class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.AssignUser(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Assigns a User to be the loan associate.
            </summary>
            <param name="associateUser">The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.User"/> to assign, or <c>null</c> to remove the assignment.</param>
            <remarks>This method is provided as an alternative to using the User property when the API is
            used from within a COM-based environment.</remarks>
            <example>
      The following code assigns a user to the role which is tied to the
      Approval milestone.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");
      loan.Lock();

      // Retrieve the Approval Milestone event
      Milestone approval = session.Loans.Milestones.Approval;
      MilestoneEvent approvalEvent = loan.Log.MilestoneEvents.GetEventForMilestone(approval.Name);

      // Retrieve the user to be assigned to the milestone
      User user = session.Users.GetUser("kjones");

      // Assign the user to the milestones
      approvalEvent.LoanAssociate.AssignUser(user);

      // Save and close the loan file
      loan.Commit();
      loan.Close();
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.AssignUserGroup(EllieMae.Encompass.BusinessObjects.Users.UserGroup)">
            <summary>
            Assigns a User to be the loan associate.
            </summary>
            <param name="associateGroup">The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.UserGroup"/> to assign, or <c>null</c> to remove the assignment.</param>
            <remarks>This method is provided as an alternative to using the User property when the API is
            used from within a COM-based environment.</remarks>
            <example>
      The following code assigns a user group to the Lock Desk role in the loan.
      The assignnment is only made if the role is not already assigned to another
      user or group.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");
      loan.Lock();

      // Retrieve the Lock Desk role from the Roles collection
      Role lockDeskRole = session.Loans.Roles.GetRoleByName("Lock Desk");

      // Retrieve the Lock Desk UserGroup that will be assigned to the role
      UserGroup lockDeskGroup = session.Users.Groups.GetGroupByName("Lock Desk Users");

      // Retrieve the LoanAssociate record(s) from the role and assign the group
      foreach (LoanAssociate la in loan.Associates.GetAssociatesByRole(lockDeskRole))
        if (!la.Assigned)
          la.AssignUserGroup(lockDeskGroup);

      // Save and close the loan file
      loan.Commit();
      loan.Close();
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.Unassign">
            <summary>
            Clears the current assignment, if any, to the currently assigned <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.User"/>
            or <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.UserGroup"/>.
            </summary>
            <example>
      The following example locates all LoanAssociate records assigned to a 
      particular user and removes the user from the record. This will ensure the
      user is no longer a loan associate for the loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");
      loan.Lock();

      // Retrieve the user to be removed from the loan
      User user = session.Users.GetUser("rsmith");

      // For each loan associate record assigned to this user, unassign the record
      foreach (LoanAssociate la in loan.Associates.GetAssociatesByUser(user))
        la.Unassign();

      // Save and close the loan file
      loan.Commit();
      loan.Close();
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.Equals(System.Object)">
            <summary>
            Provides an equality operator for two LoanAssociate objects.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.GetHashCode">
            <summary>
            Provides a hash code for the Loan Associate.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.AssociateType">
            <summary>
            Gets the type of associate represented by the object.
            </summary>
            <example>
      The following code displays the list of all assigned loan associates. If an
      individual user is assigned to the role, that user's name is displayed. If
      a User Group is assigned, the group's name is displayed instead.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");

      // Loop thru the assigned loan associates and display the user info for each.
      foreach (LoanAssociate la in loan.Associates)
      {
        // Write the role abbreviation and the user's name
        if (la.AssociateType == LoanAssociateType.User)
          Console.WriteLine(la.WorkflowRole.Abbreviation + ": " + la.User.FullName);
        else if (la.AssociateType == LoanAssociateType.UserGroup)
          Console.WriteLine(la.WorkflowRole.Abbreviation + ": " + la.UserGroup.Name);
      }

      // Close the loan file
      loan.Close();
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.User">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.User"/> who is acting as the loan associate for the specified
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.WorkflowRole"/>.
            </summary>
            <remarks>This property will return <c>null</c> if there is no user currently
            associated with the specified role/milestone. See also the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.AssignUser(EllieMae.Encompass.BusinessObjects.Users.User)"/> method
            as an alternate to setting this property from a COM-based environment.</remarks>
            <example>
      The following code displays the list of all assigned loan associates. If an
      individual user is assigned to the role, that user's name is displayed. If
      a User Group is assigned, the group's name is displayed instead.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");

      // Loop thru the assigned loan associates and display the user info for each.
      foreach (LoanAssociate la in loan.Associates)
      {
        // Write the role abbreviation and the user's name
        if (la.AssociateType == LoanAssociateType.User)
          Console.WriteLine(la.WorkflowRole.Abbreviation + ": " + la.User.FullName);
        else if (la.AssociateType == LoanAssociateType.UserGroup)
          Console.WriteLine(la.WorkflowRole.Abbreviation + ": " + la.UserGroup.Name);
      }

      // Close the loan file
      loan.Close();
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.UserGroup">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.UserGroup"/> who is acting as the loan associate for the specified
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.WorkflowRole"/>.
            </summary>
            <remarks>This property will return <c>null</c> if there is no User Group currently
            associated with the specified role/milestone. See also the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.AssignUserGroup(EllieMae.Encompass.BusinessObjects.Users.UserGroup)"/> method
            as an alternate to setting this property from a COM-based environment.</remarks>
            <example>
      The following code displays the list of all assigned loan associates. If an
      individual user is assigned to the role, that user's name is displayed. If
      a User Group is assigned, the group's name is displayed instead.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");

      // Loop thru the assigned loan associates and display the user info for each.
      foreach (LoanAssociate la in loan.Associates)
      {
        // Write the role abbreviation and the user's name
        if (la.AssociateType == LoanAssociateType.User)
          Console.WriteLine(la.WorkflowRole.Abbreviation + ": " + la.User.FullName);
        else if (la.AssociateType == LoanAssociateType.UserGroup)
          Console.WriteLine(la.WorkflowRole.Abbreviation + ": " + la.UserGroup.Name);
      }

      // Close the loan file
      loan.Close();
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.ContactName">
            <summary>
            Gets or sets the contact email for the loan associate.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.ContactEmail">
            <summary>
            Gets or sets the contact email for the loan associate.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.ContactPhone">
            <summary>
            Gets or sets the contact phone number for the loan associate.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.ContactFax">
            <summary>
            Gets or sets the contact phone number for the loan associate.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.ContactCellPhone">
            <summary>
            Gets or sets the contact phone number for the loan associate.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.MilestoneEvent">
            <summary>
            Gets the MilestoneEvent through which the loan associate became linked to the specified
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/>.
            </summary>
            <remarks>If this user is directly associated to a Role without being linked to a milestone
            (i.e a "milestone-free role"), this property will return <c>null</c>.</remarks>
            <example>
      The following example locates all LoanAssociate records assigned to a
      particular user and removes the user from the record. This will ensure the
      user is no longer a loan associate for the loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");
      loan.Lock();

      // Fetch the core Processing milestone
      Milestone processing = session.Loans.Milestones.Processing;

      // Retrieve the Loan Processor Team user group
      UserGroup lpteam = session.Users.Groups.GetGroupByName("Loan Processor Team");

      // Iterate thru the LoanAssociates, looking for any associate which is tied to
      // the Processing milestone or any milestone which is a sub-milestone of Processing.
      // When found, assign the user group to that associate record.
      foreach (LoanAssociate la in loan.Associates)
        if (la.MilestoneEvent != null)
        {
          // Retrieve the milestone event
          Milestone ms = session.Loans.Milestones.GetItemByName(la.MilestoneEvent.MilestoneName);

          if (ms == processing || ms.CoreMilestone == processing)
            la.AssignUserGroup(lpteam);
        }

      // Save and close the loan file
      loan.Commit();
      loan.Close();
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.WorkflowRole">
            <summary>
            Gets the user's role within the loan.
            </summary>
            <remarks>This property, which is never <c>null</c>, returns the user's assigned Role within the 
            loan.</remarks>
            <example>
      The following code displays the list of all assigned loan associates. If an
      individual user is assigned to the role, that user's name is displayed. If
      a User Group is assigned, the group's name is displayed instead.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");

      // Loop thru the assigned loan associates and display the user info for each.
      foreach (LoanAssociate la in loan.Associates)
      {
        // Write the role abbreviation and the user's name
        if (la.AssociateType == LoanAssociateType.User)
          Console.WriteLine(la.WorkflowRole.Abbreviation + ": " + la.User.FullName);
        else if (la.AssociateType == LoanAssociateType.UserGroup)
          Console.WriteLine(la.WorkflowRole.Abbreviation + ": " + la.UserGroup.Name);
      }

      // Close the loan file
      loan.Close();
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.AllowWriteAccess">
            <summary>
            Gets or sets whether the loan associate for this role/milestone should be grated write
            access to the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.Assigned">
            <summary>
            Determines if the current LoanAssociate record is assigned to a <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.User"/>
            or <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate.UserGroup"/>.
            </summary>
            <example>
      The following code assigns a user group to the Lock Desk role in the loan.
      The assignnment is only made if the role is not already assigned to another
      user or group.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");
      loan.Lock();

      // Retrieve the Lock Desk role from the Roles collection
      Role lockDeskRole = session.Loans.Roles.GetRoleByName("Lock Desk");

      // Retrieve the Lock Desk UserGroup that will be assigned to the role
      UserGroup lockDeskGroup = session.Users.Groups.GetGroupByName("Lock Desk Users");

      // Retrieve the LoanAssociate record(s) from the role and assign the group
      foreach (LoanAssociate la in loan.Associates.GetAssociatesByRole(lockDeskRole))
        if (!la.Assigned)
          la.AssignUserGroup(lockDeskGroup);

      // Save and close the loan file
      loan.Commit();
      loan.Close();
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociates">
            <summary>
            Provides access to the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate"/> objects for the loan.
            </summary>
            <remarks>A Loan Associate is a user who is assigned to a role within a loan. Common examples
            are the Loan Officer and Loan Processor for the loan. Every milestone in the loan can have
            assigned to it a distinct loan associate. However, an associate can also be assigned to a role
            which is not associated with any milestone.</remarks>
            <example>
      The following code demonstrates how retrieve all users who are assigned
      to the Loan Officer role on a loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Retrieve the Role object for the LO role
      Role loRole = session.Loans.Roles.GetRoleByAbbrev("LO");

      // Get all LoanAssociate objects for this role
      LoanAssociateList los = loan.Associates.GetAssociatesByRole(loRole);

      foreach (LoanAssociate lo in los)
      {
        if (lo.MilestoneEvent != null)
          Console.WriteLine("The user " + lo.User.ID + " is the LO for the "
            + lo.MilestoneEvent.MilestoneName + " milestone.");
        else
          Console.WriteLine("The user " + lo.User.ID + " is the LO for the "
            + "loan (not assigned to a milestone).");
      }

      // Close the loan
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanAssociates">
            <summary>
            Interface for ILoanAssociate class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociates.GetAssociatesByRole(EllieMae.Encompass.BusinessObjects.Loans.Role)">
            <summary>
            Returns the set of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate">LoanAssociates</see> that fill 
            the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/>.
            </summary>
            <param name="selectedRole">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> for which users are found.</param>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.LoanAssociateList"/> containing the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate"/> records
            for the specified role.</returns>
            <remarks>
            A role can be associated with multiple users by means of having multiple <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent"/>
            objects which are mapped to the same Role. In all other cases there can only be a single user
            associated with a given role.
            </remarks>
            <example>
      The following code demonstrates how retrieve all users who are assigned
      to the Loan Officer role on a loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Retrieve the Role object for the LO role
      Role loRole = session.Loans.Roles.GetRoleByAbbrev("LO");

      // Get all LoanAssociate objects for this role
      LoanAssociateList los = loan.Associates.GetAssociatesByRole(loRole);

      foreach (LoanAssociate lo in los)
      {
        if (lo.MilestoneEvent != null)
          Console.WriteLine("The user " + lo.User.ID + " is the LO for the "
            + lo.MilestoneEvent.MilestoneName + " milestone.");
        else
          Console.WriteLine("The user " + lo.User.ID + " is the LO for the "
            + "loan (not assigned to a milestone).");
      }

      // Close the loan
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociates.GetAssociatesByRole(EllieMae.Encompass.BusinessObjects.Loans.FixedRole)">
            <summary>
            Returns the set of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate">LoanAssociates</see> that fill 
            the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FixedRole"/>.
            </summary>
            <param name="selectedRole">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FixedRole"/> for which the associates will be found.</param>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.LoanAssociateList"/> containing the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate"/> records
            for the specified role.</returns>
            <remarks>If there is no <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> mapped to the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FixedRole"/>,
            then an empty collection will be returned.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociates.GetAssociatesByUser(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Returns the set of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate"/> objects that apply to a particular <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/>.
            </summary>
            <param name="associate">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/> whose associate records are being retrieved.</param>
            <returns>Returns a LoanAssociateList containing the set of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate"/> 
            objects assigned to the user.</returns>
            <remarks>Only LoanAssociate objects to which the user is directly assigned (i.e. not assigned
            thru membership of a UserGroup) will be returned.</remarks>
            <example>
      The following code demonstrates how reassign all of the roles in a loan
      from one user to another.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to enable editing
      loan.Lock();

      // Get the two user objects -- the source (officer) and target (newofficer)
      User priorUser = session.Users.GetUser("officer");
      User newUser = session.Users.GetUser("newofficer");

      // Find all roles the user is assigned to
      LoanAssociateList las = loan.Associates.GetAssociatesByUser(priorUser);

      foreach (LoanAssociate la in las)
        la.User = newUser;

      // Save the loan to commit this new payment
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociates.GetAssociatesByUser(EllieMae.Encompass.BusinessObjects.Users.User,System.Boolean)">
            <summary>
            Returns the set of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate"/> objects that apply to a particular <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/>.
            </summary>
            <param name="associate">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/> whose associate records are being retrieved.</param>
            <param name="includeGroups">Indicates if the method should inclyde LoanAssociate records
            that are assigned to UsersGroups to which the specified user belongs.</param>
            <returns>Returns a LoanAssociateList containing the set of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate"/> 
            objects assigned to the user.</returns>
            <example>
      The following code demonstrates how reassign all of the roles in a loan
      from one user to another.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to enable editing
      loan.Lock();

      // Get the two user objects -- the source (officer) and target (newofficer)
      User priorUser = session.Users.GetUser("officer");
      User newUser = session.Users.GetUser("newofficer");

      // Find all roles the user is assigned to
      LoanAssociateList las = loan.Associates.GetAssociatesByUser(priorUser);

      foreach (LoanAssociate la in las)
        la.User = newUser;

      // Save the loan to commit this new payment
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociates.GetAssociatesByUserGroup(EllieMae.Encompass.BusinessObjects.Users.UserGroup)">
            <summary>
            Returns the set of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate"/> objects that apply to a particular <see cref="T:EllieMae.Encompass.BusinessObjects.Users.UserGroup"/>.
            </summary>
            <param name="associate">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.UserGroup"/> whose associate records are being retrieved.</param>
            <returns>Returns a LoanAssociateList containing the set of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate"/> 
            objects assigned to the user group.</returns>
            <example>
The following code identifies all LoanAssociate records assigned to a
particular UserGroup and reassigns them to a new User.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to enable editing
      loan.Lock();

      // Retrieve the Loan Processor Team user group
      UserGroup lpteam = session.Users.Groups.GetGroupByName("Loan Processor Team");

      // Get the user to which the role will be reassigned
      User lpuser = session.Users.GetUser("jshipley");

      // Loop over all LoanAssociate records assigned to this group and reassign them
      // to the new user.
      foreach (LoanAssociate la in loan.Associates.GetAssociatesByUserGroup(lpteam))
        la.AssignUser(lpuser);

      // Save the loan to commit this new payment
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociates.GetMilestoneAssociates">
            <summary>
            Returns the set of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate"/> objects associated with Milestone events.
            </summary>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.LoanAssociateList"/> containing the matching Loan Associates.
            </returns>
            <example>
      The following code identifies all LoanAssociate records assigned to a
      particular UserGroup and reassigns them to a new User.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to enable editing
      loan.Lock();

      // Fetch the core Processing milestone
      Milestone processing = session.Loans.Milestones.Processing;

      // Get the User who will be the assigned user for the milestones
      User processingUser = session.Users.GetUser("sstevens");

      // Loop over the LoanAssociate records that are tied to Milestones, looking for
      // any record that's for the Processing milestone or any sub-milestone of Processing.
      foreach (LoanAssociate la in loan.Associates.GetMilestoneAssociates())
      {
        // Fetch the milestone for the record
        Milestone ms = session.Loans.Milestones.GetItemByName(la.MilestoneEvent.MilestoneName);

        if (ms == processing || ms.CoreMilestone == processing)
          la.AssignUser(processingUser);
      }

      // Save the loan to commit this new payment
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociates.AssignUser(EllieMae.Encompass.BusinessObjects.Loans.Role,EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Assigns the specified user as the Loan Associate for the specified role.
            </summary>
            <param name="roleToAssign">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> for which the user is assigned.</param>
            <param name="assignedUser">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/> to be assigned to the role.</param>
            <remarks>If there are multiple milestones that share the same role assignment, the specified
            user is assigned as the loan associate for all of the milestones.</remarks>
            <example>
      The following code assigns a specified user to all LoanAssociate records
      that are tied to the Loan Officer role.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to enable editing
      loan.Lock();

      // Get the user to which the role will be reassigned
      User user = session.Users.GetUser("kjones");

      // Fetch the Loan Officer role
      Role role = session.Loans.Roles.GetRoleByAbbrev("LO");

      // Assign the user to the specified role. This will update all LoanAssociate
      // records tied to the specified role.
      loan.Associates.AssignUser(role, user);

      // Iterate over all of the LoanAssociate records for the role and verify the user was
      // assigned. The error message should never be printed out.
      foreach (LoanAssociate la in loan.Associates.GetAssociatesByRole(role))
        if (!user.Equals(la.User))
        {
          Console.WriteLine("Error! The user was not assigned to the correct role!");
        }

      // Save the loan to commit this new payment
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociates.AssignUser(EllieMae.Encompass.BusinessObjects.Loans.FixedRole,EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Assigns the specified user as the Loan Associate for the specified role.
            </summary>
            <param name="roleToAssign">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FixedRole"/> for which the user is assigned.</param>
            <param name="assignedUser">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/> to be assigned to the role.</param>
            <remarks>If there are multiple milestones that share the same role assignment, the specified
            user is assigned as the loan associate for all of the milestones.</remarks>
            <example>
      The following code assigns a specified user to all LoanAssociate records
      that are tied to the fixed Loan Officer role.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to enable editing
      loan.Lock();

      // Get the user to which the role will be reassigned
      User user = session.Users.GetUser("kjones");

      // Assign the user to the specified role. This will update all LoanAssociate
      // records tied to the specified fixed role.
      loan.Associates.AssignUser(FixedRole.LoanOfficer, user);

      // Translate the FixedRole into an actual Role object
      Role role = session.Loans.Roles.GetFixedRole(FixedRole.LoanOfficer);

      // Iterate over all of the LoanAssociate records for the role and verify the user was
      // assigned. The error message should never be printed out.
      foreach (LoanAssociate la in loan.Associates.GetAssociatesByRole(role))
        if (!user.Equals(la.User))
        {
          Console.WriteLine("Error! The user was not assigned to the correct role!");
        }

      // Save the loan to commit this new payment
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociates.AssignUserGroup(EllieMae.Encompass.BusinessObjects.Loans.Role,EllieMae.Encompass.BusinessObjects.Users.UserGroup)">
            <summary>
            Assigns the specified User Group as the Loan Associate for the specified role.
            </summary>
            <param name="roleToAssign">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> for which the user is assigned.</param>
            <param name="assignedGroup">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.UserGroup"/> to be assigned to the role.</param>
            <remarks>If there are multiple milestones that share the same role assignment, the specified
            group is assigned as the loan associate for all of the milestones.</remarks>
            <example>
      The following code assigns a team of users to all LoanAssociate records
      that are tied to the Loan Processor role.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to enable editing
      loan.Lock();

      // Get the user to which the role will be reassigned
      UserGroup lpteam = session.Users.Groups.GetGroupByName("Loan Processing Team");

      // Get the Loan Processor role
      Role role = session.Loans.Roles.GetRoleByName("Loan Processor");

      // Assign the user to the specified role. This will update all LoanAssociate
      // records tied to the specified fixed role.
      loan.Associates.AssignUserGroup(role, lpteam);

      // Iterate over all of the LoanAssociate records for the role and verify the user was
      // assigned. The error message should never be printed out.
      foreach (LoanAssociate la in loan.Associates.GetAssociatesByRole(role))
        if (!lpteam.Equals(la.UserGroup))
        {
          Console.WriteLine("Error! The user was not assigned to the correct role!");
        }

      // Save the loan to commit this new payment
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociates.AssignUserGroup(EllieMae.Encompass.BusinessObjects.Loans.FixedRole,EllieMae.Encompass.BusinessObjects.Users.UserGroup)">
            <summary>
            Assigns the specified User Group as the Loan Associate for the specified role.
            </summary>
            <param name="roleToAssign">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FixedRole"/> for which the user is assigned.</param>
            <param name="assignedGroup">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.UserGroup"/> to be assigned to the role.</param>
            <remarks>If there are multiple milestones that share the same role assignment, the specified
            group is assigned as the loan associate for all of the milestones.</remarks>
            <example>
      The following code assigns a team of users to all LoanAssociate records
      that are tied to the fixed Loan Processor role.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to enable editing
      loan.Lock();

      // Get the user to which the role will be reassigned
      UserGroup lpteam = session.Users.Groups.GetGroupByName("Loan Processing Team");

      // Assign the user to the specified role. This will update all LoanAssociate
      // records tied to the specified fixed role.
      loan.Associates.AssignUserGroup(FixedRole.LoanProcessor, lpteam);

      // Map the FixedRole to the underlying Role object
      Role lprole = session.Loans.Roles.GetFixedRole(FixedRole.LoanProcessor);

      // Iterate over all of the LoanAssociate records for the role and verify the user was
      // assigned. The error message should never be printed out.
      foreach (LoanAssociate la in loan.Associates.GetAssociatesByRole(lprole))
        if (!lpteam.Equals(la.UserGroup))
        {
          Console.WriteLine("Error! The user was not assigned to the correct role!");
        }

      // Save the loan to commit this new payment
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociates.GetEnumerator">
            <summary>
            Returns an enumerator for the list of role associates
            </summary>
            <returns></returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAttachments">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/> objects that are associated with
            a loan.
            </summary>
            <remarks>Attachments represent documents which have been associated to the loan through
            the loan's eFolder. Any changes to the attachments collection will not be saved until
            the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Commit"/> method is invoked on the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan"/>.</remarks>
            <example>
The following code demonstrates how to iterate over each attachment associated
with a loan and extract it to disk.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Iterate over the list of attachments, saving them to the C:\Temp folder
      foreach (Attachment att in loan.Attachments)
         att.SaveToDisk("C:\\Temp\\" + att.Name);

      // Close the loan, discarding all of our changes
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanAttachments">
            <summary>
            Interface for LoanAttachments class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAttachments.GetAttachmentByName(System.String)">
            <summary>
            Retrieves an <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/> from the collection by name.
            </summary>
            <param name="name">The name of the attachment to retrieve.</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/> if the name is value,
            <c>null</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAttachments.Add(System.String)">
            <summary>
            Creates a new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/> to the loan from a file on disk.
            </summary>
            <param name="filePath">The path of a file that contains the attachment.</param>
            <returns>The new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/> object.</returns>
            <remarks>The underlying loan must be saved prior to adding attachments.
            Attempting to add attachments to an unsaved loan will result in an exception
            being thrown.</remarks>
            <example>
The following code demonstrates how to add a new attachment to a loan
and associate it with an existing TrackedDocument record.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan since we will be modifying it
      loan.Lock();

      // Create a new attachment by importing it from a TIFF document on disk
      Attachment att = loan.Attachments.Add("C:\\Scanner Output\\MyAppraisal.tif");

      // Now attach the new Attachment to the Appraisal on the loan
      LogEntryList appraisals = loan.Log.TrackedDocuments.GetDocumentsByTitle("Appraisal");

      if (appraisals.Count > 0)
      {
         TrackedDocument appraisal = (TrackedDocument) appraisals[0];
         appraisal.Attach(att);
      }

      // Save the changes to the loan, which commits the new attachment
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAttachments.AddObject(EllieMae.Encompass.BusinessObjects.DataObject,System.String)">
            <summary>
            Creates a new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/> to the loan from a <see cref="T:EllieMae.Encompass.BusinessObjects.DataObject"/>.
            </summary>
            <param name="data">The <see cref="T:EllieMae.Encompass.BusinessObjects.DataObject"/> containing the binary image of
            attachment.</param>
            <param name="fileExtension">The file extension for the object, e.g. "doc" or "pdf".</param>
            <returns>The new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/> object.</returns>
            <remarks>The underlying loan must be saved prior to adding attachments.
            Attempting to add attachments to an unsaved loan will result in an exception
            being thrown.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAttachments.AddImage(System.String)">
            <summary>
            Creates a new Image <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/> in the eFolder using the specified file.
            </summary>
            <param name="filePath">The path of a file that contains the attachment.</param>
            <returns>The new image <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/> object.</returns>
            <remarks>The underlying loan must be saved prior to adding attachments.
            Attempting to add image attachments to an unsaved loan will result in an exception
            being thrown.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAttachments.AddObjectImage(EllieMae.Encompass.BusinessObjects.DataObject,System.String)">
            <summary>
            Creates a new Image <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/> in the eFolder from a <see cref="T:EllieMae.Encompass.BusinessObjects.DataObject"/>.
            </summary>
            <param name="data">The <see cref="T:EllieMae.Encompass.BusinessObjects.DataObject"/> containing the binary image of the 
            attachment.</param>
            <param name="fileExtension">The file extension for the object, e.g. "doc" or "pdf".</param>
            <returns>The new Image <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/> object.</returns>
            <remarks>The underlying loan must be saved prior to adding attachments.
            Attempting to add attachments to an unsaved loan will result in an exception
            being thrown.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAttachments.Remove(EllieMae.Encompass.BusinessObjects.Loans.Attachment)">
            <summary>
            Removes an attachment from the loan.
            </summary>
            <param name="attachment">The attachment to be removed.</param>
            <remarks>Removing an attachment will cause it to be detached from any
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ReceivedDownload"/> or <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/> to which it
            was previously associated. Removed attachments are not recoverable once
            the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Commit"/> method is invoked on the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan"/>.
            </remarks>
            <example>
The following code demonstrates how to remove all attachments from a loan that
represent pages from received faxes.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan since we will be modifying it
      loan.Lock();

      for (int i = loan.Attachments.Count - 1; i >= 0; i--)
      {
         Attachment att = loan.Attachments[i];

         // Check if the attachment has an associated TrackedDocument entry and, if so, 
         // remove it.
         if (att.GetDocument() != null)
            loan.Attachments.Remove(att);
      }

      // Save the changes to the loan, which commits the new attachment
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAttachments.MovePageImage(EllieMae.Encompass.BusinessObjects.Loans.Attachment,EllieMae.Encompass.BusinessObjects.Loans.AttachmentPageImage,EllieMae.Encompass.BusinessObjects.Loans.Attachment)">
            <summary>
            Moves a Page Image from one attachment to another.
            </summary>
            <param name="sourceAttachment">The attachment to move the page image from.</param>
            <param name="attachmentPageImage">The page image to be moved.</param>
            <param name="targetAttachment">The attachment to move the page image to.</param>
            <remarks>
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAttachments.GetEnumerator">
            <summary>
            Provides an enumerator for the collection of attachments
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAttachments.Refresh">
            <summary>
            Refreshes the attachment collection to ensure all attachments are up-to-date.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAttachments.Count">
            <summary>
            Gets the number of attachments in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanAttachments.Item(System.Int32)">
            <summary>
            Retrieves an <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/> from the collection by index.
            </summary>
            <example>
The following code demonstrates how to iterate over each attachment associated
with a loan and extract it to disk.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class ContactManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Iterate over the list of attachments, saving them to the C:\Temp folder
      foreach (Attachment att in loan.Attachments)
         att.SaveToDisk("C:\\Temp\\" + att.Name);

      // Close the loan, discarding all of our changes
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAuditTrail">
            <summary>
            Provides access to Audit Trail data for the current loan.
            </summary>
            <remarks>When a field is added to the Encompass Audit Trail through the Admin Tools/Reporting
            Database interface, Encompass will store every change to the field along with the identity
            of the user who made teh change and the date/time of the change. This class provides the
            methods for retrieving the audit trail history for the loan.</remarks>
            <example>
      The following code demonstrates how to retrieve the list of all fields
      included in the Audit Trail and, for each field, display the history of changes
      to its value.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Iterate over the list of fields that are included in the audit trail
      foreach (string fieldId in loan.AuditTrail.GetAuditFieldList())
      {
        Console.WriteLine("Audit trail for field " + fieldId);

        // Retrieve the history for the current field
        AuditTrailEntryList entries = loan.AuditTrail.GetHistory(fieldId);
        
        // Iterate over the historical changes and print the time of the change and
        // the user's identity that made the change.
        foreach (AuditTrailEntry e in entries)
          Console.WriteLine("   -> " + e.Timestamp + " by " + e.UserName + " (" + e.UserID + ") -> " + e.Field.FormattedValue);

        Console.WriteLine();
      }

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanAuditTrail">
            <summary>
            Interface for the LoanAuditTrail class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAuditTrail.GetHistory(System.String)">
            <summary>
            Returns the full audit trail history for a field.
            </summary>
            <param name="fieldId">The ID of the auditable field.</param>
            <returns>Returns an AuditTrailEntryList object containing the history of the modifications
            to the specified field.</returns>
            <remarks>The specified field must be marked for inclusion in the Audit Trail, otherwise
            this method will throw an ArgumentException. The list that is returned will be sorted 
            chronologically with the most recent change first.</remarks>
            <example>
      The following code demonstrates how to retrieve the list of all fields
      included in the Audit Trail and, for each field, display the history of changes
      to its value.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Iterate over the list of fields that are included in the audit trail
      foreach (string fieldId in loan.AuditTrail.GetAuditFieldList())
      {
        Console.WriteLine("Audit trail for field " + fieldId);

        // Retrieve the history for the current field
        AuditTrailEntryList entries = loan.AuditTrail.GetHistory(fieldId);
        
        // Iterate over the historical changes and print the time of the change and
        // the user's identity that made the change.
        foreach (AuditTrailEntry e in entries)
          Console.WriteLine("   -> " + e.Timestamp + " by " + e.UserName + " (" + e.UserID + ") -> " + e.Field.FormattedValue);

        Console.WriteLine();
      }

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAuditTrail.GetHistory(System.String[])">
            <summary>
            Returns the full audit trail history for a field.
            </summary>
            <param name="fieldIds">The List of IDs of the auditable fields.</param>
            <returns>Returns an AuditTrailEntryList object containing the history of the modifications
            to the specified field.</returns>
            <remarks>The specified field must be marked for inclusion in the Audit Trail, otherwise
            this method will throw an ArgumentException. The list that is returned will be sorted 
            chronologically with the most recent change first.</remarks>
            <example>
      The following code demonstrates how to retrieve the list of all fields
      included in the Audit Trail and, for each field, display the history of changes
      to its value.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Iterate over the list of fields that are included in the audit trail
      foreach (string fieldId in loan.AuditTrail.GetAuditFieldList())
      {
        Console.WriteLine("Audit trail for field " + fieldId);

        // Retrieve the history for the current field
        AuditTrailEntryList entries = loan.AuditTrail.GetHistory(fieldId);
        
        // Iterate over the historical changes and print the time of the change and
        // the user's identity that made the change.
        foreach (AuditTrailEntry e in entries)
          Console.WriteLine("   -> " + e.Timestamp + " by " + e.UserName + " (" + e.UserID + ") -> " + e.Field.FormattedValue);

        Console.WriteLine();
      }

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAuditTrail.GetMostRecentEntry(System.String)">
            <summary>
            Gets the audit information for the most recent change to a field.
            </summary>
            <param name="fieldId">The ID of the auditable field.</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.AuditTrailEntry"/> for the most recent change to the 
            specified field.</returns>
            <remarks>The specified field must be marked for inclusion in the Audit Trail, otherwise
            this method will throw an ArgumentException.</remarks>
            <example>
      The following code demonstrates how to retrieve the most recent change
      events for each field in the audit trail.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Get the most recent change for each field in the audit trail
      AuditTrailEntryList auditEntries = loan.AuditTrail.GetMostRecentEntries();
      
      // Display each field ID and the identity of the user who made the most recent change
      foreach (AuditTrailEntry entry in auditEntries)
        Console.WriteLine("Field " + entry.Field.ID + " last changed " + entry.Timestamp 
          + " by " + entry.UserID);

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAuditTrail.GetMostRecentEntries">
            <summary>
            Gets the audit information for the most recent changes to al auditable fields.
            </summary>
            <returns>Returns the set of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.AuditTrailEntry"/> objects for the most recent changes to 
            all fields currently set to be auditable.</returns>
            <example>
      The following code demonstrates how to retrieve the most recent change
      events for each field in the audit trail.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Get the most recent change for each field in the audit trail
      AuditTrailEntryList auditEntries = loan.AuditTrail.GetMostRecentEntries();
      
      // Display each field ID and the identity of the user who made the most recent change
      foreach (AuditTrailEntry entry in auditEntries)
        Console.WriteLine("Field " + entry.Field.ID + " last changed " + entry.Timestamp 
          + " by " + entry.UserID);

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanAuditTrail.GetAuditFieldList">
            <summary>
            Returns the list of Field IDs which are part of the audit trail.
            </summary>
            <returns>Returns a StringList containing the IDs of the fields that are marked for
            inclusion in the Audit Trail.</returns>
            <example>
      The following code demonstrates how to retrieve the list of all fields
      included in the Audit Trail and, for each field, display the history of changes
      to its value.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Iterate over the list of fields that are included in the audit trail
      foreach (string fieldId in loan.AuditTrail.GetAuditFieldList())
      {
        Console.WriteLine("Audit trail for field " + fieldId);

        // Retrieve the history for the current field
        AuditTrailEntryList entries = loan.AuditTrail.GetHistory(fieldId);
        
        // Iterate over the historical changes and print the time of the change and
        // the user's identity that made the change.
        foreach (AuditTrailEntry e in entries)
          Console.WriteLine("   -> " + e.Timestamp + " by " + e.UserName + " (" + e.UserID + ") -> " + e.Field.FormattedValue);

        Console.WriteLine();
      }

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanBorrowerPairs">
            <summary>
            Represents the collection of all <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair">BorrowerPair</see>
            associated with the current Loan.
            </summary>
            <example>
      The following code demonstrates how to add a second Borrower Pair to a loan
      and then manipulate the two pairs independently.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.StartOffline("mary", "maryspwd");

         // Create the empty shell for the new loan.
         Loan loan = session.Loans.CreateNew();

         // Set the loan folder and loan name for the loan
         loan.LoanFolder = "My Pipeline";
         loan.LoanName = "BorrowerPairExample";

         // The loan is created with one Borrower Pair already, so set
         // the borrower and coborrower names
         loan.Fields["36"].Value = "Howard";        // Borrower First name
         loan.Fields["37"].Value = "Harrison";      // Borrower Last name
         loan.Fields["68"].Value = "Martha";        // CoBorrower First name
         loan.Fields["69"].Value = "Harrison";      // CoBorrower Last name

         // Add a new borrower pair to the loan
         BorrowerPair newPair = loan.BorrowerPairs.Add();

         // Set the borrower and coborrower information for this pair
         loan.Fields["36"].SetValueForBorrowerPair(newPair, "Caroline");
         loan.Fields["37"].SetValueForBorrowerPair(newPair, "Irving");
         loan.Fields["68"].SetValueForBorrowerPair(newPair, "Thomas");
         loan.Fields["69"].SetValueForBorrowerPair(newPair, "Irving");

         // Set the newly created pair as the current (primary) pair
         loan.BorrowerPairs.Current = newPair;

         // Set the mailing address for the "current" pair
         loan.Fields["1519"].Value = "20221 Highway 99";
         loan.Fields["1520"].Value = "Maynorsville";
         loan.Fields["1521"].Value = "IA";
         loan.Fields["1522"].Value = "51223";

         // Commit the changes to the server
         loan.Commit();

         // End the session gracefully
         session.End();
   }
}
        ]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanBorrowerPairs">
            <summary>
            Interface for LoanBorrowerPairs class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanBorrowerPairs.Add">
            <summary>
            Adds a new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair">BorrowerPair</see> to the loan.
            </summary>
            <remarks><p>This method does not set the new borrower pair as the current
            pair. Use the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.LoanBorrowerPairs.Current">Current</see> property to make this
            pair current.</p>
            <p>This method requires that an exclusive lock be held on the loan.</p>
            </remarks>
            <example>
      The following code demonstrates how to add a second Borrower Pair to a loan
      and then manipulate the two pairs independently.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.StartOffline("mary", "maryspwd");

         // Create the empty shell for the new loan.
         Loan loan = session.Loans.CreateNew();

         // Set the loan folder and loan name for the loan
         loan.LoanFolder = "My Pipeline";
         loan.LoanName = "BorrowerPairExample";

         // The loan is created with one Borrower Pair already, so set
         // the borrower and coborrower names
         loan.Fields["36"].Value = "Howard";        // Borrower First name
         loan.Fields["37"].Value = "Harrison";      // Borrower Last name
         loan.Fields["68"].Value = "Martha";        // CoBorrower First name
         loan.Fields["69"].Value = "Harrison";      // CoBorrower Last name

         // Add a new borrower pair to the loan
         BorrowerPair newPair = loan.BorrowerPairs.Add();

         // Set the borrower and coborrower information for this pair
         loan.Fields["36"].SetValueForBorrowerPair(newPair, "Caroline");
         loan.Fields["37"].SetValueForBorrowerPair(newPair, "Irving");
         loan.Fields["68"].SetValueForBorrowerPair(newPair, "Thomas");
         loan.Fields["69"].SetValueForBorrowerPair(newPair, "Irving");

         // Set the newly created pair as the current (primary) pair
         loan.BorrowerPairs.Current = newPair;

         // Set the mailing address for the "current" pair
         loan.Fields["1519"].Value = "20221 Highway 99";
         loan.Fields["1520"].Value = "Maynorsville";
         loan.Fields["1521"].Value = "IA";
         loan.Fields["1522"].Value = "51223";

         // Commit the changes to the server
         loan.Commit();

         // End the session gracefully
         session.End();
   }
}
        ]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanBorrowerPairs.Remove(EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair)">
            <summary>
            Removes a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair">BorrowerPair</see> from the loan.
            </summary>
            <param name="pair">The BorrowerPair to be removed. This pair must belong
            to the current loan.</param>
            <remarks>A loan must always have a least one BorrowerPair. Thus, an attempt
            to remove the sole BorrowerPair will result in an InvalidOperationException.
            <p>This method requires that an exclusive lock be held on the loan.</p>
            </remarks>
            <example>
The following code removes all BorrowerPairs except the primary pair from
the loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to edit it
      loan.Lock();

      // Enumerate over the set of BorrowerPairs
      for (int i = loan.BorrowerPairs.Count - 1; i >= 0; i--)
      {
         // Fetch the current Borrower Pair
         BorrowerPair pair = loan.BorrowerPairs[i];

         if (pair != loan.BorrowerPairs.Current)
            loan.BorrowerPairs.Remove(pair);
      }

      // Commit the changes and unlock the loan
      loan.Commit();
      loan.Unlock();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanBorrowerPairs.Swap(EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair,EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair)">
            <summary>
            Swaps the positions of two BorrowerPairs in the list of pairs associated with the
            loan.
            </summary>
            <param name="pairA">The first pair to swap.</param>
            <param name="pairB">The second pair to swap.</param>
            <remarks>
            <p>This method requires that an exclusive lock be held on the loan.</p>
            </remarks>
            <example>
The following code removes all BorrowerPairs except the primary pair from
the loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to edit it
      loan.Lock();

      if (loan.BorrowerPairs.Count > 1)
      {
         // Retrieve the first two borrower pairs from the loan
         BorrowerPair pairA = loan.BorrowerPairs[0];
         BorrowerPair pairB = loan.BorrowerPairs[1];

         // Swap their oerder in the loan
         loan.BorrowerPairs.Swap(pairA, pairB);

         // Save the changes back to the server
         loan.Commit();
      }

      // Close the loan to release its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanBorrowerPairs.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the contents of the collection.
            </summary>
            <returns>An IEnuerator instance for the collection.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanBorrowerPairs.Refresh">
            <summary>
            Refreshes the list if it contents have become stale due to fields being
            modified on the underlying Loan.
            </summary>
            <example>
The following code modifies the set of Borrower Pairs and then calls Refresh()
to have changes to the underlying field data reflected in the BorrowerPairs
object.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Print the current state of the pairs
      dumpBorrowerPairs(loan);

      // Lock the loan so we can edit it safely
      loan.Lock();

      // Add a new Borrower Pair
      BorrowerPair newPair = loan.BorrowerPairs.Add();

      // Set this pair as the current pair
      loan.BorrowerPairs.Current = newPair;

      // Set the name for the primary borrower of the pair
      loan.Fields["36"].Value = "Janet";
      loan.Fields["37"].Value = "Hardesty";

      // Print the current state of the pairs again. Note that the
      // changes we just made are not reflected.
      dumpBorrowerPairs(loan);
      
      // Force a refresh of the Borrower pairs to reflect the changes we've made on
      // the underlying loan.
      loan.BorrowerPairs.Refresh();

      // Now when we print the borrower pairs, the changes from the underlying loan
      // will show.
      dumpBorrowerPairs(loan);
      
      // Close the loan, discarding all of our changes
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }

   // Writes all of the BorrowerPair information to the console
   private static void dumpBorrowerPairs(Loan loan)
   {
      // Loop over the BorrowerPairs, printing their names
      foreach (BorrowerPair pair in loan.BorrowerPairs)
      {
         Console.WriteLine("Borrower First Name:   " + pair.Borrower.FirstName);
         Console.WriteLine("Borrower Last Name:    " + pair.Borrower.LastName);
         Console.WriteLine("CoBorrower First Name: " + pair.CoBorrower.FirstName);
         Console.WriteLine("CoBorrower Last Name:  " + pair.CoBorrower.LastName);
      }
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanBorrowerPairs.GetPairByID(System.String)">
            <summary>
            Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair"/> with the specified ID.
            </summary>
            <param name="pairId">The ID of the desired borrower pair.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair"/> with the specified ID, if it exists;
            <c>null</c> otherwise.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanBorrowerPairs.Item(System.Int32)">
            <summary>
            Provides access to the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair">BorrowerPair</see>
            by index.
            </summary>
            <example>
The following code demonstrates how to enumerate the Borrower Pairs
associated with a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Enumerate over the set of BorrowerPairs
      for (int i = 0; i < loan.BorrowerPairs.Count; i++)
      {
         // Fetch the current Borrower Pair
         BorrowerPair pair = loan.BorrowerPairs[i];

         // Dump the personal info for this pair
         Console.WriteLine("Borrower Pair " + i);
         Console.WriteLine(loan.Fields["36"].GetValueForBorrowerPair(pair));  // Borrower First Name
         Console.WriteLine(loan.Fields["37"].GetValueForBorrowerPair(pair));  // Borrower Last Name
         Console.WriteLine(loan.Fields["68"].GetValueForBorrowerPair(pair));  // CoBorrower First Name
         Console.WriteLine(loan.Fields["69"].GetValueForBorrowerPair(pair));  // CoBorrower Last Name
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanBorrowerPairs.Count">
            <summary>
            Gets the number of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair">BorrowerPairs</see> defined in the
            Loan.
            </summary>
            <example>
The following code demonstrates how to enumerate the Borrower Pairs
associated with a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Enumerate over the set of BorrowerPairs
      for (int i = 0; i < loan.BorrowerPairs.Count; i++)
      {
         // Fetch the current Borrower Pair
         BorrowerPair pair = loan.BorrowerPairs[i];

         // Dump the personal info for this pair
         Console.WriteLine("Borrower Pair " + i);
         Console.WriteLine(loan.Fields["36"].GetValueForBorrowerPair(pair));  // Borrower First Name
         Console.WriteLine(loan.Fields["37"].GetValueForBorrowerPair(pair));  // Borrower Last Name
         Console.WriteLine(loan.Fields["68"].GetValueForBorrowerPair(pair));  // CoBorrower First Name
         Console.WriteLine(loan.Fields["69"].GetValueForBorrowerPair(pair));  // CoBorrower Last Name
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanBorrowerPairs.Current">
            <summary>
            Gets or sets the current BorrowerPair for the loan.
            </summary>
            <remarks>All subsequent field accesses that have a borrower or coborrower
            component will pertain to the selected pair.</remarks>
            <example>
      The following code demonstrates how to add a second Borrower Pair to a loan
      and then manipulate the two pairs independently.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.StartOffline("mary", "maryspwd");

         // Create the empty shell for the new loan.
         Loan loan = session.Loans.CreateNew();

         // Set the loan folder and loan name for the loan
         loan.LoanFolder = "My Pipeline";
         loan.LoanName = "BorrowerPairExample";

         // The loan is created with one Borrower Pair already, so set
         // the borrower and coborrower names
         loan.Fields["36"].Value = "Howard";        // Borrower First name
         loan.Fields["37"].Value = "Harrison";      // Borrower Last name
         loan.Fields["68"].Value = "Martha";        // CoBorrower First name
         loan.Fields["69"].Value = "Harrison";      // CoBorrower Last name

         // Add a new borrower pair to the loan
         BorrowerPair newPair = loan.BorrowerPairs.Add();

         // Set the borrower and coborrower information for this pair
         loan.Fields["36"].SetValueForBorrowerPair(newPair, "Caroline");
         loan.Fields["37"].SetValueForBorrowerPair(newPair, "Irving");
         loan.Fields["68"].SetValueForBorrowerPair(newPair, "Thomas");
         loan.Fields["69"].SetValueForBorrowerPair(newPair, "Irving");

         // Set the newly created pair as the current (primary) pair
         loan.BorrowerPairs.Current = newPair;

         // Set the mailing address for the "current" pair
         loan.Fields["1519"].Value = "20221 Highway 99";
         loan.Fields["1520"].Value = "Maynorsville";
         loan.Fields["1521"].Value = "IA";
         loan.Fields["1522"].Value = "51223";

         // Commit the changes to the server
         loan.Commit();

         // End the session gracefully
         session.End();
   }
}
        ]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationshipType">
            <summary>
            Enumeration of the possible relationships between a Contact and a Loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship">
            <summary>
            Represents the relationship between a Contact and a Loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanContactRelationship">
            <summary>
            Interface for LoanContactRelationship class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship.OpenLoan">
            <summary>
            Opens the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan"/> represented in this relationship.
            </summary>
            <returns>Returns the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan"/> object. The loan is not locked so you
            must call <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Lock"/> prior to editing or saving the returned loan.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship.OpenContact">
            <summary>
            Opens the <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.Contact"/> represented in this relationship.
            </summary>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.Contact"/> object for the specified contact.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship.LoanGuid">
            <summary>
            Gets the Guid of the loan to which the contact is related.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship.ContactID">
            <summary>
            Gets the ID of the contact to which the loan is related.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship.ContactType">
            <summary>
            Indicates if the specified contact is a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Borrower"/> or <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact"/>.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship.RelationshipType">
            <summary>
            Indicates the type of relationship between the contact and the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship.BorrowerPairIndex">
            <summary>
            Returns the Borrower Pair Index for a borrower-related contact.
            </summary>
            <remarks>This property will return -1 when the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship.ContactType"/> property indicates
            this is a BizContact relationship.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts">
            <summary>
            Represents the collections of contacts linked to the current loan.
            </summary>
            <remarks>Encompass permits <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan"/> and <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.Contact"/> objects to be linked
            together. This permits you to easily determine all of the contacts that are tied to a particular
            loan, or all loans tied to a particular contact.</remarks>
            <example>
      The following code creates a new BorrowerContact and then links it to an
      existing loan file. It then retrieves all loans for that contact to verify
      that the link loan is returned.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Create a new Borrower Contact. The contact myst be Commited before
      // we can link it to the loan.
      BorrowerContact contact = (BorrowerContact) session.Contacts.CreateNew(ContactType.Borrower);
      contact.FirstName = "CRM";
      contact.LastName = "Test";
      contact.Commit();

      // Retrieve the Borrower from from the primary BorrowerPair. This is the borrower
      // we will link the contact to.
      Borrower primaryBorrower = loan.BorrowerPairs[0].Borrower;
      loan.Contacts.LinkToBorrowerContact(contact, primaryBorrower);
      
      // Commit the loan to save this relationship
      loan.Commit();
      loan.Close();

      // Retrieve all loans for our new contact
      LoanContactRelationshipList relations = contact.GetLoanRelationships();

      foreach (LoanContactRelationship relation in relations)
        Console.WriteLine("This contact is the " + relation.RelationshipType
          + " for the loan " + relation.LoanGuid);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanContacts">
            <summary>
            Interface for LoanContacts class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts.GetBizContactRelationship(EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationshipType)">
            <summary>
            Gets a relationship from the loan based on the specified relationship type.
            </summary>
            <param name="relation">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationshipType"/> for which to retrieve the relationship object.</param>
            <returns>If a relationship exists with the specified type, the desired <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship"/>
            will be returned. Otherwise, <c>null</c> will be returned.</returns>
            <example>
      The following code demonstrates how to iterate over the set of all contacts
      linked to the current loan file.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Retrieve the Appraiser contact relationship, if one exists
      LoanContactRelationship relation = 
        loan.Contacts.GetBizContactRelationship(LoanContactRelationshipType.Appraiser);

      if (relation != null)
      {
        // Open the appraiser's information
        BizContact contact = (BizContact) session.Contacts.Open(relation.ContactID, relation.ContactType);

        // Retrieve all of the appraiser's other related loans
        LoanContactRelationshipList appraisedLoans = contact.GetLoanRelationships();

        // For each loan the contact has appraised, retrieve the loan's LoanNumber
        foreach (LoanContactRelationship rel in appraisedLoans)
        {
          // Set up the list of fields to retrieve from the loans.
          StringList fieldsToRetrieve = new StringList();
          fieldsToRetrieve.Add("Loan.LoanNumber");
          fieldsToRetrieve.Add("Loan.BorrowerLastName");

          // Retrieve the data
          LoanReportData reportData = session.Reports.SelectReportingFieldsForLoan(rel.LoanGuid, fieldsToRetrieve);

          // Display the output
          Console.WriteLine("The loan " + reportData["Loan.LoanNumber"] 
            + " (" + reportData["Loan.BorrowerLastName"] + ") was appraised by " + contact.FullName);
        }
      }

      // Close the loan
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts.GetBizContactRelationships">
            <summary>
            Gets all business relationships with the loan.
            </summary>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.LoanContactRelationshipList"/> containing all of the
            relationships that are tied to business contacts in the loan.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts.GetBorrowerRelationship(EllieMae.Encompass.BusinessObjects.Loans.Borrower)">
            <summary>
            Gets a borrower contact relationship for the specified borrower.
            </summary>
            <param name="borrower"></param>
            <returns>If a relationship exists for the specified borrower, a 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship"/> is returned. Otherwise, <c>null</c> is returned.</returns>
            <example>
      The following code retrieves the BorrowerContacts that are linked to the
      primary Borrower and Coborrower records in the loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Retrieve the BorrowerContacts for the primary borrower coborrower, if they are linked
      BorrowerPair p = loan.BorrowerPairs[0];

      // Retrieve the contact relationship for the borrower and coborrower
      LoanContactRelationship borrowerRel = loan.Contacts.GetBorrowerRelationship(p.Borrower);
      LoanContactRelationship coborrowerRel = loan.Contacts.GetBorrowerRelationship(p.CoBorrower);

      // Open the contacts and display their info
      if (borrowerRel != null)
      {
        // Retrieve the contact's information
        BorrowerContact borrower = (BorrowerContact)session.Contacts.Open(borrowerRel.ContactID,
          borrowerRel.ContactType);

        Console.WriteLine("Linked Borrower:  " + borrower.FullName + " (" + borrower.PersonalEmail + ")");
      }

      if (coborrowerRel != null)
      {
        // Retrieve the contact's information
        BorrowerContact coborrower = (BorrowerContact)session.Contacts.Open(coborrowerRel.ContactID,
          coborrowerRel.ContactType);

        Console.WriteLine("Linked Co-Borrower:  " + coborrower.FullName + " (" + coborrower.PersonalEmail + ")");
      }

      // Close the loan
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts.GetBorrowerRelationships">
            <summary>
            Gets all borrower and coborrower relationships with the loan.
            </summary>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.LoanContactRelationshipList"/> containing all of the
            relationships that are tied to borrower or coborrower records in the loan.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts.GetRelationshipsForContact(EllieMae.Encompass.BusinessObjects.Contacts.Contact)">
            <summary>
            Retrieves all <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship"/>s for the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.Contact"/>.
            </summary>
            <param name="contact">The <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.Contact"/> for which the relationships are being requested.</param>
            <returns>A collection of the LoanContactRelationships to which the contact is assigned. Either
            a <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact"/> or <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact"/> can be passed and the method will
            return the appropriate relations.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts.LinkToBizContact(EllieMae.Encompass.BusinessObjects.Contacts.BizContact,EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationshipType)">
            <summary>
            Sets a business contact relationship within the loan.
            </summary>
            <param name="contact">The contact to add as part of the relationship.</param>
            <param name="relationType">The type of relation the contact has to the loan.</param>
            <returns>Returns a new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship"/> for this relationship.</returns>
            <remarks>Only a single business contact can fulfill a relationship in any given loan. If
            the specified relationship is already assigned to an existing contact, that relationship
            will be discarded and replaced with this new relationship.
            This method only creates the relationship between the loan and contact. The contact data is not copied to the loan.</remarks>
            <example>
      The following code searches the Business Contacts for a company whose name
      matches the Appraisal Company name in a loan. If a match is found, the
      BizContact is linked to the Loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Run a query to locate a Business Contact that matches the Appraiser in the loan file
      StringFieldCriterion cri = new StringFieldCriterion();
      cri.FieldName = "Contact.CompanyName";
      cri.Value = loan.Fields["617"].FormattedValue;   // Field 617 is the Appraisal Company Name

      // Execute the query to get the matching contact(s)
      ContactList contacts = session.Contacts.Query(cri, ContactLoanMatchType.None, ContactType.Biz);

      if (contacts.Count > 0)
      {
        // Retrieve the first BizContact from the result set
        BizContact contact = (BizContact)contacts[0];

        // Link the contact to the loan in the Appraisal relation
        loan.Contacts.LinkToBizContact(contact, LoanContactRelationshipType.Appraiser);
        
        loan.Fields["617"].Value = contact.CompanyName;
        
        string fullStreet = contact.BizAddress.Street1;
        if (!string.IsNullOrEmpty(contact.BizAddress.Street2.Trim()))
          fullStreet += ", " + contact.BizAddress.Street2;
        loan.Fields["619"].Value = fullStreet;

        loan.Fields["620"].Value = contact.BizAddress.City;
        loan.Fields["1244"].Value = contact.BizAddress.State;
        loan.Fields["621"].Value = contact.BizAddress.Zip;
        loan.Fields["618"].Value = contact.FullName;
        loan.Fields["974"].Value = contact.LicenseNumber;
        loan.Fields["622"].Value = contact.WorkPhone;
        loan.Fields["89"].Value = contact.BizEmail;
        loan.Fields["VEND.X526"].Value = contact.MobilePhone;
        loan.Fields["1246"].Value = contact.FaxNumber;
        
      }
      
      // Commit the loan to save this relationship
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts.UnlinkBizContact(EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationshipType)">
            <summary>
            Breaks the link between a <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact"/> and the loan.
            </summary>
            <param name="relationType">The relation type to be broken.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts.UnlinkAllBizContacts">
            <summary>
            Breaks all links between <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact"/> records and the loan.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts.LinkToBorrowerContact(EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact,EllieMae.Encompass.BusinessObjects.Loans.Borrower)">
            <summary>
            Links a <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact"/> to the loan.
            </summary>
            <param name="contact">The <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact"/> to be linked to the loan.</param>
            <param name="loanBorrower">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Borrower"/> from the loan file to which the contact
            will be linked.</param>
            <remarks>For each <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Borrower"/> within the loan, a single <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact"/>
            can be linked. If a BorrowerContact is already linked to the specified Borrower, that
            relationship will be overwritten by this new relationship.
            </remarks>
            <example>
      The following code creates a new BorrowerContact and then links it to an
      existing loan file. It then retrieves all loans for that contact to verify
      that the link loan is returned.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Create a new Borrower Contact. The contact myst be Commited before
      // we can link it to the loan.
      BorrowerContact contact = (BorrowerContact) session.Contacts.CreateNew(ContactType.Borrower);
      contact.FirstName = "CRM";
      contact.LastName = "Test";
      contact.Commit();

      // Retrieve the Borrower from from the primary BorrowerPair. This is the borrower
      // we will link the contact to.
      Borrower primaryBorrower = loan.BorrowerPairs[0].Borrower;
      loan.Contacts.LinkToBorrowerContact(contact, primaryBorrower);
      
      // Commit the loan to save this relationship
      loan.Commit();
      loan.Close();

      // Retrieve all loans for our new contact
      LoanContactRelationshipList relations = contact.GetLoanRelationships();

      foreach (LoanContactRelationship relation in relations)
        Console.WriteLine("This contact is the " + relation.RelationshipType
          + " for the loan " + relation.LoanGuid);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts.UnlinkBorrower(EllieMae.Encompass.BusinessObjects.Loans.Borrower)">
            <summary>
            Breaks the link between a <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact"/> and the loan.
            </summary>
            <param name="loanBorrower">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Borrower"/> for which the relationship should be broken.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts.UnlinkAllBorrowerContacts">
            <summary>
            Breaks all link between <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Borrower"/>s  and the loan.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts.Unlink(EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship)">
            <summary>
            Breaks a specific link between a contact and the loan.
            </summary>
            <param name="relation">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship"/> to be broken.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts.UnlinkAll">
            <summary>
            Breaks all links between contacts and the loan.
            </summary>
            <remarks>This method is equivalent to calling the pair of methods <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts.UnlinkAllBizContacts"/>
            and <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts.UnlinkAllBorrowerContacts"/>.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts.UnlinkContact(EllieMae.Encompass.BusinessObjects.Contacts.Contact)">
            <summary>
            Breaks all links between the loan and the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.Contact"/>.
            </summary>
            <param name="contact">The contact, either a <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact"/> or <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact"/>
            to be unlinked from the loan.</param>
            <remarks>This method will remove all links between the specified contact and the loan.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanContacts.GetEnumerator">
            <summary>
            Returns an enumerator for the collection of all loan contact relationships.
            </summary>
            <returns>An IEnumerator implementation for the collection.</returns>
            <example>
      The following code demonstrates how to iterate over the set of all contacts
      linked to the current loan file.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Contacts;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Iterate over all of the contacts related to the current loan, opening each to
      // display the user's contact information.
      foreach (LoanContactRelationship relation in loan.Contacts)
      {
        // Retrieve the specified contact
        Contact contact = session.Contacts.Open(relation.ContactID, relation.ContactType);

        // Print the contact's contact info
        Console.WriteLine(relation.RelationshipType + ": "
          + contact.FullName + " " + contact.PersonalEmail);
      }

      // Close the loan
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanDeposits">
            <summary>
            Provides access to the set of Assets/Deposits associated with a loan.
            </summary>
            <remarks>The items within this set are indexed starting with the value
            1. An attempt to access an item in this collection with a value less than
            1 will result in an InvalidArgumentException.
            </remarks>
            <example>
      The following code demonstrates how to add a new asset/deposit to an existing
      loan and then set its field values.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open an existing loan using the GUID from the command line
         Loan loan = session.Loans.Open(args[0]);

         // Lock the loan so we can modify it safely
         loan.Lock();

         // Add a new deposit and save off it index in the deposits list
         int newIndex = loan.Deposits.Add();

         // Set the value of some of theliability fields
         loan.Fields.GetFieldAt("FD02", newIndex).Value = "Thomas Olden";    // Asset Holder
         loan.Fields.GetFieldAt("FD10", newIndex).Value = "2220001-003";     // Account #
         loan.Fields.GetFieldAt("FD26", newIndex).Value = "(555) 555-0233";  // Holder Phone

         // Commit the changes to the server
         loan.Commit();

         // Release the lock on the loan
         loan.Unlock();

         // End the session to gracefully disconnect from the server
         session.End();
   }
}
        ]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanDeposits">
            <summary>
            Interface for LoanDeposits class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanDeposits.Add">
            <summary>
            Adds a new deposit to the loan.
            </summary>
            <returns>The function returns the index of the newly created deposit.
            This value should be used to access deposit-related loan fields
            using the GetFieldAt() method of the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanFields">LoanFields</see>
            object.
            </returns>
            <example>
The following code demonstrates how to add a new asset/deposit to an existing
loan and then set its field values.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan so we can modify it safely
      loan.Lock();

      // Add a new deposit and save off it index in the deposits list
      int newIndex = loan.Deposits.Add();

      // Set the value of some of theliability fields
      loan.Fields.GetFieldAt("FD02", newIndex).Value = "Thomas Olden";    // Asset Holder
      loan.Fields.GetFieldAt("FD10", newIndex).Value = "2220001-003";     // Account #
      loan.Fields.GetFieldAt("FD26", newIndex).Value = "(555) 555-0233";  // Holder Phone

      // Commit the changes to the server
      loan.Commit();

      // Release the lock on the loan
      loan.Unlock();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanDeposits.RemoveAt(System.Int32)">
            <summary>
            Removes a deposit from the current loan.
            </summary>
            <param name="index">The 1-based index of the deposit to remove.</param>
            <example>
The following code removes all deposit verification records from a loan file.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to edit it
      loan.Lock();

      // Loop over all of the currently defined deposits attached to the loan.
      // The desposits are indexed starting at 1, so the loop must adjust
      // accordingly.
      for (int i = loan.Deposits.Count; i >= 1; i--)
      {
         // Write out the name of the account holder
         Console.WriteLine("Deposit Holder: " + loan.Fields.GetFieldAt("DD02", i).Value);

         // Remove the deposit
         loan.Deposits.RemoveAt(i);
      }

      // Commit the changes to the server and unlock the loan
      loan.Commit();
      loan.Unlock();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanDeposits.Count">
            <summary>
            Gets the number of Deposits defined for the current loan.
            </summary>
            <example>
The following code removes all deposit verification records from a loan file.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to edit it
      loan.Lock();

      // Loop over all of the currently defined deposits attached to the loan.
      // The desposits are indexed starting at 1, so the loop must adjust
      // accordingly.
      for (int i = loan.Deposits.Count; i >= 1; i--)
      {
         // Write out the name of the account holder
         Console.WriteLine("Deposit Holder: " + loan.Fields.GetFieldAt("DD02", i).Value);

         // Remove the deposit
         loan.Deposits.RemoveAt(i);
      }

      // Commit the changes to the server and unlock the loan
      loan.Commit();
      loan.Unlock();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanEmployers">
            <summary>
            Provides access to a set of Employers associated with a loan.
            </summary>
            <remarks>The items within this set are indexed starting with the value
            1. An attempt to access an item in this collection with a value less than
            1 will result in an InvalidArgumentException.
            </remarks>
            <example>
      The following code demonstrates how to print the names and locations of all of the
      prior employers for both the primary borrower and the coborrower.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Loop over the set of residences, printing the addresses
      for (int i = 1; i <= loan.BorrowerEmployers.Count; i++)
      {
         Console.WriteLine("Borrower Employer " + i + ":");
         Console.WriteLine(loan.Fields.GetFieldAt("BE02", i));   // Employer Name
         Console.WriteLine(loan.Fields.GetFieldAt("BE05", i));   // City
         Console.WriteLine(loan.Fields.GetFieldAt("BE06", i));   // State
      }

      // Now the CoBorrower residences
      for (int i = 1; i <= loan.CoBorrowerEmployers.Count; i++)
      {
         Console.WriteLine("CoBorrower Employer " + i + ":");
         Console.WriteLine(loan.Fields.GetFieldAt("CE02", i));   // Employer Name
         Console.WriteLine(loan.Fields.GetFieldAt("CE05", i));   // City
         Console.WriteLine(loan.Fields.GetFieldAt("CE06", i));   // State
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanEmployers">
            <summary>
            Interface for LoanEmployers class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanEmployers.Add(System.Boolean)">
            <summary>
            Adds a new employer definition to the set.
            </summary>
            <param name="current">A flag indicating if the employer represents
            the borrower's/coborrower's current employer.</param>
            <returns>The index of the newly created employer.</returns>
            <example>
The following code adds an employer verification record for the coborrower 
associated with the current loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to edit it
      loan.Lock();

      // Add a new Employment verification record for the coborrower
      int index = loan.CoBorrowerEmployers.Add(true);

      // Populate the fields for the record
      loan.Fields.GetFieldAt("CE02", index).Value = "Megacorp Industries";
      loan.Fields.GetFieldAt("CE05", index).Value = "Rahway";
      loan.Fields.GetFieldAt("CE06", index).Value = "NJ";

      // Commit the changes to the server and unlock the loan
      loan.Commit();
      loan.Unlock();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanEmployers.RemoveAt(System.Int32)">
            <summary>
            Removes an employer definition from the set.
            </summary>
            <param name="index">The 1-based index of the employer to remove.</param>
            <example>
The following code removes all employment verification records for the 
primary borrower from a loan file.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the empty shell for the new loan. 
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to edit it
      loan.Lock();

      // Loop over all of the currently defined employer records for
      // the primary borrower. The records are indexed starting at 1, 
      // so the loop be set adjust accordingly.
      for (int i = loan.BorrowerEmployers.Count; i >= 1; i--)
      {
         // Write out the name of the account holder
         Console.WriteLine("Employer Name: " + loan.Fields.GetFieldAt("BE02", i).Value);

         // Remove the deposit
         loan.BorrowerEmployers.RemoveAt(i);
      }

      // Commit the changes to the server and unlock the loan
      loan.Commit();
      loan.Unlock();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanEmployers.Count">
            <summary>
            Gets the number of employer definitions within the set.
            </summary>
            <example>
The following code removes all employment verification records for the 
primary borrower from a loan file.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the empty shell for the new loan. 
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to edit it
      loan.Lock();

      // Loop over all of the currently defined employer records for
      // the primary borrower. The records are indexed starting at 1, 
      // so the loop be set adjust accordingly.
      for (int i = loan.BorrowerEmployers.Count; i >= 1; i--)
      {
         // Write out the name of the account holder
         Console.WriteLine("Employer Name: " + loan.Fields.GetFieldAt("BE02", i).Value);

         // Remove the deposit
         loan.BorrowerEmployers.RemoveAt(i);
      }

      // Commit the changes to the server and unlock the loan
      loan.Commit();
      loan.Unlock();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanField">
            <summary>
            Represents a single field of the loan file.
            </summary>
            <example>
The following code demonstrates how the properties of a LoanField are
affected by locking and calculations.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Set the base loan amount and appraised value of the home
      loan.Fields["1109"].Value = "250000";    // Loan amount, excluding fees
      loan.Fields["136"].Value = "370000";     // Purchase price
      loan.Fields["356"].Value = "375000";     // Appraised amount
      loan.Recalculate();

      // Get the LTV field for the loan (field ID 353)
      LoanField ltv = loan.Fields["353"];

      // Print out the properties of the field
      dumpLoanField(ltv);

      // Generally, the LTV field would be unlocked, so we'll lock it will no 
      // longer be affected by calculations.
      ltv.Locked = true;
      ltv.Value = "0.75";
      dumpLoanField(ltv);

      // Reclaculate and dump it again. The Value will not have change but the 
      // OriginalValue field will reflect the correctly calculated LTV.
      loan.Recalculate();
      dumpLoanField(ltv);

      // Unlock the field and recalculate. The calculated LTV will now overwrite the
      // value we explicitly set above.
      ltv.Locked = false;
      loan.Recalculate();
      dumpLoanField(ltv);

      // Close the loan to release its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }

   // Dumps the properties of a loan field
   private static void dumpLoanField(LoanField field)
   {
      Console.WriteLine("Formatted Value:   " + field.Value);
      Console.WriteLine("Unformatted Value: " + field.UnformattedValue);
      Console.WriteLine("Original Value:    " + field.OriginalValue);
      Console.WriteLine("Format:            " + field.Format);
      Console.WriteLine("Locked:            " + field.Locked);
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanField">
            <summary>
            Interface for LoanField class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanField.setFieldValue(System.String)">
            <summary>
            Sets the value if a field in the loan.
            </summary>
            <param name="value">The new value for the field.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanField.GetValueForBorrowerPair(EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair)">
            <summary>
            Gets the value of a field for a specific <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair">BorrowerPair</see>
            other than the current one.
            </summary>
            <param name="pair">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair">BorrowerPair</see> for which to 
            retrieve the value.</param>
            <returns>The value of the field for the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair">BorrowerPair</see>
            </returns>
            <example>
The following code demonstrates how to use the LoanFields object to access
various fields on a Loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Print our the property address for the loan. Since there's only a
      // single value for each field, just use the field ID directly with
      // the LoanFields indexer property.
      Console.WriteLine("Street: " + loan.Fields["11"].Value);
      Console.WriteLine("City:   " + loan.Fields["12"].Value);
      Console.WriteLine("County: " + loan.Fields["13"].Value);
      Console.WriteLine("State:  " + loan.Fields["14"].Value);

      // Now print out the names of the "primary" Borrower pair.
      // Since this pair is primary, we can use the field IDs directly
      // with the indexer property.
      Console.WriteLine("Borrower First Name:   " + loan.Fields["36"].Value);
      Console.WriteLine("Borrower Last Name:    " + loan.Fields["37"].Value);
      Console.WriteLine("CoBorrower First Name: " + loan.Fields["68"].Value);
      Console.WriteLine("CoBorrower Last Name:  " + loan.Fields["69"].Value);

      // Now output the name of all of the other borrower pairs.
      for (int i = 0; i < loan.BorrowerPairs.Count; i++)
      {
         BorrowerPair pair = loan.BorrowerPairs[i];

         if (pair != loan.BorrowerPairs.Current)
         {
            // Because these pairs are not the Current (i.e. primary) pair, we
            // must use the GetValueForBorrowerPair() function to get the field
            // value for the specified pair.
            Console.WriteLine("Borrower Pair " + i + ":");
            Console.WriteLine("Borrower First Name:   " + loan.Fields["36"].GetValueForBorrowerPair(pair));
            Console.WriteLine("Borrower Last Name:    " + loan.Fields["37"].GetValueForBorrowerPair(pair));
            Console.WriteLine("CoBorrower First Name: " + loan.Fields["68"].GetValueForBorrowerPair(pair));
            Console.WriteLine("CoBorrower Last Name:  " + loan.Fields["69"].GetValueForBorrowerPair(pair));
         }
      }
      
      // Dump the liability verification records for the loan
      for (int i = 1; i <= loan.Liabilities.Count; i++)
      {
         // Use the LoanField object's GetFieldAt() method to get the field value for
         // a specified liablity.
         Console.WriteLine("Liability " + i + ":");
         Console.WriteLine("Holder:   " + loan.Fields.GetFieldAt("FL02", i).Value);
         Console.WriteLine("Account:  " + loan.Fields.GetFieldAt("FL10", i).Value);
      
         // Alternatively, you can construct the entire loan field ID manually
         // for the specific subitem.
         Console.WriteLine("Balance:  " + loan.Fields["FL" + i.ToString("00") + "13"].Value);
      }

      // Close the loan to release its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanField.SetValueForBorrowerPair(EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair,System.String)">
            <summary>
            Sets the value of a field for a specific <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair">BorrowerPair</see>
            other than the current one.
            </summary>
            <param name="pair">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair">BorrowerPair</see> for which to 
            retrieve the value.</param>
            <param name="value">The value to be assigned to the specified field</param>
            <example>
The following code demonstrates how to read and write the value of a loan field.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan for changes
      loan.Lock();

      // Retrieve the BorrowerPair for borrower "John Smith"
      for (int i = 0; i < loan.BorrowerPairs.Count; i++)
      {
         BorrowerPair pair = loan.BorrowerPairs[i];

         if ((pair.Borrower.FirstName == "John") && (pair.Borrower.LastName == "Smith"))
         {
            // Fix the first name for this borrower
            loan.Fields["36"].SetValueForBorrowerPair(pair, "Jonathan");
         }
      }

      // Save the changes and close the loan to release the resources
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanField.UnformattedValue">
            <summary>
            Gets the raw, unformatted value of the underlying field.
            </summary>
            <example>
The following code demonstrates how the properties of a LoanField are
affected by locking and calculations.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Set the base loan amount and appraised value of the home
      loan.Fields["1109"].Value = "250000";    // Loan amount, excluding fees
      loan.Fields["136"].Value = "370000";     // Purchase price
      loan.Fields["356"].Value = "375000";     // Appraised amount
      loan.Recalculate();

      // Get the LTV field for the loan (field ID 353)
      LoanField ltv = loan.Fields["353"];

      // Print out the properties of the field
      dumpLoanField(ltv);

      // Generally, the LTV field would be unlocked, so we'll lock it will no 
      // longer be affected by calculations.
      ltv.Locked = true;
      ltv.Value = "0.75";
      dumpLoanField(ltv);

      // Reclaculate and dump it again. The Value will not have change but the 
      // OriginalValue field will reflect the correctly calculated LTV.
      loan.Recalculate();
      dumpLoanField(ltv);

      // Unlock the field and recalculate. The calculated LTV will now overwrite the
      // value we explicitly set above.
      ltv.Locked = false;
      loan.Recalculate();
      dumpLoanField(ltv);

      // Close the loan to release its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }

   // Dumps the properties of a loan field
   private static void dumpLoanField(LoanField field)
   {
      Console.WriteLine("Formatted Value:   " + field.Value);
      Console.WriteLine("Unformatted Value: " + field.UnformattedValue);
      Console.WriteLine("Original Value:    " + field.OriginalValue);
      Console.WriteLine("Format:            " + field.Format);
      Console.WriteLine("Locked:            " + field.Locked);
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanField.EllieMae#Encompass#BusinessObjects#Loans#ILoanField#Value">
            <summary>
            Gets or sets the value of the field thru the ILoanField interface.
            </summary>
            <remarks>This method exists primarilly for COM-based clients which cannot marshal values
            properly to the object-valued Value property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanField.OriginalValue">
            <summary>
            Gets the calculated value of the field when a field is locked.
            </summary>
            <remarks>When a field is locked, calculations will no longer affect
            the Value of the field. Instead, the calculated value will be placed in
            the OriginalValue property of the field.</remarks>
            <example>
The following code demonstrates how the properties of a LoanField are
affected by locking and calculations.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Set the base loan amount and appraised value of the home
      loan.Fields["1109"].Value = "250000";    // Loan amount, excluding fees
      loan.Fields["136"].Value = "370000";     // Purchase price
      loan.Fields["356"].Value = "375000";     // Appraised amount
      loan.Recalculate();

      // Get the LTV field for the loan (field ID 353)
      LoanField ltv = loan.Fields["353"];

      // Print out the properties of the field
      dumpLoanField(ltv);

      // Generally, the LTV field would be unlocked, so we'll lock it will no 
      // longer be affected by calculations.
      ltv.Locked = true;
      ltv.Value = "0.75";
      dumpLoanField(ltv);

      // Reclaculate and dump it again. The Value will not have change but the 
      // OriginalValue field will reflect the correctly calculated LTV.
      loan.Recalculate();
      dumpLoanField(ltv);

      // Unlock the field and recalculate. The calculated LTV will now overwrite the
      // value we explicitly set above.
      ltv.Locked = false;
      loan.Recalculate();
      dumpLoanField(ltv);

      // Close the loan to release its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }

   // Dumps the properties of a loan field
   private static void dumpLoanField(LoanField field)
   {
      Console.WriteLine("Formatted Value:   " + field.Value);
      Console.WriteLine("Unformatted Value: " + field.UnformattedValue);
      Console.WriteLine("Original Value:    " + field.OriginalValue);
      Console.WriteLine("Format:            " + field.Format);
      Console.WriteLine("Locked:            " + field.Locked);
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanField.Locked">
            <summary>
            Gets or sets a flag indicating if the field is locked.
            </summary>
            <remarks><p>Locking a field provides a way of overriding the value 
            obtained through automatic calculation. If this property is set to <c>true</c>,
            the field will never be overwritten by the Encompass Calculation Engine.
            Setting this property to <c>false</c> allows the field's value to be overwritten
            as needed to ensure consistency with its dependent fields.</p>
            <p>Locking or unlocking a field requires that you have an exclusive lock on the loan.</p>
            </remarks>
            <example>
The following code demonstrates how the properties of a LoanField are
affected by locking and calculations.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Set the base loan amount and appraised value of the home
      loan.Fields["1109"].Value = "250000";    // Loan amount, excluding fees
      loan.Fields["136"].Value = "370000";     // Purchase price
      loan.Fields["356"].Value = "375000";     // Appraised amount
      loan.Recalculate();

      // Get the LTV field for the loan (field ID 353)
      LoanField ltv = loan.Fields["353"];

      // Print out the properties of the field
      dumpLoanField(ltv);

      // Generally, the LTV field would be unlocked, so we'll lock it will no 
      // longer be affected by calculations.
      ltv.Locked = true;
      ltv.Value = "0.75";
      dumpLoanField(ltv);

      // Reclaculate and dump it again. The Value will not have change but the 
      // OriginalValue field will reflect the correctly calculated LTV.
      loan.Recalculate();
      dumpLoanField(ltv);

      // Unlock the field and recalculate. The calculated LTV will now overwrite the
      // value we explicitly set above.
      ltv.Locked = false;
      loan.Recalculate();
      dumpLoanField(ltv);

      // Close the loan to release its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }

   // Dumps the properties of a loan field
   private static void dumpLoanField(LoanField field)
   {
      Console.WriteLine("Formatted Value:   " + field.Value);
      Console.WriteLine("Unformatted Value: " + field.UnformattedValue);
      Console.WriteLine("Original Value:    " + field.OriginalValue);
      Console.WriteLine("Format:            " + field.Format);
      Console.WriteLine("Locked:            " + field.Locked);
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanField.ReadOnly">
            <summary>
            Indicates if the current loan field is read-only.
            </summary>
            <remarks>A field may be read-only either because the underlying <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor"/>
            is read-only or because of a Loan Access Rule. Field Access Rules are not enforced by the API
            and thus will not factor in to this proeprty's value.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldDescriptors">
            <summary>
            Summary description for FieldDescriptors.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanFieldDescriptors">
            <summary>
            Interface for FieldDescriptors class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldDescriptors.Refresh">
            <summary>
            Refreshes the list of custom fields from the Encompass Server.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldDescriptors.GetEnumerator">
            <summary>
            Provides an enumerator for both standard and custom fields.
            </summary>
            <returns>Returns an enumerator which first iterates over standard fields and then
            iterates over custom fields.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldDescriptors.Item(System.String)">
            <summary>
            Looks up a field using its unique field ID.
            </summary>
            <param name="fieldId"></param>
            <returns></returns>
            <remarks>This method will find the field whether it is a custom field or a standard
            Encompass field.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldDescriptors.StandardFields">
            <summary>
            Returns the list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor"/> objects for the defined standard fields.
            </summary>
            <returns></returns>
            <remarks>This method provided for users of non-.NET-based environments. Users of
            .NET- can retrieve this list though the static StandardFields property of the
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptors"/> class.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldDescriptors.VirtualFields">
            <summary>
            Returns the list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor"/> objects for the defined virtual fields.
            </summary>
            <returns></returns>
            <remarks>This method provided for users of non-.NET-based environments. Users of
            .NET- can retrieve this list though the static VirtualFields property of the
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptors"/> class.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanFieldDescriptors.CustomFields">
            <summary>
            Returns the list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor"/> objects for the defined custom fields.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanFields">
            <summary>
            Represents the collection of all fields on a Loan.
            </summary>
            <example>
The following code demonstrates how to use the LoanFields object to access
various fields on a Loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Print our the property address for the loan. Since there's only a
      // single value for each field, just use the field ID directly with
      // the LoanFields indexer property.
      Console.WriteLine("Street: " + loan.Fields["11"].Value);
      Console.WriteLine("City:   " + loan.Fields["12"].Value);
      Console.WriteLine("County: " + loan.Fields["13"].Value);
      Console.WriteLine("State:  " + loan.Fields["14"].Value);

      // Now print out the names of the "primary" Borrower pair.
      // Since this pair is primary, we can use the field IDs directly
      // with the indexer property.
      Console.WriteLine("Borrower First Name:   " + loan.Fields["36"].Value);
      Console.WriteLine("Borrower Last Name:    " + loan.Fields["37"].Value);
      Console.WriteLine("CoBorrower First Name: " + loan.Fields["68"].Value);
      Console.WriteLine("CoBorrower Last Name:  " + loan.Fields["69"].Value);

      // Now output the name of all of the other borrower pairs.
      for (int i = 0; i < loan.BorrowerPairs.Count; i++)
      {
         BorrowerPair pair = loan.BorrowerPairs[i];

         if (pair != loan.BorrowerPairs.Current)
         {
            // Because these pairs are not the Current (i.e. primary) pair, we
            // must use the GetValueForBorrowerPair() function to get the field
            // value for the specified pair.
            Console.WriteLine("Borrower Pair " + i + ":");
            Console.WriteLine("Borrower First Name:   " + loan.Fields["36"].GetValueForBorrowerPair(pair));
            Console.WriteLine("Borrower Last Name:    " + loan.Fields["37"].GetValueForBorrowerPair(pair));
            Console.WriteLine("CoBorrower First Name: " + loan.Fields["68"].GetValueForBorrowerPair(pair));
            Console.WriteLine("CoBorrower Last Name:  " + loan.Fields["69"].GetValueForBorrowerPair(pair));
         }
      }
      
      // Dump the liability verification records for the loan
      for (int i = 1; i <= loan.Liabilities.Count; i++)
      {
         // Use the LoanField object's GetFieldAt() method to get the field value for
         // a specified liablity.
         Console.WriteLine("Liability " + i + ":");
         Console.WriteLine("Holder:   " + loan.Fields.GetFieldAt("FL02", i).Value);
         Console.WriteLine("Account:  " + loan.Fields.GetFieldAt("FL10", i).Value);
      
         // Alternatively, you can construct the entire loan field ID manually
         // for the specific subitem.
         Console.WriteLine("Balance:  " + loan.Fields["FL" + i.ToString("00") + "13"].Value);
      }

      // Close the loan to release its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanFields">
            <summary>
            Interface for LoanFields class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFields.GetFieldAt(System.String,System.Int32)">
            <summary>
            Returns a parameterized <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanField">LoanField</see> for the 
            subitem with the specified index.
            </summary>
            <param name="fieldId">The base Field ID of the desired field.</param>
            <param name="itemIndex">The index of the subitem.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanField">LoanField</see> for the request field.</returns>
            <remarks>This method is used to retrieve field data for loan fields which
            have multiple instances, e.g. the name of the depositor for the various
            desposits recorded in the loan.</remarks>
            <example>
The following code demonstrates how to use the LoanFields object to access
various fields on a Loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Print our the property address for the loan. Since there's only a
      // single value for each field, just use the field ID directly with
      // the LoanFields indexer property.
      Console.WriteLine("Street: " + loan.Fields["11"].Value);
      Console.WriteLine("City:   " + loan.Fields["12"].Value);
      Console.WriteLine("County: " + loan.Fields["13"].Value);
      Console.WriteLine("State:  " + loan.Fields["14"].Value);

      // Now print out the names of the "primary" Borrower pair.
      // Since this pair is primary, we can use the field IDs directly
      // with the indexer property.
      Console.WriteLine("Borrower First Name:   " + loan.Fields["36"].Value);
      Console.WriteLine("Borrower Last Name:    " + loan.Fields["37"].Value);
      Console.WriteLine("CoBorrower First Name: " + loan.Fields["68"].Value);
      Console.WriteLine("CoBorrower Last Name:  " + loan.Fields["69"].Value);

      // Now output the name of all of the other borrower pairs.
      for (int i = 0; i < loan.BorrowerPairs.Count; i++)
      {
         BorrowerPair pair = loan.BorrowerPairs[i];

         if (pair != loan.BorrowerPairs.Current)
         {
            // Because these pairs are not the Current (i.e. primary) pair, we
            // must use the GetValueForBorrowerPair() function to get the field
            // value for the specified pair.
            Console.WriteLine("Borrower Pair " + i + ":");
            Console.WriteLine("Borrower First Name:   " + loan.Fields["36"].GetValueForBorrowerPair(pair));
            Console.WriteLine("Borrower Last Name:    " + loan.Fields["37"].GetValueForBorrowerPair(pair));
            Console.WriteLine("CoBorrower First Name: " + loan.Fields["68"].GetValueForBorrowerPair(pair));
            Console.WriteLine("CoBorrower Last Name:  " + loan.Fields["69"].GetValueForBorrowerPair(pair));
         }
      }
      
      // Dump the liability verification records for the loan
      for (int i = 1; i <= loan.Liabilities.Count; i++)
      {
         // Use the LoanField object's GetFieldAt() method to get the field value for
         // a specified liablity.
         Console.WriteLine("Liability " + i + ":");
         Console.WriteLine("Holder:   " + loan.Fields.GetFieldAt("FL02", i).Value);
         Console.WriteLine("Account:  " + loan.Fields.GetFieldAt("FL10", i).Value);
      
         // Alternatively, you can construct the entire loan field ID manually
         // for the specific subitem.
         Console.WriteLine("Balance:  " + loan.Fields["FL" + i.ToString("00") + "13"].Value);
      }

      // Close the loan to release its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanFields.Item(System.String)">
            <summary>
            Gets the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanField">LoanField</see> based on the
            field ID provided.
            </summary>
            <example>
The following code demonstrates how to use the LoanFields object to access
various fields on a Loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Print our the property address for the loan. Since there's only a
      // single value for each field, just use the field ID directly with
      // the LoanFields indexer property.
      Console.WriteLine("Street: " + loan.Fields["11"].Value);
      Console.WriteLine("City:   " + loan.Fields["12"].Value);
      Console.WriteLine("County: " + loan.Fields["13"].Value);
      Console.WriteLine("State:  " + loan.Fields["14"].Value);

      // Now print out the names of the "primary" Borrower pair.
      // Since this pair is primary, we can use the field IDs directly
      // with the indexer property.
      Console.WriteLine("Borrower First Name:   " + loan.Fields["36"].Value);
      Console.WriteLine("Borrower Last Name:    " + loan.Fields["37"].Value);
      Console.WriteLine("CoBorrower First Name: " + loan.Fields["68"].Value);
      Console.WriteLine("CoBorrower Last Name:  " + loan.Fields["69"].Value);

      // Now output the name of all of the other borrower pairs.
      for (int i = 0; i < loan.BorrowerPairs.Count; i++)
      {
         BorrowerPair pair = loan.BorrowerPairs[i];

         if (pair != loan.BorrowerPairs.Current)
         {
            // Because these pairs are not the Current (i.e. primary) pair, we
            // must use the GetValueForBorrowerPair() function to get the field
            // value for the specified pair.
            Console.WriteLine("Borrower Pair " + i + ":");
            Console.WriteLine("Borrower First Name:   " + loan.Fields["36"].GetValueForBorrowerPair(pair));
            Console.WriteLine("Borrower Last Name:    " + loan.Fields["37"].GetValueForBorrowerPair(pair));
            Console.WriteLine("CoBorrower First Name: " + loan.Fields["68"].GetValueForBorrowerPair(pair));
            Console.WriteLine("CoBorrower Last Name:  " + loan.Fields["69"].GetValueForBorrowerPair(pair));
         }
      }
      
      // Dump the liability verification records for the loan
      for (int i = 1; i <= loan.Liabilities.Count; i++)
      {
         // Use the LoanField object's GetFieldAt() method to get the field value for
         // a specified liablity.
         Console.WriteLine("Liability " + i + ":");
         Console.WriteLine("Holder:   " + loan.Fields.GetFieldAt("FL02", i).Value);
         Console.WriteLine("Account:  " + loan.Fields.GetFieldAt("FL10", i).Value);
      
         // Alternatively, you can construct the entire loan field ID manually
         // for the specific subitem.
         Console.WriteLine("Balance:  " + loan.Fields["FL" + i.ToString("00") + "13"].Value);
      }

      // Close the loan to release its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder">
            <summary>
            Represents a loan folder in which loans may be created or saved.
            </summary>
            <example>
The following code displays the contents of a Loan Folder.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the "My Pipeline" folder
      LoanFolder folder = session.Loans.Folders["My Pipeline"];
      
      // Retrieve the list of all loans from this folder visible to the logged in user
      LoanIdentityList ids = folder.GetContents();
      
      foreach (LoanIdentity id in ids)
      {
         // Open the Loan
         Loan loan = folder.OpenLoan(id.LoanName);

         // Display the address of the property
         Console.WriteLine(loan.Fields["11"].Value);     // Street Addr
         Console.WriteLine(loan.Fields["12"].Value);     // City
         Console.WriteLine(loan.Fields["14"].Value);     // State

         // Close the loan to release its resources
         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanFolder">
            <summary>
            Interface for LoanFolder class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder.GetContents">
            <summary>
            Returns the list of loans stored in the current folder. Only loans to which
            the logged in user has access will be included in the list.
            </summary>
            <returns>Returns a LoanIdentityList containing one <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanIdentity">LoanIdentity</see>
            object for each loan in the folder.</returns>
            <example>
The following code displays the contents of a Loan Folder.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the "My Pipeline" folder
      LoanFolder folder = session.Loans.Folders["My Pipeline"];
      
      // Retrieve the list of all loans from this folder visible to the logged in user
      LoanIdentityList ids = folder.GetContents();
      
      foreach (LoanIdentity id in ids)
      {
         // Open the Loan
         Loan loan = folder.OpenLoan(id.LoanName);

         // Display the address of the property
         Console.WriteLine(loan.Fields["11"].Value);     // Street Addr
         Console.WriteLine(loan.Fields["12"].Value);     // City
         Console.WriteLine(loan.Fields["14"].Value);     // State

         // Close the loan to release its resources
         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder.OpenPipeline(EllieMae.Encompass.BusinessObjects.Loans.PipelineSortOrder)">
            <summary>
            Opens a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineCursor"/> for the current folder.
            </summary>
            <param name="sortOrder">The sort order to be applied to the elements in the cursor.</param>
            <returns>Returns a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineCursor"/> representing the list of loans.
            A cursor provides an efficient means of retrieving large data sets by holding the
            data on the server until needed by the client. Because the cursor consumes server
            resources, you should call the cursor's Close() method when you are done using it.
            </returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder.QueryPipeline(EllieMae.Encompass.Query.QueryCriterion,EllieMae.Encompass.BusinessObjects.Loans.PipelineSortOrder)">
            <summary>
            Opens a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineCursor"/> for the current folder using a selection
            query to filter the items in the pipeline.
            </summary>
            <param name="criterion">The selection criteria to be used to filter the cursor.</param>
            <param name="sortOrder">The sort order to be applied to the elements in the cursor.</param>
            <returns>Returns a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineCursor"/> representing the list of loans.
            A cursor provides an efficient means of retrieving large data sets by holding the
            data on the server until needed by the client. Because the cursor consumes server
            resources, you should call the cursor's Close() method when you are done using it.
            </returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder.OpenLoan(System.String)">
            <summary>
            Opens the loan with the specified name which resides in the current folder.
            </summary>
            <param name="name">The name of the loan to open.</param>
            <returns>A reference to the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan">Loan</see>, or null
            if no loan is found with the given name.</returns>
            <example>
The following code displays the contents of a Loan Folder.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the "My Pipeline" folder
      LoanFolder folder = session.Loans.Folders["My Pipeline"];
      
      // Retrieve the list of all loans from this folder visible to the logged in user
      LoanIdentityList ids = folder.GetContents();
      
      foreach (LoanIdentity id in ids)
      {
         // Open the Loan
         Loan loan = folder.OpenLoan(id.LoanName);

         // Display the address of the property
         Console.WriteLine(loan.Fields["11"].Value);     // Street Addr
         Console.WriteLine(loan.Fields["12"].Value);     // City
         Console.WriteLine(loan.Fields["14"].Value);     // State

         // Close the loan to release its resources
         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder.NewLoan(System.String)">
            <summary>
            Initializes a new loan in the current folder.
            </summary>
            <param name="name">The name of the new loan file.</param>
            <returns>A reference to the new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan">Loan</see> object.
            This object is not saved to the server until the caller invokes the
            Loan's <c>Commit()</c> method.</returns>
            <example>
The following code retrieves a specific loan folder from the system in
order to create a new loan in that folder.
<code>
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the "My Pipeline" folder
      LoanFolder folder = session.Loans.Folders["My Pipeline"];

      // If the folder doesn't exist, create it
      if (folder == null)
         folder = session.Loans.Folders.Add("My Pipeline");

      // Create a new loan in the specified folder
      Loan newLoan = folder.NewLoan("MyNewLoan");
   
      // Set the property address for the new loan
      newLoan.Fields["11"].Value = "10877 Deer Hollow Lane";
      newLoan.Fields["12"].Value = "Carson";
      newLoan.Fields["14"].Value = "NV";
      
      // Save and close the loan
      newLoan.Commit();
      newLoan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder.LoanExists(System.String)">
            <summary>
            Returns a flag indicating if a loan with the specified name exists in the
            current loan folder.
            </summary>
            <param name="name">The name of the loan to locate.</param>
            <returns>A flag indicating if a loan exists with the specified name.</returns>
            <example>
The following code demonstrates how to delete one or more loans from 
a loan folder using the loan's name as its identifying characteristic.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the "My Pipeline" folder
      LoanFolder folder = session.Loans.Folders["My Pipeline"];

      for (int i = 0; i < args.Length; i++)
      {
         // Ensure the loan exists and, if so, delete it
         if (folder.LoanExists(args[i]))
            folder.DeleteLoan(args[i]);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder.DeleteLoan(System.String)">
            <summary>
            Deletes a loan from the current loan folder.
            </summary>
            <param name="name">The name of the loan to be deleted.</param>
            <example>
The following code demonstrates how to delete one or more loans from 
a loan folder using the loan's name as its identifying characteristic.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the "My Pipeline" folder
      LoanFolder folder = session.Loans.Folders["My Pipeline"];

      for (int i = 0; i < args.Length; i++)
      {
         // Ensure the loan exists and, if so, delete it
         if (folder.LoanExists(args[i]))
            folder.DeleteLoan(args[i]);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder.Rebuild">
            <summary>
            Rebuilds the contents of the current Loan Folder on the server.
            </summary>
            <remarks>This method rebuilds the loan database from the information 
            stored in the loan files within this folder. This process occurs synchronously, so
            this method may take several minutes before it returns if the number of
            loans in the folder is large.
            <p>The logged in user must have administrative privileges to invoke this method.
            </p>
            </remarks>
            <example>
The following code rebuilds the "My Pipeline" folder from the loan files
stored on disk.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the "My Pipeline" folder
      LoanFolder folder = session.Loans.Folders["My Pipeline"];

      if (folder != null)
         folder.Rebuild();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder.Refresh">
            <summary>
            Refreshes the loan folder information, such as the size.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder.ToString">
            <summary>
            Provides a string representation of the LoanFolder object.
            </summary>
            <returns>This method returns the name of the folder.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder.Name">
            <summary>
            Gets the name of the folder.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder.DisplayName">
            <summary>
            Returns the display name of the folder.
            </summary>
            <remarks>For archive folders, the display name will include the foldername surrounded by
            the &lt;&gt; symbols. For non-archive folders, the Display name should match the Name.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder.IsArchive">
            <summary>
            Indicates if the folder is an archive folder.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder.IsTrash">
            <summary>
            Indicates if the folder is the (Trash) folder.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder.Size">
            <summary>
            Gets the approximate number of loans stored in the loan folder.
            </summary>
            <remarks>This count represents the total number of subdirectories beneath the
            current loan folder. Generally, this should be the number of loans stored in
            the folder, but its value should always be considered approximate.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanFolders">
            <summary>
            Summary description for LoanFolders.
            </summary>
            <example>
The following code retrieves a specific loan folder from the system in
order to create a new loan in that folder.
<code>
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the "My Pipeline" folder
      LoanFolder folder = session.Loans.Folders["My Pipeline"];

      // If the folder doesn't exist, create it
      if (folder == null)
         folder = session.Loans.Folders.Add("My Pipeline");

      // Create a new loan in the specified folder
      Loan newLoan = folder.NewLoan("MyNewLoan");
   
      // Set the property address for the new loan
      newLoan.Fields["11"].Value = "10877 Deer Hollow Lane";
      newLoan.Fields["12"].Value = "Carson";
      newLoan.Fields["14"].Value = "NV";
      
      // Save and close the loan
      newLoan.Commit();
      newLoan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanFolders">
            <summary>
            Interface for LoanFolders class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFolders.Add(System.String)">
            <summary>
            Adds a new loan folder to the server.
            </summary>
            <param name="name">The name of the new folder.</param>
            <returns>The new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder">LoanFolder</see> object.</returns>
            <example>
The following code creates a new Loan Folder on the server based on the
parameters passed to the application.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new Loan Folder for each parameter passed in
      for (int i = 0; i < args.Length; i++)
      {
         try
         {
            // This operation may cause an exception if a loan folder already exists
            // with the specified name.
            session.Loans.Folders.Add(args[i]);
         }
         catch (Exception ex)
         {
            Console.WriteLine("Error creating folder " + args[i] + ": " + ex.Message);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFolders.Remove(EllieMae.Encompass.BusinessObjects.Loans.LoanFolder)">
            <summary>
            Deletes an existing loan folder from the server.
            </summary>
            <param name="folder">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder">LoanFolder</see> to be deleted.</param>
            <remarks>The loan folder must be empty in order to be deleted.</remarks>
            <example>
The following code example deletes all empty loan folders from the server.
<code>
using System;
using System.Collections;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      ArrayList toBeDeleted = new ArrayList();

      // Iterate over all defined loan folders, saving off any folder which is empty
      foreach (LoanFolder folder in session.Loans.Folders)
      {
         if (folder.Size == 0)
            toBeDeleted.Add(folder);
      }

      // Now delete the folders from the set
      foreach (LoanFolder folder in toBeDeleted)
         session.Loans.Folders.Remove(folder);

      // Refresh the list so we can see any changes made by other users
      session.Loans.Folders.Refresh();

      // Dump the list of folder names
      foreach (LoanFolder folder in session.Loans.Folders)
         Console.WriteLine(folder.Name);      

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFolders.RebuildAll">
            <summary>
            Rebuilds the contents of all of the Loan Folders on the server.
            </summary>
            <remarks>This method rebuilds the loan database from the information 
            stored in the loan files on disk. This process occurs synchronously, so
            this method may take several minutes before it returns if the number of
            loans in the system is large.
            <p>The logged in user must have administrative privileges to invoke this method.
            </p>
            </remarks>
            <example>
The following code rebuilds all loan folders from the loan files on disk.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Rebuild all folders -- this may take a while if there are a large
      // number of loans.
      session.Loans.Folders.RebuildAll();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFolders.Refresh">
            <summary>
            Refreshes the list of loan folders from the server. Any loan folders added by other
            users will be visible after calling this method.
            </summary>
            <example>
The following code example deletes all empty loan folders from the server.
<code>
using System;
using System.Collections;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      ArrayList toBeDeleted = new ArrayList();

      // Iterate over all defined loan folders, saving off any folder which is empty
      foreach (LoanFolder folder in session.Loans.Folders)
      {
         if (folder.Size == 0)
            toBeDeleted.Add(folder);
      }

      // Now delete the folders from the set
      foreach (LoanFolder folder in toBeDeleted)
         session.Loans.Folders.Remove(folder);

      // Refresh the list so we can see any changes made by other users
      session.Loans.Folders.Refresh();

      // Dump the list of folder names
      foreach (LoanFolder folder in session.Loans.Folders)
         Console.WriteLine(folder.Name);      

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanFolders.GetEnumerator">
            <summary>
            Allows for enumeration over the set of loan folders.
            </summary>
            <returns>An enumerator for the set of folder.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanFolders.Count">
            <summary>
            Gets the number of Loan Folders defined on the server.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanFolders.Item(System.String)">
            <summary>
            Returns a LoanFolder using its name.
            </summary>
            <remarks>The name of a loan folder is case insensitive.</remarks>
            <example>
The following code retrieves a specific loan folder from the system in
order to create a new loan in that folder.
<code>
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the "My Pipeline" folder
      LoanFolder folder = session.Loans.Folders["My Pipeline"];

      // If the folder doesn't exist, create it
      if (folder == null)
         folder = session.Loans.Folders.Add("My Pipeline");

      // Create a new loan in the specified folder
      Loan newLoan = folder.NewLoan("MyNewLoan");
   
      // Set the property address for the new loan
      newLoan.Fields["11"].Value = "10877 Deer Hollow Lane";
      newLoan.Fields["12"].Value = "Carson";
      newLoan.Fields["14"].Value = "NV";
      
      // Save and close the loan
      newLoan.Commit();
      newLoan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanIdentity">
            <summary>
            Represents the set of identifying information for a single Loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanIdentity">
            <summary>
            Interface for LoanIdentity class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanIdentity.ToString">
            <summary>
            Provides a string representation of the LoanIdentity object.
            </summary>
            <returns>The concatenation of the loan folder and name.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanIdentity.Guid">
            <summary>
            Gets the globally unqiue identifier for the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanIdentity.LoanFolder">
            <summary>
            Gets the name of the loan folder in which the loan resides.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanIdentity.LoanName">
            <summary>
            Gets the name of the loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanLiabilities">
            <summary>
            Represents the set of liabilities associated with a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan">Loan</see>.
            </summary>
            <remarks>The items within this set are indexed starting with the value
            1. An attempt to access an item in this collection with a value less than
            1 will result in an InvalidArgumentException.
            </remarks>
            <example>
      The following code demonstrates how to add a new liability to an existing
      loan and then set its field values.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open an existing loan using the GUID from the command line
         Loan loan = session.Loans.Open(args[0]);

         // Lock the loan so we can modify it safely
         loan.Lock();

         // Add a new liability and save off it index in the liabilities list
         int newIndex = loan.Liabilities.Add();

         // Set the value of some of theliability fields
         loan.Fields.GetFieldAt("FL02", newIndex).Value = "Bank of Havasu";  // Liability Holder
         loan.Fields.GetFieldAt("FL10", newIndex).Value = "2220001-003";     // Account #
         loan.Fields.GetFieldAt("FL20", newIndex).Value = "(555) 555-0233";  // Holder Phone

         // Commit the changes to the server
         loan.Commit();

         // Release the lock on the loan
         loan.Unlock();

         // End the session to gracefully disconnect from the server
         session.End();
   }
}
        ]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanLiabilities">
            <summary>
            Interface for LoanLiabilities class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanLiabilities.Add(System.Boolean)">
            <summary>
            Adds a new liability to the set for the current loan.
            </summary>
            <param name="requireExclusive">Passing the value <c>true</c> causes a check to confirm there is 
            an exclusive lock on the loan. Passing the value <c>false</c> will bypass the exclusive check.
            If running in SDK Concurrent editing mode the value <c>false</c> should be used.</param>
            <returns>The return value is the index of the new liability, which
            can be later used to access the loan fields associated with this
            liability.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanLiabilities.Add">
            <summary>
            Adds a new liability to the set for the current loan.
            </summary>
            <returns>The return value is the index of the new liability, which
            can be later used to access the loan fields associated with this
            liability.</returns>
            <example>
The following code demonstrates how to add a new liability to an existing
loan and then set its field values.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan so we can modify it safely
      loan.Lock();

      // Add a new liability and save off it index in the liabilities list
      int newIndex = loan.Liabilities.Add();

      // Set the value of some of theliability fields
      loan.Fields.GetFieldAt("FL02", newIndex).Value = "Bank of Havasu";  // Liability Holder
      loan.Fields.GetFieldAt("FL10", newIndex).Value = "2220001-003";     // Account #
      loan.Fields.GetFieldAt("FL20", newIndex).Value = "(555) 555-0233";  // Holder Phone

      // Commit the changes to the server
      loan.Commit();

      // Release the lock on the loan
      loan.Unlock();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanLiabilities.RemoveAt(System.Int32,System.Boolean)">
            <summary>
            Removes a single liability from the set.
            </summary>
            <param name="index">The 1-based index of the liability to remove.</param>
            <param name="requireExclusive">Passing the value <c>true</c> causes a check to confirm there is 
            an exclusive lock on the loan. Passing the value <c>false</c> will bypass the exclusive check.
            If running in SDK Concurrent editing mode the value <c>false</c> should be used.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanLiabilities.RemoveAt(System.Int32)">
            <summary>
            Removes a single liability from the set.
            </summary>
            <param name="index">The 1-based index of the liability to remove.</param>
            <example>
The following code removes all liability verification records from a loan file.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to edit it
      loan.Lock();

      // Loop over all of the currently defined liabilities attached to the loan.
      // The liabilities are indexed starting at 1, so the loop must adjust
      // accordingly.
      for (int i = loan.Liabilities.Count; i >= 1; i--)
      {
         // Write out the name of the account holder
         Console.WriteLine("Liability Holder: " + loan.Fields.GetFieldAt("FL02", i).Value);

         // Remove the deposit
         loan.Liabilities.RemoveAt(i);
      }

      // Commit the changes to the server and unlock the loan
      loan.Commit();
      loan.Unlock();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanLiabilities.GetMortgage(System.Int32)">
            <summary>
            Returns the index of a linked mortgage, if any, for the specified liability.
            </summary>
            <param name="liabilityIndex">The 1-based index of the liability.</param>
            <returns>The index of the linked mortgage, or -1 if no mortgage is linked.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanLiabilities.Count">
            <summary>
            Gets the number of liabilities in the set.
            </summary>
            <example>
The following code removes all liability verification records from a loan file.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to edit it
      loan.Lock();

      // Loop over all of the currently defined liabilities attached to the loan.
      // The liabilities are indexed starting at 1, so the loop must adjust
      // accordingly.
      for (int i = loan.Liabilities.Count; i >= 1; i--)
      {
         // Write out the name of the account holder
         Console.WriteLine("Liability Holder: " + loan.Fields.GetFieldAt("FL02", i).Value);

         // Remove the deposit
         loan.Liabilities.RemoveAt(i);
      }

      // Commit the changes to the server and unlock the loan
      loan.Commit();
      loan.Unlock();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LockType">
            <summary>
            Defines the possible types of locks on a loan file.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LockType.None">
            <summary>Loan is not locked</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LockType.Edit">
            <summary>Loan is locked for editing in Encompass</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.LockType.Download">
            <summary>Loan has been downloaded to an offline system</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanLock">
            <summary>
            Provides information about the current lock on a loan file.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanLock">
            <summary>
            Interface for the ILoanLock class
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanLock.LockedBy">
            <summary>
            Gets the ID of the user holding the current lock on the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanLock.LockedSince">
            <summary>
            Gets the date and time the lock was established.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanLock.LockType">
            <summary>
            Gets the type of lock being held.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanLock.Exclusive">
            <summary>
            Indicates if the lock is an exclusive lock.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanLock.SessionID">
            <summary>
            Gets the SessionID of the user who owns the lock.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanMortgages">
            <summary>
            Represents the set of mortgages associated with a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan">Loan</see>.
            </summary>
            <remarks>The items within this set are indexed starting with the value
            1. An attempt to access an item in this collection with a value less than
            1 will result in an InvalidArgumentException.
            </remarks>
            <example>
      The following code demonstrates how to add an existing mortgage to a loan file
      and then set a subset of its field values.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
         // Open the session to the remote server
         Session session = new Session();
         session.Start("myserver", "mary", "maryspwd");

         // Open an existing loan using the GUID from the command line
         Loan loan = session.Loans.Open(args[0]);

         // Lock the loan so we can modify it safely
         loan.Lock();

         // Add a new liability and save off it index in the liabilities list
         int newIndex = loan.Liabilities.Add();

         // Set the value of some of theliability fields
         loan.Fields.GetFieldAt("FL02", newIndex).Value = "Thomas Olden";    // Asset Holder
         loan.Fields.GetFieldAt("FL10", newIndex).Value = "2220001-003";     // Account #
         loan.Fields.GetFieldAt("FL20", newIndex).Value = "(555) 555-0233";  // Holder Phone

         // Create an IntegerList to hold the ID of the liability
         IntegerList liabIds = new IntegerList();
         liabIds.Add(newIndex);

          // Create the new Mortgage, attaching the liability to it
         int newMort = loan.Mortgages.Add(liabIds);

         // Set some Mortgage-related fields
         loan.Fields.GetFieldAt("FM04", newMort).Value = "2056 Blue Hollow Lane";  // Street Addr
         loan.Fields.GetFieldAt("FM06", newMort).Value = "Lake Mary";              // City
         loan.Fields.GetFieldAt("FM07", newMort).Value = "FL";                     // State

         // Commit the changes to the server
         loan.Commit();

         // Release the lock on the loan
         loan.Unlock();

         // End the session to gracefully disconnect from the server
         session.End();
   }
}
        ]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanMortgages">
            <summary>
            Interface for LoanMortgages class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanMortgages.Add(EllieMae.Encompass.Collections.IntegerList)">
            <summary>
            Adds a new mortgage to the set.
            </summary>
            <param name="liabilities">The indices of the liabilities with which the
            mortgage is associated. At least one liability must be specified.</param>
            <returns></returns>
            <example>
The following code demonstrates how to add an existing mortgage to a loan file
and then set a subset of its field values.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan so we can modify it safely
      loan.Lock();

      // Add a new liability and save off it index in the liabilities list
      int newIndex = loan.Liabilities.Add();

      // Set the value of some of theliability fields
      loan.Fields.GetFieldAt("FL02", newIndex).Value = "Thomas Olden";    // Asset Holder
      loan.Fields.GetFieldAt("FL10", newIndex).Value = "2220001-003";     // Account #
      loan.Fields.GetFieldAt("FL20", newIndex).Value = "(555) 555-0233";  // Holder Phone

      // Create an IntegerList to hold the ID of the liability
      IntegerList liabIds = new IntegerList();
      liabIds.Add(newIndex);

      // Create the new Mortgage, attaching the liability to it
      int newMort = loan.Mortgages.Add(liabIds);

      // Set some Mortgage-related fields
      loan.Fields.GetFieldAt("FM04", newMort).Value = "2056 Blue Hollow Lane";  // Street Addr
      loan.Fields.GetFieldAt("FM06", newMort).Value = "Lake Mary";              // City
      loan.Fields.GetFieldAt("FM07", newMort).Value = "FL";                     // State

      // Commit the changes to the server
      loan.Commit();

      // Release the lock on the loan
      loan.Unlock();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanMortgages.RemoveAt(System.Int32)">
            <summary>
            Removes an existing mortgage from the set.
            </summary>
            <param name="index">The 1-based index of the mortgage to remove.</param>
            <example>
The following code removes all mortgage verification records from a loan file.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to edit it
      loan.Lock();

      // Loop over all of the currently defined mortgages attached to the loan.
      // The mortgages are indexed starting at 1, so the loop must adjust
      // accordingly.
      for (int i = loan.Mortgages.Count; i >= 1; i--)
      {
         // Write out the name of the account holder
         Console.WriteLine("Property Address: " + loan.Fields.GetFieldAt("FM04", i).Value);

         // Remove the deposit
         loan.Mortgages.RemoveAt(i);
      }

      // Commit the changes to the server and unlock the loan
      loan.Commit();
      loan.Unlock();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanMortgages.AttachMortgage(System.Int32,EllieMae.Encompass.Collections.IntegerList)">
            <summary>
            Attaches a mortgage to one or more liabilities within the loan.
            </summary>
            <param name="index">The index of the mortgage to which the liabilities
            will be attached.</param>
            <param name="liabilities">The indices of the liabilities to attach to
            the mortgage.</param>
            <example>
The following code attaches two new liability records to an existing mortgage.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to edit it
      loan.Lock();

      // Create two new liabilities to be attached to the mortgage
      int index1 = loan.Liabilities.Add();
      int index2 = loan.Liabilities.Add();

      // Set the holds of the liabilities
      loan.Fields.GetFieldAt("FL02", index1).Value = "First Bank";
      loan.Fields.GetFieldAt("FL02", index2).Value = "Second Bank";

      // Now attach the first mortgage record to these new liabilities
      loan.Mortgages.AttachMortgage(1, new IntegerList(new int[] { index1, index2 }));

      // Commit the changes to the server and unlock the loan
      loan.Commit();
      loan.Unlock();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanMortgages.GetLiabilities(System.Int32)">
            <summary>
            Returns the liabilities linked to a specific mortgage.
            </summary>
            <param name="index">The index of the mortgage for which you need the list of liabilities.</param>
            <returns>Returns an <see cref="T:EllieMae.Encompass.Collections.IntegerList"/> containing the indices of the liabilities
            associated with the mortgage.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanMortgages.Count">
            <summary>
            Gets the number of liabilities in the set.
            </summary>
            <example>
The following code removes all mortgage verification records from a loan file.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to edit it
      loan.Lock();

      // Loop over all of the currently defined mortgages attached to the loan.
      // The mortgages are indexed starting at 1, so the loop must adjust
      // accordingly.
      for (int i = loan.Mortgages.Count; i >= 1; i--)
      {
         // Write out the name of the account holder
         Console.WriteLine("Property Address: " + loan.Fields.GetFieldAt("FM04", i).Value);

         // Remove the deposit
         loan.Mortgages.RemoveAt(i);
      }

      // Commit the changes to the server and unlock the loan
      loan.Commit();
      loan.Unlock();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LoanResidences">
            <summary>
            Provides access to a set of residences associated with a loan.
            </summary>
            <remarks>The items within this set are indexed starting with the value
            1. An attempt to access an item in this collection with a value less than
            1 will result in an InvalidArgumentException.
            </remarks>
            <example>
      The following code demonstrates how to print the addresses of all of the
      prior residences of both the primary borrower and the coborrower.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Loop over the set of residences, printing the addresses
      for (int i = 1; i <= loan.BorrowerResidences.Count; i++)
      {
         Console.WriteLine("Borrower Residence " + i + ":");
         Console.WriteLine(loan.Fields.GetFieldAt("BR04", i));   // Street Addr
         Console.WriteLine(loan.Fields.GetFieldAt("BR06", i));   // City
         Console.WriteLine(loan.Fields.GetFieldAt("BR07", i));   // State
         Console.WriteLine(loan.Fields.GetFieldAt("BR08", i));   // Zip
      }

      // Now the CoBorrower residences
      for (int i = 1; i <= loan.CoBorrowerResidences.Count; i++)
      {
         Console.WriteLine("CoBorrower Residence " + i + ":");
         Console.WriteLine(loan.Fields.GetFieldAt("CR04", i));   // Street Addr
         Console.WriteLine(loan.Fields.GetFieldAt("CR06", i));   // City
         Console.WriteLine(loan.Fields.GetFieldAt("CR07", i));   // State
         Console.WriteLine(loan.Fields.GetFieldAt("CR08", i));   // Zip
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoanResidences">
            <summary>
            Interface for LoanResidences class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanResidences.Add(System.Boolean)">
            <summary>
            Adds a new residence to the set.
            </summary>
            <param name="current">A flag indicating if the residence represents
            the borrower's/coborrower's current residence.</param>
            <returns>The index of the newly created residence.</returns>
            <example>
The following code adds a residence verification record for the primary borrower 
associated with the current loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open an existing loan using the GUID from the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to edit it
      loan.Lock();

      // Add a new residence verification record for the coborrower
      int index = loan.BorrowerResidences.Add(false);

      // Populate the address fields for the residence
      loan.Fields.GetFieldAt("BR04", index).Value = "3099 Glen Canyon Ct.";
      loan.Fields.GetFieldAt("BR06", index).Value = "Farmington Square";
      loan.Fields.GetFieldAt("BR07", index).Value = "IN";

      // Commit the changes to the server and unlock the loan
      loan.Commit();
      loan.Unlock();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.LoanResidences.RemoveAt(System.Int32)">
            <summary>
            Removes an existing residence from the set.
            </summary>
            <param name="index">The 1-based index of the residence to remove.</param>
            <example>
The following code removes all residence verification records for the 
primary borrower from a loan file.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the empty shell for the new loan. 
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to edit it
      loan.Lock();

      // Loop over all of the currently defined employer records for
      // the primary borrower. The records are indexed starting at 1, 
      // so the loop be set adjust accordingly.
      for (int i = loan.BorrowerResidences.Count; i >= 1; i--)
      {
         // Write out the name of the account holder
         Console.WriteLine("Address: " + loan.Fields.GetFieldAt("BR04", i).Value);

         // Remove the deposit
         loan.BorrowerResidences.RemoveAt(i);
      }

      // Commit the changes to the server and unlock the loan
      loan.Commit();
      loan.Unlock();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LoanResidences.Count">
            <summary>
            Gets the number of residences within the set.
            </summary>
            <example>
The following code removes all residence verification records for the 
primary borrower from a loan file.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the empty shell for the new loan. 
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to edit it
      loan.Lock();

      // Loop over all of the currently defined employer records for
      // the primary borrower. The records are indexed starting at 1, 
      // so the loop be set adjust accordingly.
      for (int i = loan.BorrowerResidences.Count; i >= 1; i--)
      {
         // Write out the name of the account holder
         Console.WriteLine("Address: " + loan.Fields.GetFieldAt("BR04", i).Value);

         // Remove the deposit
         loan.BorrowerResidences.RemoveAt(i);
      }

      // Commit the changes to the server and unlock the loan
      loan.Commit();
      loan.Unlock();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Loans">
            <summary>
            Provides an interface for accessing the loans and loan folders defined on
            the Encompass server.
            </summary>
            <example>
The following code opens a session to a remote Encompass Server using a TCP/IP
connection on port 11081. It then opens a loan using the specified GUID value.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch a loan from the session
      Loan loan = session.Loans.Open("{9885d88a-78af-44a7-977d-5d5fd6e41a96}");
   
      if (loan == null)
         Console.WriteLine("Loan not found");
      else
         Console.WriteLine("Successfully opened loan " + loan.LoanNumber);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.ILoans">
            <summary>
            Interface for Loans class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.CreateBatchReassign">
            <summary>
            Create a new BatchReassign object
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.Open(System.String)">
            <summary>
            Opens a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan">Loan</see> using the specified globally unique identifier.
            </summary>
            <param name="guid">The globally unique identifier of the loan to be opened.</param>
            <returns>A reference to the requested Loan, or null if the specified
            loan cannot be found.</returns>
            <example>
The following code opens a session to a remote Encompass Server using a TCP/IP
connection on port 11081. It then opens a loan using the specified GUID value.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch a loan from the session
      Loan loan = session.Loans.Open("{9885d88a-78af-44a7-977d-5d5fd6e41a96}");
   
      if (loan == null)
         Console.WriteLine("Loan not found");
      else
         Console.WriteLine("Successfully opened loan " + loan.LoanNumber);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.Open(System.String,System.Boolean,System.Boolean)">
            <summary>
            Opens a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan">Loan</see> using the specified globally unique identifier.
            </summary>
            <param name="guid">The globally unique identifier of the loan to be opened.</param>
            <param name="loanlock">boolean parameter to lock loan on open </param>
            <param name="exclusive">boolean parameter to apply exclusive lock, this parameter is meaning less if loanlock param is false </param>
            <returns>A reference to the requested Loan, or null if the specified
            loan cannot be found.</returns>
            <example>
The following code opens a session to a remote Encompass Server using a TCP/IP
connection on port 11081. It then opens a loan using the specified GUID value.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch a loan from the session
      Loan loan = session.Loans.Open("{9885d88a-78af-44a7-977d-5d5fd6e41a96}");
   
      if (loan == null)
         Console.WriteLine("Loan not found");
      else
         Console.WriteLine("Successfully opened loan " + loan.LoanNumber);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.Query(EllieMae.Encompass.Query.QueryCriterion)">
            <summary>
            Performs a query on the set of all loans to which the current user has access
            rights.
            </summary>
            <param name="criterion">The query criterion (or criteria) used to determine
            the set of loans to be returned.</param>
            <returns>A LoanIdentityList containing the 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanIdentity">LoanIdentities</see>
            of the matching loans. If no loans matched the specified criteria, the list is empty.
            </returns>
            <remarks>If the currently logged in user does not have administrative rights,
            the Query method will only return loans to which the current user or his
            subordinates (based on the organization chart) have explicitly defined access rights. 
            Because users with the Administrator persona can access all loans, admin users will
            query against the entire set of loans on the server.
            </remarks>
            <example>
The following code queries the server for all loans which have a loan amount
of at least $200,000 for the purpose of an initial purchase.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Build the LoanAmount criterion (>= $200,000)
      NumericFieldCriterion amtCriterion = new NumericFieldCriterion();
      amtCriterion.FieldName = "Loan.LoanAmount";
      amtCriterion.Value = 200000;
      amtCriterion.MatchType = OrdinalFieldMatchType.GreaterThanOrEquals;

      // Build the LoanPurpose criterion
      StringFieldCriterion purposeCriterion = new StringFieldCriterion();
      purposeCriterion.FieldName = "Loan.LoanPurpose";
      purposeCriterion.Value = "Purchase";
      purposeCriterion.MatchType = StringFieldMatchType.Exact;

      // Join the criteria together using AND logic
      QueryCriterion jointCriteria = amtCriterion.And(purposeCriterion);

      // Perform the query, retrieveing the identities of the matching loans
      LoanIdentityList ids = session.Loans.Query(jointCriteria);

      // Dump the results to the console
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.SelectFields(System.String,EllieMae.Encompass.Collections.StringList)">
            <summary>
            Selects a set of field values from a specified loan.
            </summary>
            <param name="guid">The unique identifier of the loan from which the field
            data will be drawn.</param>
            <param name="fieldIds">A list of the field IDs for the desired fields.</param>
            <returns>A <see cref="T:EllieMae.Encompass.Collections.StringList">StringList</see>
            containing the requested field values in the same order as was specified in
            the <c>fieldIds</c> parameter.</returns>
            <remarks>This method provides a more bandwidth-efficient manner to
            retrieve a small subset of the fields of a loan without having to open the entire
            loan. Note that because there is no facility for indicating from which Borrower
            Pair the data will be drawn, the "Current" pair will always be used for
            borrower-specific field values.</remarks>
            <example>
The following example demonstrates how to generate a report using the SelectFields
function to grab only the desired data from a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Build the query criterion for all loans that were opened this year
      DateFieldCriterion dateCri = new DateFieldCriterion();
      dateCri.FieldName = "Loan.DateFileOpened";
      dateCri.Value = DateTime.Now;
      dateCri.Precision = DateFieldMatchPrecision.Year;

      // Perform the query to get the IDs of the loans
      LoanIdentityList ids = session.Loans.Query(dateCri);

      // Create a list of the specific fields we want to print from each loan.
      // In this case, we'll select the Loan Amount and Interest Rate.
      StringList fieldIds = new StringList();
      fieldIds.Add("2");          // Loan Amount
      fieldIds.Add("3");          // Rate

      // For each loan, select the desired fields
      foreach (LoanIdentity id in ids)
      {
         // Select the field values for the current loan
         StringList fieldValues = session.Loans.SelectFields(id.Guid, fieldIds);

         // Print out the returned values
         Console.WriteLine("Fields for loan " + id.ToString());
         Console.WriteLine("Amount:  " + fieldValues[0]);
         Console.WriteLine("Rate:    " + fieldValues[1]);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.OpenPipeline(EllieMae.Encompass.BusinessObjects.Loans.PipelineSortOrder)">
            <summary>
            Opens a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineCursor"/> for all loans accessible by current user.
            </summary>
            <param name="sortOrder">The sort order to be applied to the elements in the cursor.</param>
            <returns>Returns a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineCursor"/> representing the list of loans.
            A cursor provides an efficient means of retrieving large data sets by holding the
            data on the server until needed by the client. Because the cursor consumes server
            resources, you should call the cursor's Close() method when you are done using it.
            </returns>
            <example>
The following code opens the full pipeline for the current user and generates
a list of the borrowers' names.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a PipelineCursor so it's sorted by the borrower's last name
      // Using the "using" syntax will ensure the cursor is properly closed
      // on the server when it's no longer needed.
      using (PipelineCursor pc = session.Loans.OpenPipeline(PipelineSortOrder.LastName))
      {
         // Using the foreach syntax will allow for efficient enumeration over the
         // items in the cursor.
         foreach (PipelineData data in pc)
         {
            Console.WriteLine(data["BorrowerLastName"] + ", " + data["BorrowerFirstName"]
               + " for loan amount of " + data["LoanAmount"]);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.OpenPipelineEx(EllieMae.Encompass.Collections.SortCriterionList)">
            <summary>
            Opens a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineCursor"/> for all loans accessible by current user.
            </summary>
            <param name="sortCriteria">The sort criteria used to order the pipeline results.
            Passing a value of <c>null</c> (use <c>Nothing</c> in Visual Basic) will
            result in an unsorted list.</param>
            <returns>Returns a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineCursor"/> representing the list of loans.
            A cursor provides an efficient means of retrieving large data sets by holding the
            data on the server until needed by the client. Because the cursor consumes server
            resources, you should call the cursor's Close() method when you are done using it.
            </returns>
            <example>
The following code opens the full pipeline for the current user and generates
a list of the borrowers' names. It applies a custom sort order based on the
loan amount.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the sort criteria for the pipeline
      SortCriterionList criteria = new SortCriterionList();
      criteria.Add(new SortCriterion("Loan.LoanAmount"));

      // Open a PipelineCursor so it's sorted by the loan amount.
      // Using the "using" syntax will ensure the cursor is properly closed
      // on the server when it's no longer needed.
      using (PipelineCursor pc = session.Loans.OpenPipelineEx(criteria))
      {
         // Using the foreach syntax will allow for efficient enumeration over the
         // items in the cursor.
         foreach (PipelineData data in pc)
         {
            Console.WriteLine(data["BorrowerLastName"] + ", " + data["BorrowerFirstName"]
               + " for loan amount of " + data["LoanAmount"]);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.QueryPipeline(EllieMae.Encompass.Query.QueryCriterion,EllieMae.Encompass.BusinessObjects.Loans.PipelineSortOrder)">
            <summary>
            Opens a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineCursor"/> using a selection
            query to filter the items in the pipeline.
            </summary>
            <param name="criterion">The selection criteria to be used to filter the cursor.</param>
            <param name="sortOrder">The sort order to be applied to the elements in the cursor.</param>
            <returns>Returns a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineCursor"/> representing the list of loans.
            A cursor provides an efficient means of retrieving large data sets by holding the
            data on the server until needed by the client. Because the cursor consumes server
            resources, you should call the cursor's Close() method when you are done using it.
            </returns>
            <example>
The following code queries the current user's accessible loans for all items
which have a loan amount of at least $200,000 and for which the user "amy" is
the Loan Officer. Each loan is then displayed to the user.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the query criteria to locate loans above $200K
      // for which the user "amy" is the Loan Officer
      NumericFieldCriterion amtcri = new NumericFieldCriterion("Loan.LoanAmount", 
         200000, OrdinalFieldMatchType.GreaterThanOrEquals);
      StringFieldCriterion locri = new StringFieldCriterion("Loan.LoanOfficerID", 
         "amy", StringFieldMatchType.Exact, true);

      // Open a PipelineCursor using the logical AND of the two criteria and
      // applying the desired sort order
      PipelineCursor pc = session.Loans.QueryPipeline(amtcri.And(locri), PipelineSortOrder.LastName);

      try
      {
         // Using the foreach syntax will allow for efficient enumeration over the
         // items in the cursor.
         foreach (PipelineData data in pc)
         {
            Console.WriteLine(data["BorrowerLastName"] + ", " + data["BorrowerFirstName"]
               + " for loan amount of " + data["LoanAmount"]);
         }
      }
      finally
      {
         // Close the cursor to ensure its resources are released
         pc.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.QueryPipelineEx(EllieMae.Encompass.Query.QueryCriterion,EllieMae.Encompass.Collections.SortCriterionList)">
            <summary>
            Opens a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineCursor"/> using a selection
            query to filter the items in the pipeline.
            </summary>
            <param name="criterion">The selection criteria to be used to filter the cursor.</param>
            <param name="sortCriteria">The sort criteria used to order the pipeline results.
            Passing a value of <c>null</c> (use <c>Nothing</c> in Visual Basic) will
            result in an unsorted list.</param>
            <returns>Returns a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineCursor"/> representing the list of loans.
            A cursor provides an efficient means of retrieving large data sets by holding the
            data on the server until needed by the client. Because the cursor consumes server
            resources, you should call the cursor's Close() method when you are done using it.
            </returns>
            <example>
The following code queries the current user's accessible loans for all items
which have a loan amount of at least $200,000 and for which the user "amy" is
the Loan Officer. Each loan is then displayed to the user.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the sort criteria for the pipeline
      SortCriterionList sort = new SortCriterionList();
      sort.Add(new SortCriterion("Loan.LoanAmount"));

      // Create the query criteria to locate loans above $200K
      // for which the user "amy" is the Loan Officer
      NumericFieldCriterion amtcri = new NumericFieldCriterion("Loan.LoanAmount", 
        200000, OrdinalFieldMatchType.GreaterThanOrEquals);
      StringFieldCriterion locri = new StringFieldCriterion("Loan.LoanOfficerID", 
         "amy", StringFieldMatchType.Exact, true);

      // Open a PipelineCursor using the logical AND of the two criteria and
      // applying the desired sort order
      PipelineCursor pc = session.Loans.QueryPipelineEx(amtcri.And(locri), sort);

      try
      {
         // Using the foreach syntax will allow for efficient enumeration over the
         // items in the cursor.
         foreach (PipelineData data in pc)
         {
            Console.WriteLine(data["BorrowerLastName"] + ", " + data["BorrowerFirstName"]
               + " for loan amount of " + data["LoanAmount"]);
         }
      }
      finally
      {
         // Close the cursor to ensure its resources are released
         pc.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.CreateNew">
            <summary>
            Creates and initializes a new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan">Loan</see>.
            </summary>
            <returns>A newly created Loan object.</returns>
            <remarks>The returned Loan will not be saved to the server until the <c>Commit()</c>
            method is invoked.</remarks>
            <example>
The following code creates a new loan, sets the value of several fields
and then commits the loan to the database.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the empty shell for the new loan. At this point,
      // the loan has not been saved to the Encompass server.
      Loan loan = session.Loans.CreateNew();

      // Set the loan folder and loan name for the loan
      loan.LoanFolder = "My Pipeline";
      loan.LoanName = "Harrison";

      // Set the borrower's name and property address
      loan.Fields["36"].Value = "Howard";        // First name
      loan.Fields["37"].Value = "Harrison";      // Last name
      loan.Fields["11"].Value = "235 Main St.";  // Street Address
      loan.Fields["12"].Value = "Anycity";       // City
      loan.Fields["13"].Value = "Anycounty";     // County
      loan.Fields["14"].Value = "CA";            // State
      loan.Fields["15"].Value = "94432";         // Zip code

      // Save the loan to the server
      loan.Commit();

      // Write out the GUID of the newly created loan
      Console.WriteLine(loan.Guid);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.Exists(System.String)">
            <summary>
            Determines if the loan with the specified Guid exists.
            </summary>
            <param name="guid">The globally unique identifier (Guid) for the loan.</param>
            <returns>A flag indicating if the specified loan exists.</returns>
            <example>
The following code checks if a loan exists and, if so, opens it.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // If the loan exists, open it
      string guid = "{230b652c-5f60-44a1-bff2-4f4d63926c14}";

      if (session.Loans.Exists(guid))
      {
         // Open the loan
         Loan loan = session.Loans.Open(guid);
         Console.WriteLine("Opened loan " + loan.LoanFolder + "/" + loan.LoanName);
      }
      else
      {
         Console.WriteLine("Loan with GUID " + guid + " does not exist.");
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.Import(System.String,EllieMae.Encompass.BusinessObjects.Loans.LoanImportFormat)">
            <summary>
            Imports the data from a file into a new loan.
            </summary>
            <param name="filePath">The path of the import file.</param>
            <param name="format">The format of the data within the import file.</param>
            <example>
The following code imports a loan from an external Fannie Mae 3.x-formatted
file.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Import the loan file specified on the command line.
      // The returned loan must be committed to the database for
      // the import to be completed.
      Loan newLoan = session.Loans.Import(args[0], LoanImportFormat.FNMA3X);

      // Set the name and loan folder
      newLoan.LoanName = "ImportTest";
      newLoan.LoanFolder = "My Pipeline";

      // Commit the loan
      newLoan.Commit();

      // Dump the GUID of the new loan
      Console.WriteLine(newLoan.Guid);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.ImportWithTemplate(System.String,EllieMae.Encompass.BusinessObjects.Loans.LoanImportFormat,EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanTemplate)">
            <summary>
            Imports the data from a file into a new loan.
            </summary>
            <param name="filePath">The path of the import file.</param>
            <param name="format">The format of the data within the import file.</param>
            <param name="template">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanTemplate"/> 
            to be used during the import to initialize the loan file.</param>
            <example>
The following code imports a loan from an external Fannie Mae 3.x-formatted
file.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Import the loan file specified on the command line.
      // The returned loan must be committed to the database for
      // the import to be completed.
      Loan newLoan = session.Loans.Import(args[0], LoanImportFormat.FNMA3X);

      // Set the name and loan folder
      newLoan.LoanName = "ImportTest";
      newLoan.LoanFolder = "My Pipeline";

      // Commit the loan
      newLoan.Commit();

      // Dump the GUID of the new loan
      Console.WriteLine(newLoan.Guid);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.ImportWithLoanOfficer(System.String,EllieMae.Encompass.BusinessObjects.Loans.LoanImportFormat,EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanTemplate,EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Imports the data from a file into a new loan using a specified template.
            Assigns the specified user as the loan officer when there is no match between the
            loan officer name in the loan data and loan officer names in the organization.
            </summary>
            <param name="filePath">The path of the import file.</param>
            <param name="format">The format of the data within the import file.</param>
            <param name="template">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanTemplate"/> 
            to be used during the import to initialize the loan file.</param>
            <param name="user">The user to assign as the loan officer.</param>
            <example>
The following code imports a loan from an external Fannie Mae 3.x-formatted
file.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Import the loan file specified on the command line.
      // The returned loan must be committed to the database for
      // the import to be completed.
      Loan newLoan = session.Loans.Import(args[0], LoanImportFormat.FNMA3X);

      // Set the name and loan folder
      newLoan.LoanName = "ImportTest";
      newLoan.LoanFolder = "My Pipeline";

      // Commit the loan
      newLoan.Commit();

      // Dump the GUID of the new loan
      Console.WriteLine(newLoan.Guid);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.ImportFromBytes(System.Byte[]@,EllieMae.Encompass.BusinessObjects.Loans.LoanImportFormat)">
            <summary>
            Imports data from byte array into a new loan.
            </summary>
            <param name="importData">A byte array containing the data to be imported. This parameter
            is passed by reference solely for compatibility with Visual Basic 6.0 clients.
            The array passed to this function will not be modified.</param>
            <param name="format">The format of the data within the import file.</param>
            <remarks><note type="implementnotes">Because of language restrictions, this method
            cannot be used from using a weakly-typed language such as VBScript or
            JScript. Use the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.Import(System.String,EllieMae.Encompass.BusinessObjects.Loans.LoanImportFormat)"/> method instead.</note></remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.ImportFromBytesWithTemplate(System.Byte[]@,EllieMae.Encompass.BusinessObjects.Loans.LoanImportFormat,EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanTemplate)">
            <summary>
            Imports data from byte array into a new loan and applies a specified loan template.
            </summary>
            <param name="importData">A byte array containing the data to be imported. This parameter
            is passed by reference solely for compatibility with Visual Basic 6.0 clients.
            The array passed to this function will not be modified.</param>
            <param name="format">The format of the data within the import file.</param>
            <param name="template">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanTemplate"/> to be applied to the imported loan.</param>
            <remarks><note type="implementnotes">Because of language restrictions, this method
            cannot be used from using a weakly-typed language such as VBScript or
            JScript. Use the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.Import(System.String,EllieMae.Encompass.BusinessObjects.Loans.LoanImportFormat)"/> method instead.</note></remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.ImportFromTPO(System.Byte[]@,EllieMae.Encompass.BusinessObjects.Loans.LoanImportFormat,EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanTemplate,System.Boolean)">
            <summary>
            Imports data from a third-party originator. This method is for internal use only.
            </summary>
            <param name="importData">A byte array containing the data to be imported. This parameter
            is passed by reference solely for compatibility with Visual Basic 6.0 clients.
            The array passed to this function will not be modified.</param>
            <param name="format">The format of the data within the import file.</param>
            <param name="template">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanTemplate"/> to be applied to the imported loan.</param>
            <param name="suppressCalcs">Indicates if calculations should be suppressed.</param>
            <remarks>This method is intended for internal use only and should not be called by external
            applications.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.Delete(System.String)">
            <summary>
            Deletes a loan from the server.
            </summary>
            <param name="guid">The unique identifier for the loan to delete.</param>
            <example>
The following code deletes a loan using a GUID passed in on the command line.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Delete the specified loan
      session.Loans.Delete(args[0]);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Loans.SubmitBatchUpdate(EllieMae.Encompass.BusinessObjects.Loans.BatchUpdate)">
            <summary>
            Submits a batch update to the server for one or more loans.
            </summary>
            <param name="batch">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BatchUpdate"/> containing the data to be updated.</param>
            <remarks>
            <p>Batch updates allow you to quickly update the value of one or more fields in a set of loans.
            It is significantly faster than opening the individual loans and setting the field values, but
            it has several potential drawbacks:
            <list type="bullet">
            <item>No standard or custom calculations will be invoked. Thus, if the batch modifies
            fields which are used to calculate other loan values, those values will not be updated.</item>
            <item>Triggers associated with the fields will not be invoked.</item>
            <item>Business rules, such as Field Access and Loan Access rules, are not applied. All
            field values will be updated without regard to the rules in place.</item>
            <item>Any locks held on the loan are ignored. The changes made by the batch updated will
            supercede any changes made by users who have the loan currently locked.</item>
            </list>
            </p>
            <p>Because this method can be used to bypass rules, it can only be invoked by a user
            with Administrator access to the system.</p>
            </remarks>
            <example>
    The code below demonstrates how to update the broker name and address
    fields on a batch of loans in a single call to the Encompass Server.
    <code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "admin", "password");

      // Generate the list of loan GUIDs that will be updated
      StringList guids = new StringList();
      guids.Add("{55fbe34f-055f-48d0-ade5-2ec5ccfc555a}");
      guids.Add("{78b61507-c4da-4051-9283-a9e6650318eb}");
      guids.Add("{2c680754-816d-4826-a161-bb1b8f2fc51b}");

      // We will update the broker company information on the 1003 form
      BatchUpdate batch = new BatchUpdate(guids);
      batch.Fields.Add("315", "Encompass Loan Specialists, Inc.");
      batch.Fields.Add("319", "123 Main Street");
      batch.Fields.Add("313", "Anywhereville");
      batch.Fields.Add("321", "MO");
      batch.Fields.Add("323", "24432");

      // Submit the batch to the server
      session.Loans.SubmitBatchUpdate(batch); // Requires administrator user

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loans.Folders">
            <summary>
            Gets the list of all <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder">LoanFolders</see>
            defined on the server.
            </summary>
            <example>
The following code uses the Folders property to generate a list of all
of the Loan Folders defined on the server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Iterate over the loan folders
      foreach (LoanFolder folder in session.Loans.Folders)
         Console.WriteLine("There are " + folder.Size + " loans in folder " + folder.Name);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loans.Roles">
            <summary>
            Gets the collection of all <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role">Roles</see> defined in the Encompass system.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loans.Milestones">
            <summary>
            Provides access to the set of defined Milestones through which loans pass
            as they go from start to completion.
            </summary>
            <example>
The following code writes the actual or expected
closing date for every loan in the "My Pipeline" folder that has been
sent for processing.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the "My Pipeline" folder
      LoanFolder fol = session.Loans.Folders["My Pipeline"];

      // Retrieve the folder's contents
      LoanIdentityList ids = fol.GetContents();

      // Open each loan in the folder and check the expected closing date
      for (int i = 0; i < ids.Count; i++)
      {
         // Open the next loan in the loop
         Loan loan = fol.OpenLoan(ids[i].LoanName);

         // Get the "Closing" event from the loan
         MilestoneEvent msEvent = loan.Log.MilestoneEvents.GetEventForMilestone("Closing");

         if ((msEvent != null) && (msEvent.Date != null))
         {
            if (msEvent.Completed)
               Console.WriteLine("The loan \"" + loan.LoanName + "\" was closed on " + msEvent.Date);
            else
               Console.WriteLine("The loan \"" + loan.LoanName + "\" has an expected close date of " + msEvent.Date);
         }

         // Close the loan
         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loans.AdjustableRateTypes">
            <summary>
            Provides access to the set of defined Adjustable Rate types that can be assigned to a loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loans.Templates">
            <summary>
            Provides access to the set of Templates defined in the Encompass system.
            </summary>
            <example>
The following code creates a new loan using an existing Loan Template.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Templates;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the example purchase loan template from the server
      LoanTemplate template = (LoanTemplate) session.Loans.Templates.GetTemplate(TemplateType.LoanTemplate, 
         @"public:\Example Puchase Loan Template");

      // Create a new loan from the template
      Loan loan = template.NewLoan();

      // Set the name and folder
      loan.LoanName = "TemplateLoan";
      loan.LoanFolder = "My Pipeline";

      // Commit the loan to save it to the server
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Loans.FieldDescriptors">
            <summary>
            Provides access to the field definitions for the Encompass system.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.LockException">
            <summary>
            Exception class that represents errors when attempting to lock an object that is
            already locked by another user.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.LockException.CurrentLock">
            <summary>
            Gets the User ID of the user which currently holds a lock on this object.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Comments">
            <summary>
            Represents a collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Comment"/> objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IComments">
            <summary>
            Interface for Comments class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.Comments.Add(System.String)">
            <summary>
            Adds a comment to the collection.
            </summary>
            <param name="commentText">The text of the comment to be added.</param>
            <returns>Returns the new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Comment"/> object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.Comments.GetEnumerator">
            <summary>
            Returns an enumerator for the comments collection.
            </summary>
            <returns>Reurns an IEnumerator implementation for the collection.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.Comments.cacheComments">
            <summary>
            Ensures that all of the comments are wrapped up and added to the cachedComments collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Comments.Count">
            <summary>
            Gets the number of Comments in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Comments.Item(System.Int32)">
            <summary>
            Retrieves a comment from the collection by index.
            </summary>
            <param name="index">The index of the comment to retrieve.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Comment"/> at the specified index.</returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionType">
            <summary>
            Enumeration of the different condition types available in Encompass.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionType.Underwriting">
            <summary>Represents an underwriting condition.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionType.PostClosing">
            <summary>Represents a post-closing or shipping condition.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionType.Preliminary">
            <summary>Represents a preliminary condition.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionStatus">
            <summary>
            Enumeration of the different possible statuses of a Condition.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionStatus.Added">
            <summary>The condition has been added but no action taken.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionStatus.Expected">
            <summary>The condition is waiting to be received.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionStatus.Requested">
            <summary>The condition has been requested from the source.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionStatus.Rerequested">
            <summary>The condition has been re-requested from the source.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionStatus.Received">
            <summary>The condition has been received.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionStatus.Reviewed">
            <summary>The condition has been reviewed.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionStatus.Sent">
            <summary>The condition has been sent to the recipient.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionStatus.Cleared">
            <summary>The condition has been cleared.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionStatus.Waived">
            <summary>The condition has been waived.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionStatus.Expired">
            <summary>The condition has been expired prior to being cleared or waived.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionStatus.Fulfilled">
            <summary>The condition has been fulfilled.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionStatus.PastDue">
            <summary>The condition is past due.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConditionStatus.Rejected">
            <summary>The condition has been rejected.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Condition">
            <summary>
            Represents an Underwriting or Post-Closing condition.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ICondition">
            <summary>
            Interface for EDMTransaction class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.Condition.GetLinkedDocuments">
            <summary>
            Returns the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/> objects which are linked to this condition.
            </summary>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.LogEntryList"/> containing the linked documents.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Condition.Title">
            <summary>
            Gets the title of the condition
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Condition.ConditionType">
            <summary>
            Indicates the type of condition represented by the object
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Condition.BorrowerPair">
            <summary>
            Gets or sets the BorrowerPair associated with a condition.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Condition.AddedBy">
            <summary>
            Gets the ID of the user who added this condition to the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Condition.DateAdded">
            <summary>
            Gets the Date and time on which the condition was added to the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Condition.Description">
            <summary>
            Gets or sets the description of the Condition.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Condition.Details">
            <summary>
            Gets or sets the details of the condition.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Condition.Source">
            <summary>
            Gets or sets the source of the Condition.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Condition.Status">
            <summary>
            Gets the current status of the condition.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Condition.Comments">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Condition.Comments"/> collection for the condition.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConversationContactMethod">
            <summary>
            Enumerates the available contact methods available for a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation"/>.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConversationContactMethod.Phone">
            <summary>Indicates the conversation was held by phone.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.ConversationContactMethod.Email">
            <summary>Indicates an email was sent to the specified recipient.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation">
            <summary>
            Represents a single conversation associated with a Loan.
            </summary>
            <remarks>The inherited Date property of a Conversation represents the
            date on which the conversation occurred.
            <p>Conversation instances become invalid
            when the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Refresh">Refresh</see> method is
            invoked on the parent <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan">Loan</see> object. Attempting
            to access this object after invoking Refresh() will result in an
            exception.</p>
            </remarks>
            <example>
The following code creates a new Conversation in a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("tcp://myserver:11091/", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
      loan.Lock();
   
      // Add a new conversation event to the log
      Conversation conv = loan.Log.Conversations.Add(DateTime.Now);
      conv.HeldWith = "Thomas Smith";
      conv.PhoneNumber = "555-555-5555";
      conv.ContactMethod = ConversationContactMethod.Phone;
      
      // Save the loan
      loan.Commit();
      loan.Unlock();
      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IConversation">
            <summary>
            Interface for Conversation class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation.EntryType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType"/> for the current entry.
            </summary>
            <remarks>This property will always return the value 
            <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.Conversation"/>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation.HeldWith">
            <summary>
            Gets the name of the person with whom the conversation was held.
            </summary>
            <example>
The following code creates a new Conversation in a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("tcp://myserver:11091/", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
      loan.Lock();
   
      // Add a new conversation event to the log
      Conversation conv = loan.Log.Conversations.Add(DateTime.Now);
      conv.HeldWith = "Thomas Smith";
      conv.PhoneNumber = "555-555-5555";
      conv.ContactMethod = ConversationContactMethod.Phone;
      
      // Save the loan
      loan.Commit();
      loan.Unlock();
      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation.Company">
            <summary>
            Gets or sets the name of the company at which the individual works with whom the
            conversation was held.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation.ContactMethod">
            <summary>
            Gets or sets the method of contact used for the conversation.
            </summary>
            <example>
The following code creates a new Conversation in a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("tcp://myserver:11091/", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
      loan.Lock();
   
      // Add a new conversation event to the log
      Conversation conv = loan.Log.Conversations.Add(DateTime.Now);
      conv.HeldWith = "Thomas Smith";
      conv.PhoneNumber = "555-555-5555";
      conv.ContactMethod = ConversationContactMethod.Phone;
      
      // Save the loan
      loan.Commit();
      loan.Unlock();
      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation.PhoneNumber">
            <summary>
            Gets or sets the phone number called.
            </summary>
            <example>
The following code creates a new Conversation in a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("tcp://myserver:11091/", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
      loan.Lock();
   
      // Add a new conversation event to the log
      Conversation conv = loan.Log.Conversations.Add(DateTime.Now);
      conv.HeldWith = "Thomas Smith";
      conv.PhoneNumber = "555-555-5555";
      conv.ContactMethod = ConversationContactMethod.Phone;
      
      // Save the loan
      loan.Commit();
      loan.Unlock();
      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation.EmailAddress">
            <summary>
            Gets or sets the e-mail addressed to which a message was sent.
            </summary>
            <example>
The following code identifies all conversations within a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("tcp://myserver:11091/", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
   
      // Add a new conversation event to the log
      foreach (Conversation conv in loan.Log.Conversations)
      {
         // Check if an alert is specified
         Console.WriteLine("Held With:  " + conv.HeldWith);
         Console.WriteLine("Held By:    " + conv.HeldBy);
         Console.WriteLine("Method:     " + conv.ContactMethod);
         Console.WriteLine("Phone:      " + conv.PhoneNumber);
         Console.WriteLine("E-mail:     " + conv.EmailAddress);
      }

      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation.DisplayInLog">
            <summary>
            Gets or sets a flag indicating if this conversation should be displayed in the 
            Log pane of the Encompass application for the current loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation.NewComments">
            <summary>
            Gets or sets the user's new comments since the loan was last saved.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation.HeldBy">
            <summary>
            Gets the user ID of the user who created this conversation log entry.
            </summary>
            <example>
The following code identifies all conversations within a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("tcp://myserver:11091/", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
   
      // Add a new conversation event to the log
      foreach (Conversation conv in loan.Log.Conversations)
      {
         // Check if an alert is specified
         Console.WriteLine("Held With:  " + conv.HeldWith);
         Console.WriteLine("Held By:    " + conv.HeldBy);
         Console.WriteLine("Method:     " + conv.ContactMethod);
         Console.WriteLine("Phone:      " + conv.PhoneNumber);
         Console.WriteLine("E-mail:     " + conv.EmailAddress);
      }

      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosedDocumentType">
            <summary>
            Enumerates the different document types for a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosedDocument"/>.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosedDocumentType.NotSpecified">
            <summary>The document type is not specified.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosedDocumentType.eDisclosure">
            <summary>The document represents an Electronic Disclosure.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosedDocumentType.StandardForm">
            <summary>The document is a standard Encompass form.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosedDocumentType.CustomForm">
            <summary>The document is a custom print form.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosedDocumentType.Needed">
            <summary>The document is being requested from the user (i.e. no document delivered).</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosedDocument">
            <summary>
            Represents a single document included in a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IDisclosedDocument">
            <summary>
            Interface for DisclosedDocuments class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosedDocument.Title">
            <summary>
            Gets the title of the document.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosedDocument.DocumentType">
            <summary>
            Gets the document type of the document.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosedDocuments">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosedDocument"/> objects in a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IDisclosedDocuments">
            <summary>
            Interface for DisclosedDocuments class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosedDocuments.GetEnumerator">
            <summary>
            Returns an enumerator for the comments collection.
            </summary>
            <returns>Reurns an IEnumerator implementation for the collection.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosedDocuments.Count">
            <summary>
            Gets the number of DisclosedDocuments in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosedDocuments.Item(System.Int32)">
            <summary>
            Retrieves a comment from the collection by index.
            </summary>
            <param name="index">The index of the comment to retrieve.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosedDocument"/> at the specified index.</returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod">
            <summary>
            The enumeration of the different disclosure methods.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod.Unknown">
            <summary>Disclosure method is unknown</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod.Mail">
            <summary>Disclosure was sent by mail</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod.eDisclosure">
            <summary>Disclosure was made electronically</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod.Fax">
            <summary>Disclosure was sent by fax</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod.InPerson">
            <summary>Disclosure was delivered in person</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.DeliveryMethod.Other">
            <summary>An unspecified disclosure method was used</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure">
            <summary>
            Represents a single Disclosure Tracking record associated with a Loan.
            </summary>
            <remarks>The inherited Date property of a Disclosure represents the
            date on which the disclosure was made.
            <p>Disclosure instances become invalid
            when the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Refresh">Refresh</see> method is
            invoked on the parent <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan">Loan</see> object. Attempting
            to access this object after invoking Refresh() will result in an
            exception.</p>
            </remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IDisclosure">
            <summary>
            Interface for Disclosure class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure.EntryType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType"/> for the current entry.
            </summary>
            <remarks>This property will always return the value 
            <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.Disclosure"/>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure.DisclosureType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosureType"/> for the disclosure.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure.EnabledForCompliance">
            <summary>
            Gets or sets the flag indicating disclosure is invalid.
            </summary>
            <remarks>An invalid disclosure is one that was never actually made and will not be considered for
            the purposes of determining the compliance timeline of the loan.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure.ReceivedDate">
            <summary>
            Gets or sets the date the disclosure was received by the borrower.
            </summary>
            <remarks>If the disclosure has not been received, this property will be null; otherwise,
            it will be a DateTime value. To mark a disclosure as not having been received, set this
            property to null.
            When the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure.DeliveryMethod"/> for the disclosure is set to Mail, Fax, or InPerson,
            the ReceivedDate will be set automatically based on compliance regulations. For Mail deliveries,
            the ReceivedDate is always three postal days from the date sent. For Fax and InPerson, the
            date received will match the disclosure date. Attempting to set this property when the DeliveryMethod
            is any of those values will result in an exception.
            </remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosureField">
            <summary>
            Represents a field in a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure"/> snapshot.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IDisclosureField">
            <summary>
            Interface for LoanField class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosureField.setFieldValue(System.String)">
            <summary>
            Sets the value of the field in the snapshot.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosureField.UnformattedValue">
            <summary>
            Override the Unformatted value to return the value of the lock request field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosureField.EllieMae#Encompass#BusinessObjects#Loans#Logging#IDisclosureField#Value">
            <summary>
            Gets or sets the value of the field thru the IDisclosureField interface.
            </summary>
            <remarks>This method exists primarilly for COM-based clients which cannot marshal values
            properly to the object-valued Value property.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosureFields">
            <summary>
            Represents the collection of fields that are stored for a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IDisclosureFields">
            <summary>
            Interface for LoanFields class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosureFields.Descriptors">
            <summary>
            Gets the set of field descriptors which are stored when a disclosure is made.
            </summary>
            <remarks>The set of fields included in a disclosure snapshot may differ for each disclosure
            depending on the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosureType"/> of the disclosure.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosureFields.Item(System.String)">
            <summary>
            Gets the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.DisclosureField">DisclosureField</see> based on the
            field ID provided.
            </summary>
            <remarks>The set of fields included in a disclosure snapshot may differ for each disclosure
            depending on the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosureType"/> of the disclosure. If an attempt is
            made to retrieve the value of a field which is not in the snapshot, an exception will
            be thrown.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMDocumentAction">
            <summary>
            Represents the possible actions associated with an <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMDocument"/>.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMDocumentAction.None">
            <summary>No action is specified.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMDocumentAction.Sent">
            <summary>The document was sent to the borrower for review.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMDocumentAction.Needed">
            <summary>The document was request from the borrower for submission.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMDocumentAction.SignAndReturn">
            <summary>The document was sent to the borrower, who is to sign and return the document.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMDocumentAction.Other">
            <summary>An unknown action is specified.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMDocument">
            <summary>
            Represents a single document or page that is included in an EDM transaction.
            </summary>
            <example>
The following code displays all of the documents that have been requested
from the borrower to be signed and returned, along with the name of the
individual who made the request and the date the request was made.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the "My Pipeline" folder
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
   
      // Iterate over all of the EDM transactions associated with the loan
      foreach (EDMTransaction txn in loan.Log.EDMTransactions)
      {
         // Iterate over the list of documents.
         foreach (EDMDocument doc in txn.Documents)
            Console.WriteLine(doc.Title + " requested on " + txn.Date + " by " + txn.Creator);
      }

      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IEDMDocument">
            <summary>
            Interface for the EDMTransactionItem class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMDocument.Title">
            <summary>
            Gets the name of the document that was sent or requested.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMDocuments">
            <summary>
            Represents the collection of documents requested or sent as part of an
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMTransaction"/>.
            </summary>
            <example>
The following code displays all of the documents that have been requested
from the borrower to be signed and returned, along with the name of the
individual who made the request and the date the request was made.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the "My Pipeline" folder
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
   
      // Iterate over all of the EDM transactions associated with the loan
      foreach (EDMTransaction txn in loan.Log.EDMTransactions)
      {
         // Iterate over the list of documents.
         foreach (EDMDocument doc in txn.Documents)
            Console.WriteLine(doc.Title + " requested on " + txn.Date + " by " + txn.Creator);
      }

      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IEDMDocuments">
            <summary>
            Interface for the EDMDocuments object.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMDocuments.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An object that implements IEnumerator for iterating over the collection.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMDocuments.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMDocuments.Item(System.Int32)">
            <summary>
            Gets an <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMDocument"/> from the collection by index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMTransaction">
            <summary>
            Represents a transaction from within the Electronic Document Management (EDM) features
            of Encompass.
            </summary>
            <remarks>
            An EDM transaction is made to either send a document to the borrower for review or
            to request that a borrower submit a document for the loan package. Each transaction
            can consist of multiple document requests, which are presented in the
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMTransaction.Documents"/> collection. The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMTransaction.Date"/> on the EDMTransaction
            represents the date on which the request was made of the borrower.
            </remarks>
            <example>
The following code displays all of the documents that have been requested
from the borrower to be signed and returned, along with the name of the
individual who made the request and the date the request was made.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the "My Pipeline" folder
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
   
      // Iterate over all of the EDM transactions associated with the loan
      foreach (EDMTransaction txn in loan.Log.EDMTransactions)
      {
         // Iterate over the list of documents.
         foreach (EDMDocument doc in txn.Documents)
            Console.WriteLine(doc.Title + " requested on " + txn.Date + " by " + txn.Creator);
      }

      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IEDMTransaction">
            <summary>
            Interface for EDMTransaction class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMTransaction.EntryType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType"/> for the current entry.
            </summary>
            <remarks>This property will always return the value 
            <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.EDMTransaction"/>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMTransaction.Date">
            <summary>
            Gets the date on which the EDM transaction occurred.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMTransaction.Description">
            <summary>
            Gets the description of the EDM Transaction.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMTransaction.Creator">
            <summary>
            Gets the name of the user who initiated this transaction.
            </summary>
            <example>
The following code displays all of the documents that have been requested
from the borrower to be signed and returned, along with the name of the
individual who made the request and the date the request was made.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the "My Pipeline" folder
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
   
      // Iterate over all of the EDM transactions associated with the loan
      foreach (EDMTransaction txn in loan.Log.EDMTransactions)
      {
         // Iterate over the list of documents.
         foreach (EDMDocument doc in txn.Documents)
            Console.WriteLine(doc.Title + " requested on " + txn.Date + " by " + txn.Creator);
      }

      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMTransaction.Documents">
            <summary>
            Gets the collection of documents that were included in this transaction.
            </summary>
            <example>
The following code displays all of the documents that have been requested
from the borrower to be signed and returned, along with the name of the
individual who made the request and the date the request was made.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the "My Pipeline" folder
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
   
      // Iterate over all of the EDM transactions associated with the loan
      foreach (EDMTransaction txn in loan.Log.EDMTransactions)
      {
         // Iterate over the list of documents.
         foreach (EDMDocument doc in txn.Documents)
            Console.WriteLine(doc.Title + " requested on " + txn.Date + " by " + txn.Creator);
      }

      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.InvestorRegistration">
            <summary>
            Encapsulates the registration data when a loan is registered with an investor.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IInvestorRegistration">
            <summary>
            Interface for EDMTransaction class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.InvestorRegistration.EntryType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType"/> for this object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.InvestorRegistration.RegisteredBy">
            <summary>
            Gets the ID of the <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/> that created the registration.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.InvestorRegistration.InvestorName">
            <summary>
            Gets the name of the investor with which the loan was registered.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.InvestorRegistration.DateRegistered">
            <summary>
            Gets the date on which the loan was registered.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.InvestorRegistration.ExpirationDate">
            <summary>
            Gets or sets the expiration date for the registration.
            </summary>
            <remarks>If there is no defined expiration date, this property will return <c>null</c>. Otherwise
            it will return a DateTime object for the expiration date.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.InvestorRegistration.Expired">
            <summary>
            Indicates if the registration is expired.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.InvestorRegistration.Current">
            <summary>
            Indicates if the registration is the current, active registration for the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.InvestorRegistration.ReferenceNumber">
            <summary>
            Gets or sets the investor's reference number for the loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog">
            <summary>
            Provides access to all of the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry"/> objects
            associated with the current loan.
            </summary>
            <remarks>
            <p>The LoanLog is used to access all of the historical information
            (both past and future) for a loan as well as information regarding milestones,
            conditions, tasks, etc., each of which is represented by its own class in the
            Logging namespace. For each such class, the LoanLog exposes a property which allows
            access to the collection of records for that event type. For example, 
            the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent"/> class represents a single milestone in the lifetime of the loan,
            and the collection of all MilestoneEvents can be accessed through the LoanLog's
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.MilestoneEvents"/> property.</p>
            </remarks>
            <example>
The following code produces a report of all the loans in the My Pipeline folder
which are currently waiting to be sent to processing.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the "My Pipeline" folder
      LoanFolder fol = session.Loans.Folders["My Pipeline"];

      // Retrieve the folder's contents
      LoanIdentityList ids = fol.GetContents();

      // Get the Processing Milestone
      Milestone processing = session.Loans.Milestones.Processing;

      // Open each loan in the folder and check the expected closing date
      for (int i = 0; i < ids.Count; i++)
      {
         // Open the next loan in the loop
         Loan loan = fol.OpenLoan(ids[i].LoanName);

         // Check if this is in the Processing stage
         if ((loan.Log.MilestoneEvents.NextEvent != null) &&
            (loan.Log.MilestoneEvents.NextEvent.MilestoneName == processing.Name))
            Console.WriteLine("The loan \"" + loan.LoanName + "\" is waiting to be sent for processing.");

         // Close the loan
         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILoanLog">
            <summary>
            Interface for LoanLog class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.GetLogEntrySequence(EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType)">
            <summary>
            Retrieves a list of the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry"/> objects in chronological order.
            </summary>
            <param name="entryTypes">A bitmask indicating the types of entries to
            be included in the returned set.</param>
            <returns>A <see cref="T:EllieMae.Encompass.Collections.LogEntryList"/>
            containing the specified entries in chronological order (earliest to latest).</returns>
            <remarks>This function returns all log entrues of the specified type(s) ordered
            based by the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry.Date"/> values of the entries.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.GetEntryByID(System.String)">
            <summary>
            Gets a log entry using its unique ID.
            </summary>
            <param name="entryId">The ID of teh desired log entry.</param>
            <returns>The entry with the specified ID, or <c>null</c> if not found.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.MilestoneEvents">
            <summary>
            Gets the set of all miletone-related events from the log.
            </summary>
            <remarks>The returned <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneEvents"/> object can also
            be used to get information on the most recently completed milestone for
            the current loan.</remarks>
            <example>
The following code produces a report of all the loans in the My Pipeline folder
which are currently waiting to be sent to processing.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the "My Pipeline" folder
      LoanFolder fol = session.Loans.Folders["My Pipeline"];

      // Retrieve the folder's contents
      LoanIdentityList ids = fol.GetContents();

      // Get the Processing Milestone
      Milestone processing = session.Loans.Milestones.Processing;

      // Open each loan in the folder and check the expected closing date
      for (int i = 0; i < ids.Count; i++)
      {
         // Open the next loan in the loop
         Loan loan = fol.OpenLoan(ids[i].LoanName);

         // Check if this is in the Processing stage
         if ((loan.Log.MilestoneEvents.NextEvent != null) &&
            (loan.Log.MilestoneEvents.NextEvent.MilestoneName == processing.Name))
            Console.WriteLine("The loan \"" + loan.LoanName + "\" is waiting to be sent for processing.");

         // Close the loan
         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.MilestoneTasks">
            <summary>
            Gets the set of all <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask"/> records in the log.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.TrackedDocuments">
            <summary>
            Gets the set of all document tracking entries from the log.
            </summary>
            <example>
The following code adds a new TrackedDocument to every loan in the 
"My Pipeline" folder, sets the document's ordered day to today and allows
10 days for it to be received.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the "My Pipeline" folder
      LoanFolder fol = session.Loans.Folders["My Pipeline"];

      // Retrieve the folder's contents
      LoanIdentityList ids = fol.GetContents();

      // Open each loan in the folder and check the expected closing date
      for (int i = 0; i < ids.Count; i++)
      {
         // Open and lock the next loan in the loop
         Loan loan = fol.OpenLoan(ids[i].LoanName);
         loan.Lock();

         // Add a new supporting document to the loan
         TrackedDocument doc = loan.Log.TrackedDocuments.Add("My Custom Document", 
            session.Loans.Milestones.Submittal.Name);

         doc.OrderDate = DateTime.Now;
         doc.DueDays = 10;

         // Close the loan
         loan.Commit();
         loan.Unlock();
         loan.Close();
      }
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.Conversations">
            <summary>
            Gets the set of all conversation-related entries from the log.
            </summary>
            <example>
The following code creates a new Conversation in a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server -- we must log in as an 
      // administrator in order to invoke AddForUser().
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
      loan.Lock();
   
      // Fetch the user we'll be adding the conversation for
      User mary = session.Users.GetUser("mary");

      // Add a new conversation event to the log
      Conversation conv = loan.Log.Conversations.AddForUser(DateTime.Now, mary);
      conv.HeldWith = "James Hartley";
      conv.Company = "Harley Appraisal Services";
      conv.EmailAddress = "jhartl@hartleyappraisals.com";
      conv.ContactMethod = ConversationContactMethod.Email;
      conv.Comments = "Mary contacted James and scheduled the appraisal for 6/16";
      conv.DisplayInLog = false;

      // Save the loan
      loan.Commit();
      loan.Unlock();
      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.PrintEvents">
            <summary>
            Gets the set of all print event entries from the log.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.ReceivedDownloads">
            <summary>
            Gets the set of all log entries corresponding to received and improted downloads.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.EDMTransactions">
            <summary>
            Gets the set of all EDM-related transactions that are recorded in the log.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.StatusOnlineUpdates">
            <summary>
            Gets the set of all updates made to the Status Online web site for the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.HtmlEmailMessages">
            <summary>
            Gets the set of all html messages sent for the loan
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.UnderwritingConditions">
            <summary>
            Gets the set of all Underwriting Conditions on the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.PostClosingConditions">
            <summary>
            Gets the set of all Post-closing Conditions on the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.PreliminaryConditions">
            <summary>
            Gets the set of all Preliminary Conditions on the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.InvestorRegistrations">
            <summary>
            Gets the set of Investor Registrations from the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.LockRequests">
            <summary>
            Gets the set of all Lock Requests on the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.LockConfirmations">
            <summary>
            Gets the set of all Lock Requests on the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.LockDenials">
            <summary>
            Gets the set of all Lock Requests on the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.LockCancellationRequests">
            <summary>
            Gets the set of all Lock Cancellation Requests on the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.LockCancellations">
            <summary>
            Gets the set of all Lock Cancellations on the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.Disclosures">
            <summary>
            Gets the set of all Disclosure Tracking records on the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.Disclosures2015">
            <summary>
            Gets the set of all Disclosure Tracking 2015 records on the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog.DocumentOrders">
            <summary>
            Gets the set of all Document Order records on the loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockConfirmation">
            <summary>
            Summary description for LockConfirmation.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILockConfirmation">
            <summary>
            Interface for EDMTransaction class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockConfirmation.Date">
            <summary>
            Gets the date on which the confirmation was made.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockConfirmation.EntryType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType"/> for this object.
            </summary>
            <remarks>Thie property will return LogEntryType.LockConfirmation.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockConfirmation.AlertLO">
            <summary>
            Gets or sets a flag indicating if the loan's Loan Officer should be alerted.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockConfirmation.BuySideExpirationDate">
            <summary>
            Gets or sets the Buy Side expiration date for the request.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockConfirmation.SellSideDeliveryDate">
            <summary>
            Gets or sets the sell-side delivery date on the request.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockConfirmation.SellSideExpirationDate">
            <summary>
            Gets or sets the sell-side expiration date on the request.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockConfirmation.ConfirmedBy">
            <summary>
            Gets the user ID of the user who confirmed the rate lock.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockConfirmation.LockRequest">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockConfirmation.LockRequest"/> to which this confirmation applies.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockDenial">
            <summary>
            Provides the details of a rate lock denial in response to a request.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILockDenial">
            <summary>
            Interface for EDMTransaction class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockDenial.EntryType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType"/> for this object.
            </summary>
            <remarks>This property will return LogEntryType.LockDenial.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockDenial.Date">
            <summary>
            Gets the date and time at which the lock was denied.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockDenial.AlertLO">
            <summary>
            Gets or sets a flag indicating if the loan's Loan Officer should be alerted.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockDenial.DeniedBy">
            <summary>
            Gets the user ID of the user who denied the rate lock.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockDenial.LockRequest">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockDenial.LockRequest"/> to which this denial applies.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestStatus">
            <summary>
            Enumeration of the possible status values for a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest"/>.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestStatus.None">
            <summary>Request has not yet been sent.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestStatus.Pending">
            <summary>Request has been sent but not locked.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestStatus.RateExpired">
            <summary>Buy- or sell-side expiration date has passed prior to a lock being obtained.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestStatus.LockExpired">
            <summary>Buy- or sell-side expiration date has passed after a lock was obtained.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestStatus.RateLocked">
            <summary>The rate requested has been locked and confirmed.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestStatus.Inactive">
            <summary>Request represents an old rate lock request which has been superseced by a more recent request.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestStatus.Denied">
            <summary>Request has been denied.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestStatus.Cancelled">
            <summary>Lock has been cancelled.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest">
            <summary>
            Represents a rate lock request for the secondary marketing tool.
            </summary>
            <remarks>When a lock request is made, Encompass creates a snapshot of the lock-related fields
            which become fixed for that lock. You can access that snapshot's values through the 
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Fields"/> collection, which represents a read-only set of loan fields. Only fields
            included in the lock request are included.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILockRequest">
            <summary>
            Interface for EDMTransaction class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.IsActive">
            <summary>
            Determines if this request represents an active request or lock.
            </summary>
            <returns>Returns <c>true</c> is the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Status"/> is Pending or RateLocked,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Lock">
            <summary>
            Marks the currently pending lock request as locked, but does not create a confirmation.
            </summary>
            <remarks>Any pending changes made to the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Fields"/> collection will be committed
            when this method is called. Additionally, any calculated fields within the rate
            lock request will be updated.</remarks>
            <example>
      The following code determines if the loan has a pending lock request and,
      if so, populates the buy-side data for the request. It then locks
      the request.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the loan
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Retrieve the current lock request, if any, from the loan
      LockRequest req = loan.Log.LockRequests.GetCurrent();

      // If the YSP is less than 1 basis point, we will deny the lock request
      if (req.Status == LockRequestStatus.Pending)
      {
        // Set the buy-side fields for the request
        req.Fields["2149"].Value = DateTime.Today;
        req.Fields["2150"].Value = 45;

        // Set the buy-side base rate and adjustments
        req.Fields["2152"].Value = 6.75;
        req.Fields["2153"].Value = "45 Day Lock Period";
        req.Fields["2154"].Value = 0.125;

        // Set the buy-side base price and adjustments
        req.Fields["2161"].Value = 99.75;
        req.Fields["2162"].Value = "FICO >= 720";
        req.Fields["2163"].Value = 0.25;

        // Lock the request. There is no need to call the CommitChanges() method on the Fields
        // collection since this will be done within the call to Lock().
        req.Lock();
      }

      // Save and close the loan file
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Confirm">
            <summary>
            Confirms the lock request.
            </summary>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockConfirmation"/> record for the request.</returns>
            <remarks>This method is equivalent to calling <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Confirm(EllieMae.Encompass.BusinessObjects.Users.User)"/> and passing
            the currently logged in User as the confirmingUser.</remarks>
            <example>
      The following code determines if the loan has a pending lock request and,
      if so, populates the buy-side and sell-side data for the request. It then locks
      and confirms the request.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the loan
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Retrieve the current lock request, if any, from the loan
      LockRequest req = loan.Log.LockRequests.GetCurrent();

      // If there's a pending lock request, lock and confirm the request
      if (req != null && req.Status == LockRequestStatus.Pending)
      {
        // Set the Buy side lock date and period
        req.Fields["2149"].Value = DateTime.Today;
        req.Fields["2150"].Value = 45;

        // Set the buy-side base rate and adjustments
        req.Fields["2152"].Value = 6.75;
        req.Fields["2153"].Value = "45 Day Lock Period";
        req.Fields["2154"].Value = 0.125;

        // Set the buy-side base price and adjustments
        req.Fields["2161"].Value = 99.75;
        req.Fields["2162"].Value = "FICO >= 720";
        req.Fields["2163"].Value = 0.25;

        // Set the sell-side lock date and period
        req.Fields["2220"].Value = DateTime.Today.AddDays(2);
        req.Fields["2221"].Value = 60;

        // Set the sell-side base rate and adjustments
        req.Fields["2223"].Value = 6.35;
        req.Fields["2224"].Value = "45 Day Lock Period";
        req.Fields["2225"].Value = 0.05;

        // Set the sell-side base price and adjustments
        req.Fields["2232"].Value = 101.15;
        req.Fields["2233"].Value = "FICO >= 720";
        req.Fields["2234"].Value = 0.125;

        // Lock and confirm the rate
        req.Confirm();
      }

      // Save and close the loan file
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Confirm(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Confirms the lock request.
            </summary>
            <param name="confirmingUser">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/> who will be recorded as confirming the lock
            request. Pass <c>null</c> to indicate the currently logged in user.</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockConfirmation"/> record for the request.</returns>
            <remarks><p>Confirming a rate lock causes the buy-side information from the LockRequest
            to be copied into the loan's primary set of fields. For example, the note rate (field 3)
            is updated with the Net Buy Rate (2160) from the lock's <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Fields"/> collection.</p>
            <p>The the request has not already been locked, calling the Confirm method will also
            cause the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Lock"/> method to be invoked.</p>
            </remarks>
            <example>
      The following code determines if the loan has a pending lock request and,
      if so, populates the buy-side and sell-side data for the request. It then locks
      and confirms the request.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the loan
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Retrieve the current lock request, if any, from the loan
      LockRequest req = loan.Log.LockRequests.GetCurrent();

      // If there's a pending lock request, lock and confirm the request
      if (req != null && req.Status == LockRequestStatus.Pending)
      {
        // Set the Buy side lock date and period
        req.Fields["2149"].Value = DateTime.Today;
        req.Fields["2150"].Value = 45;

        // Set the buy-side base rate and adjustments
        req.Fields["2152"].Value = 6.75;
        req.Fields["2153"].Value = "45 Day Lock Period";
        req.Fields["2154"].Value = 0.125;

        // Set the buy-side base price and adjustments
        req.Fields["2161"].Value = 99.75;
        req.Fields["2162"].Value = "FICO >= 720";
        req.Fields["2163"].Value = 0.25;

        // Set the sell-side lock date and period
        req.Fields["2220"].Value = DateTime.Today.AddDays(2);
        req.Fields["2221"].Value = 60;

        // Set the sell-side base rate and adjustments
        req.Fields["2223"].Value = 6.35;
        req.Fields["2224"].Value = "45 Day Lock Period";
        req.Fields["2225"].Value = 0.05;

        // Set the sell-side base price and adjustments
        req.Fields["2232"].Value = 101.15;
        req.Fields["2233"].Value = "FICO >= 720";
        req.Fields["2234"].Value = 0.125;

        // Lock and confirm the rate
        req.Confirm();
      }

      // Save and close the loan file
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Deny">
            <summary>
            Denies the lock request.
            </summary>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockDenial"/> record for the request.</returns>
            <remarks>This method is equalivant to calling the method <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Deny(EllieMae.Encompass.BusinessObjects.Users.User)"/>
            and passing the currently logged in user as the denyingUser.</remarks>
            <example>
      The following code denies the current lock request if the YSP is less than
      one basis point.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the loan
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Retrieve the current lock request, if any, from the loan
      LockRequest req = loan.Log.LockRequests.GetCurrent();

      // If the YSP is less than 1 basis point, we will deny the lock request
      if (!req.Fields["2277"].IsEmpty())
      {
        decimal ysp = req.Fields["2277"].ToDecimal();
        if (ysp < 1M) req.Deny();
      }

      // Save and close the loan file
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Deny(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Denies the lock request.
            </summary>
            <param name="denyingUser">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/> who is denying the request. A <c>null</c>
            value can be passed to indicate the currently logged in user.</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockDenial"/> record for the request.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Extend(System.Int32,System.Decimal,System.String)">
            <summary>
            Creates a lock extension request
            </summary>
            <param name="daysToExtend">The number of days by which the lock is to be extended.</param>
            <param name="priceAdjustment">The price adjustment, if any, incurred by the extension.</param>
            <param name="comments">Any comments associated with the lock request extension.</param>
            <returns>Returns a new LockRequest object representing the extension request.</returns>
            <remarks>
            <p>A Lock request can only be extended if is is active and has been confirmed. Attempting to
            extend an lock which does not meet these requirements will result in an exception.</p>
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Extend(EllieMae.Encompass.BusinessObjects.Users.User,System.Int32,System.Decimal,System.String)">
            <summary>
            Creates a lock extension request
            </summary>
            <param name="extendingUser">The user acting as the requestor of the extension.</param>
            <param name="daysToExtend">The number of days by which the lock is to be extended.</param>
            <param name="priceAdjustment">The price adjustment, if any, incurred by the extension.</param>
            <param name="comments">Any comments associated with the lock request extension.</param>
            <returns>Returns a LockRequest object representing the extension request.</returns>
            <remarks>
            <p>A Lock request can only be extended if is is active and has been confirmed. Attempting to
            extend an lock which does not meet these requirements will result in an exception.</p>
            <p>If the <c>priceAdjutsment</c> parameter is set to zero and the system policy indicates that 
            the price adjustment is calculated automatically, the adjustment will be calculated.</p>
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.EntryType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType"/> for this object.
            </summary>
            <remarks>Thie property will return LogEntryType.LockRequest.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Date">
            <summary>
            Gets the date and time on which this request was made.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.AlertLO">
            <summary>
            Gets or sets a flag indicating if the loan's Loan Officer should be alerted.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.ExpirationDate">
            <summary>
            Provides the expiration of the lock request.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.ExtensionExpirationDate">
            <summary>
            Indicates the expiration date of a lock extension
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.BuySideExpirationDate">
            <summary>
            Gets or sets the Buy Side expiration date for the request.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.IsExtension">
            <summary>
            Indicates if the request represents an extension of a previous lock request
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.IsRelock">
            <summary>
            Indicates if the request represents a relock of a previous lock request.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.BuySideExtensionDays">
            <summary>
            Returns the number of days by which the buy-side lock is extended.
            </summary>
            <remarks>This property returns a valid value only if the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.IsExtension"/> property 
            returns <c>true</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.RequestedBy">
            <summary>
            Gets the user who made the lock request.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.LockRequestLog">
            <summary>
            Gets LockRequestLog.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Status">
            <summary>
            Gets or sets the status of the rate lock request.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.SellSideDeliveryDate">
            <summary>
            Gets or sets the sell-side delivery date on the request.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.SellSideExpirationDate">
            <summary>
            Gets or sets the sell-side expiration date on the request.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Confirmation">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockConfirmation"/> which has been provided for this lock request.
            </summary>
            <remarks>If the request is in the Active state, then there is no lock confirmatiom
            and this property will always return <c>null</c>. This property may also return <c>null</c>
            if this lock request has been superceded by a newer request.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Denial">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockDenial"/> which has been provided for this lock request.
            </summary>
            <remarks>If the request is in the Denied state, use this property to access
            the corresponding <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockDenial"/> object. Otherwise, this property will
            return <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest.Fields">
            <summary>
            Gets the snapshot fields for this lock request.
            </summary>
            <remarks>If changes are made to the values in the lock request snapshot, the
            <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestFields.CommitChanges"/> method must be called to save those changes
            into the loan file. Otherwise, those changes will not appear in the Encompass user interface
            or be saved as part of the loan.</remarks>
            <example>
      The following code retrieves the current lock request from a loan
      and then sets the sell-side lock information in the request.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the loan
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Retrieve the current lock request, if any, from the loan
      LockRequest req = loan.Log.LockRequests.GetCurrent();

      // Set the sell-side lock date and period
      req.Fields["2220"].Value = DateTime.Today.AddDays(2);
      req.Fields["2221"].Value = 60;

      // Set the sell-side base rate and adjustments
      req.Fields["2223"].Value = 6.35;
      req.Fields["2224"].Value = "45 Day Lock Period";
      req.Fields["2225"].Value = 0.05;

      // Set the sell-side base price and adjustments
      req.Fields["2232"].Value = 101.15;
      req.Fields["2233"].Value = "FICO >= 720";
      req.Fields["2234"].Value = 0.125;

      // Commit the changes the to the fields
      req.Fields.CommitChanges();

      // Save and close the loan file
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestField">
            <summary>
            Represents a field in a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest"/> snapshot.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILockRequestField">
            <summary>
            Interface for LoanField class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestField.setFieldValue(System.String)">
            <summary>
            Sets the value of the field in the snapshot.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestField.UnformattedValue">
            <summary>
            Override the Unformatted value to return the value of the lock request field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestField.EllieMae#Encompass#BusinessObjects#Loans#Logging#ILockRequestField#Value">
            <summary>
            Gets or sets the value of the field thru the ILockRequestField interface.
            </summary>
            <remarks>This method exists primarilly for COM-based clients which cannot marshal values
            properly to the object-valued Value property.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestFields">
            <summary>
            Represents the collection of fields that are stored for a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest"/>.
            </summary>
            <example>
      The following code creates a new Lock Request and populates the buy-side
      data from the request.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the loan
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Retrieve the current lock request, if any, from the loan
      LockRequest req = loan.Log.LockRequests.Add();

      // Set the Buy side lock date and period
      req.Fields["2149"].Value = DateTime.Today;
      req.Fields["2150"].Value = 45;

      // Set the buy-side base rate and adjustments
      req.Fields["2152"].Value = 6.75;
      req.Fields["2153"].Value = "45 Day Lock Period";
      req.Fields["2154"].Value = 0.125;

      // Set the buy-side base price and adjustments
      req.Fields["2161"].Value = 99.75;
      req.Fields["2162"].Value = "FICO >= 720";
      req.Fields["2163"].Value = 0.25;

      // Force a re-calculation of the lock fields. We must call this method before
      // retrieving the value of the Net Buy Price (2203) in order to ensure that field's
      // value is up-to-date.
      req.Fields.Recalculate();

      // Display the Net Buy Prices from the lock
      Console.WriteLine("Net Buy Price: " + req.Fields["2203"].FormattedValue);

      // Commit the field changes back into the lock request
      req.Fields.CommitChanges();

      // Save and close the loan file
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILockRequestFields">
            <summary>
            Interface for LoanFields class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestFields.Recalculate">
            <summary>
            Forces a recalculation of the calculated lock request fields.
            </summary>
            <remarks>The lock request fields do not automatically recalculate when a field's value is changed. 
            Typically, the calculated field values are updated when you call <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestFields.CommitChanges"/>,
            but there may be cases when you need to see the results of the calculations prior to 
            calling that method. You can use this method to force a recalculation of the fields within
            the lock request at any time.</remarks>
            <example>
      The following code creates a new Lock Request and populates the buy-side
      data from the request.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the loan
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Retrieve the current lock request, if any, from the loan
      LockRequest req = loan.Log.LockRequests.Add();

      // Set the Buy side lock date and period
      req.Fields["2149"].Value = DateTime.Today;
      req.Fields["2150"].Value = 45;

      // Set the buy-side base rate and adjustments
      req.Fields["2152"].Value = 6.75;
      req.Fields["2153"].Value = "45 Day Lock Period";
      req.Fields["2154"].Value = 0.125;

      // Set the buy-side base price and adjustments
      req.Fields["2161"].Value = 99.75;
      req.Fields["2162"].Value = "FICO >= 720";
      req.Fields["2163"].Value = 0.25;

      // Force a re-calculation of the lock fields. We must call this method before
      // retrieving the value of the Net Buy Price (2203) in order to ensure that field's
      // value is up-to-date.
      req.Fields.Recalculate();

      // Display the Net Buy Prices from the lock
      Console.WriteLine("Net Buy Price: " + req.Fields["2203"].FormattedValue);

      // Commit the field changes back into the lock request
      req.Fields.CommitChanges();

      // Save and close the loan file
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestFields.CommitChanges">
            <summary>
            Commits the changes made to the lock request snapshot field collection.
            </summary>
            <remarks>
            When this collection of fields is modified, the changes are not saved unless you call CommitChanges,
            which pushes the modifications into the loan file. This method should be invoked before
            calling the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Commit"/> method to save the loan to the server.
            </remarks>
            <example>
      The following code creates a new Lock Request and populates the buy-side
      data from the request.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the loan
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Retrieve the current lock request, if any, from the loan
      LockRequest req = loan.Log.LockRequests.Add();

      // Set the Buy side lock date and period
      req.Fields["2149"].Value = DateTime.Today;
      req.Fields["2150"].Value = 45;

      // Set the buy-side base rate and adjustments
      req.Fields["2152"].Value = 6.75;
      req.Fields["2153"].Value = "45 Day Lock Period";
      req.Fields["2154"].Value = 0.125;

      // Set the buy-side base price and adjustments
      req.Fields["2161"].Value = 99.75;
      req.Fields["2162"].Value = "FICO >= 720";
      req.Fields["2163"].Value = 0.25;

      // Force a re-calculation of the lock fields. We must call this method before
      // retrieving the value of the Net Buy Price (2203) in order to ensure that field's
      // value is up-to-date.
      req.Fields.Recalculate();

      // Display the Net Buy Prices from the lock
      Console.WriteLine("Net Buy Price: " + req.Fields["2203"].FormattedValue);

      // Commit the field changes back into the lock request
      req.Fields.CommitChanges();

      // Save and close the loan file
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestFields.Descriptors">
            <summary>
            Gets the set of field descriptors which are stored when a lock request snapshot is made.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestFields.Item(System.String)">
            <summary>
            Gets the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanField">LoanField</see> based on the
            field ID provided.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestFields.FieldTable">
            <summary>
            Retrieves the underlying field Hashtable
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.AlertState">
            <summary>
            Enumerates the possible states for a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogAlert"/>.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.AlertState.Pending">
            <summary>Indicates the alert's due date has not yet been reached</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.AlertState.Overdue">
            <summary>Indicates the alert's due date has passed</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.AlertState.Complete">
            <summary>Indicates the alert has been followed up on and is considered closed</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogAlert">
            <summary>
            Summary description for LogAlert.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogAlert">
            <summary>
            Interface for LogAlert class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogAlert.DueDate">
            <summary>
            Gets or sets the date at which this alert will be considered past due.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogAlert.FollowupDate">
            <summary>
            Gets or sets the date on which the alert was followed up.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogAlert.AlertRole">
            <summary>
            Gets or sets the Role of the user who should be alerted.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogAlert.AlertState">
            <summary>
            Gets the current state of the alert.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogAlerts">
            <summary>
            Summary description for LogAlerts.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogAlerts">
            <summary>
            Interface for LogAlerts class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogAlerts.Add(EllieMae.Encompass.BusinessObjects.Loans.Role,System.DateTime)">
            <summary>
            Creates a new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogAlert"/> and adds it to the collection.
            </summary>
            <param name="roleToAlert">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> to be alerted.</param>
            <param name="dueDate">The date on which the alert is due.</param>
            <returns>Returns a new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogAlert"/>.</returns>
            <remarks>A <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry"/> can have at most three alerts. Attempting to add more than
            three alerts will result in an exception.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogAlerts.Remove(EllieMae.Encompass.BusinessObjects.Loans.Logging.LogAlert)">
            <summary>
            Removes an alert from the collection.
            </summary>
            <param name="alertToRemove">The alert to be removed.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogAlerts.GetEnumerator">
            <summary>
            Provides a enumerator for the collection of alerts.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogAlerts.Count">
            <summary>
            Gets the number of alerts in the collection.
            </summary>
            <remarks>A <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry"/> can have at most three alerts.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogAlerts.Item(System.Int32)">
            <summary>
            Indexer to access alerts by index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Comment">
            <summary>
            Represents a single comment in a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Comments"/> collection.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IComment">
            <summary>
            Interface for Comment class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Comment.Text">
            <summary>
            Gets the text the comment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Comment.AddedBy">
            <summary>
            Gets the UserID of the user that added the comment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.Comment.DateAdded">
            <summary>
            Gets the date and time the comment was added.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogConversations">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation"/> entries held within 
            a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
            <example>
The following code creates a new Conversation in a loan and flags it for
followup by the Loan Officer.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
      loan.Lock();
   
      // Add a new conversation event to the log
      Conversation conv = loan.Log.Conversations.Add(DateTime.Now);
      conv.HeldWith = "Thomas Smith";
      conv.PhoneNumber = "555-555-5555";
      conv.ContactMethod = ConversationContactMethod.Phone;

      // Save the loan
      loan.Commit();
      loan.Unlock();
      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogConversations">
            <summary>
            Interface for Conversation class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogConversations.Add(System.DateTime)">
            <summary>
            Adds a Conversation to the loan's log.
            </summary>
            <param name="conversationDate">The date of the conversation.</param>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation">Conversation</see>
            object.</returns>
            <remarks>This method assumes that the user who held the conversation is the
            same as the currently logged in user. To create an entry for a different
            user, use the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogConversations.AddForUser(System.DateTime,EllieMae.Encompass.BusinessObjects.Users.User)"/> method.</remarks>
            <example>
The following code creates a new Conversation in a loan and flags it for
followup by the Loan Officer.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
      loan.Lock();
   
      // Add a new conversation event to the log
      Conversation conv = loan.Log.Conversations.Add(DateTime.Now);
      conv.HeldWith = "Thomas Smith";
      conv.PhoneNumber = "555-555-5555";
      conv.ContactMethod = ConversationContactMethod.Phone;

      // Save the loan
      loan.Commit();
      loan.Unlock();
      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogConversations.AddForUser(System.DateTime,EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Adds a Conversation to the loan's log.
            </summary>
            <param name="conversationDate">The date of the conversation.</param>
            <param name="heldBy">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/> who held this conversation. This
            value must match the currently logged in user unless the logged in user is
            an administrator.</param>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation">Conversation</see>
            object.</returns>
            <example>
The following code creates a new Conversation in a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server -- we must log in as an 
      // administrator in order to invoke AddForUser().
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
      loan.Lock();
   
      // Fetch the user we'll be adding the conversation for
      User mary = session.Users.GetUser("mary");

      // Add a new conversation event to the log
      Conversation conv = loan.Log.Conversations.AddForUser(DateTime.Now, mary);
      conv.HeldWith = "James Hartley";
      conv.Company = "Harley Appraisal Services";
      conv.EmailAddress = "jhartl@hartleyappraisals.com";
      conv.ContactMethod = ConversationContactMethod.Email;
      conv.Comments = "Mary contacted James and scheduled the appraisal for 6/16";
      conv.DisplayInLog = false;

      // Save the loan
      loan.Commit();
      loan.Unlock();
      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogConversations.Remove(EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation)">
            <summary>
            Removes a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation"/> from the log.
            </summary>
            <param name="conversation">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation"/> to be removed.
            The specified entry must be an instance that belongs to the
            current Loan object.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogConversations.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogConversations.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Conversation">Conversation</see>
            from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosureType">
            <summary>
            Provides a bitmask to indicate one or more standard disclosures.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosureType.None">
            <summary>No standard disclosure</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosureType.GFE">
            <summary>The Good Faith Estimate disclosure</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosureType.TIL">
            <summary>The Turth in Lending disclosure</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosureType.GFETIL">
            <summary>Both the GFE and the TIL disclosures</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosureType.SAFEHARBOR">
            <summary>The Safe Harbor disclosure</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosureType.SAFEHARBORGFE">
            <summary>The Safe Harbor AND GFE disclosures</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosureType.SAFEHARBORTIL">
            <summary>The Safe Harbor and TIL disclosures</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosureType.SAFEHARBORGFETIL">
            <summary>The Safe Harbor, GFE, and TIL disclosures</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDisclosures">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure"/> entries held within 
            a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogDisclosures">
            <summary>
            Interface for Disclosure class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDisclosures.Add(System.DateTime,EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosureType)">
            <summary>
            Adds a Disclosure to the loan's log.
            </summary>
            <param name="disclosureDate">The date of the disclosure.</param>
            <param name="disclosureType">The type(s) of standard disclosures included in this disclosure.</param>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure">Disclosure</see>
            object.</returns>
            <remarks>This method assumes that the user who made the disclosure is the
            same as the currently logged in user. To create an entry for a different
            user, use the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDisclosures.AddForUser(System.DateTime,EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosureType,EllieMae.Encompass.BusinessObjects.Users.User)"/> method.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDisclosures.AddForUser(System.DateTime,EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosureType,EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Adds a Disclosure to the loan's log.
            </summary>
            <param name="disclosureDate">The date of the conversation.</param>
            <param name="disclosureType">The type(s) of standard disclosures included in this disclosure.</param>
            <param name="disclosedBy">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/> who generated the disclosure. This
            value must match the currently logged in user unless the logged in user is
            an administrator.</param>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure">Disclosure</see>
            object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDisclosures.GetMostRecentDisclosure">
            <summary>
            Gets the most recent disclosure record from the collection
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDisclosures.GetMostRecentStandardDisclosure(EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosureType)">
            <summary>
            Gets the most recent disclosure record from the collection for a standard disclosure type.
            </summary>
            <remarks>
            If an enumeration value is passed in which represents multiple standard disclosure types
            (e.g. <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.StandardDisclosureType.GFETIL"/>), a disclosure must include all of the
            specified disclosures in order to be considered a match.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDisclosures.RefreshEDisclosurePackageStatuses">
            <summary>
            Refreshes the status of all eDisclosure Packages that have been requested
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDisclosures.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogDisclosures.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.Disclosure">Disclosure</see>
            from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEDMTransactions">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMTransaction"/> objects held within
            a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
            <example>
The following code displays all of the documents that have been requested
from the borrower to be signed and returned, along with the name of the
individual who made the request and the date the request was made.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the "My Pipeline" folder
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
   
      // Iterate over all of the EDM transactions associated with the loan
      foreach (EDMTransaction txn in loan.Log.EDMTransactions)
      {
         // Iterate over the list of documents.
         foreach (EDMDocument doc in txn.Documents)
            Console.WriteLine(doc.Title + " requested on " + txn.Date + " by " + txn.Creator);
      }

      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogEDMTransactions">
            <summary>
            Interface for EDMTransaction class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEDMTransactions.Remove(EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMTransaction)">
            <summary>
            Removes an <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMTransaction"/> from the log.
            </summary>
            <param name="txn">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMTransaction"/> to be removed.
            The specified entry must be an instance that belongs to the
            current Loan object.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEDMTransactions.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEDMTransactions.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.EDMTransaction"/> from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType">
            <summary>
            An enumeration of the possible types of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry"/> objects.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.MilestoneTask">
            <summary>A Milestone-related task, which generally must be completed prior to completing a milestone.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.MilestoneEvent">
            <summary>A Milestone-related event, such as the start or processing or the funding of the loan.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.TrackedDocument">
            <summary>Tracking information for a single document of the loan package.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.Conversation">
            <summary>An entry representing a conversation related to a loan, whether it be with
            the customer or with a partner/vendor.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.ReceivedDownload">
            <summary>An entry representing a received Download.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.EDMTransaction">
            <summary>An entry representing an Electronic Document Management-related transaction.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.StatusOnlineUpdate">
            <summary>An entry representing an update to the Status Online information for the loan.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.UnderwritingCondition">
            <summary>Tracking information for an undewriting condition.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.PostClosingCondition">
            <summary>Tracking information for a post-closing or shipping condition.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.LockRequest">
            <summary>Represents a lock request on a loan.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.LockConfirmation">
            <summary>An entry representing a lock request confirmation on a loan.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.LockDenial">
            <summary>An entry representing a lock request denial on a loan.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.PrintEvent">
            <summary>An entry representing a print event on a loan.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.PreliminaryCondition">
            <summary>Tracking information for a preliminary condition.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.InvestorRegistration">
            <summary>An entry representing the registration of the loan with an investor.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.Disclosure">
            <summary>Tracking information for a disclosure made to the borrower.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.HtmlEmailMessage">
            <summary>An entry representing an html email message.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.DocumentOrder">
            <summary>A record of a document order placed with the Encompass360 Doc Services.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.LockCancellationRequest">
            <summary>An entry representing a request to cancel a rate lock.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.LockCancellation">
            <summary>An entry representing a rate lock cancellation.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.Disclosure2015">
            <summary>An entry representing a 2015 disclosure made to a borrower.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.All">
            <summary>A user-defined, custom event. Use this event type for reminders, alerts, etc.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryDateSort">
            <summary>
            Provides a sorting comparison for LogEntry items based on date.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogInvestorRegistrations">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.InvestorRegistration"/> entries held within 
            a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
            <example>
The following code creates a new Conversation in a loan and flags it for
followup by the Loan Officer.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
      loan.Lock();
   
      // Add a new conversation event to the log
      Conversation conv = loan.Log.Conversations.Add(DateTime.Now);
      conv.HeldWith = "Thomas Smith";
      conv.PhoneNumber = "555-555-5555";
      conv.ContactMethod = ConversationContactMethod.Phone;

      // Save the loan
      loan.Commit();
      loan.Unlock();
      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogInvestorRegistrations">
            <summary>
            Interface for InvestorRegistration class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogInvestorRegistrations.Add(System.DateTime)">
            <summary>
            Adds a InvestorRegistration to the loan's log.
            </summary>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.InvestorRegistration"/>
            object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogInvestorRegistrations.GetCurrent">
            <summary>
            Gets the current investor registration from the collection.
            </summary>
            <returns>Returns the current <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.InvestorRegistration"/>. If no current registration
            exists, a <c>null</c> is returned.</returns>
            <remarks>The current registration is defined to be the registration added most recently to
            the loan. The registration may be expired, but is still considered current.</remarks>
            <!-- No matching elements were found for the following include tag --><include file="LogConversations.xml" path="Examples/Example[@name=&quot;LogConversations.GetCurrent&quot;]/*"/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogInvestorRegistrations.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogInvestorRegistrations.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.InvestorRegistration">InvestorRegistration</see>
            from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockConfirmations">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockConfirmation">LockConfirmations</see> 
            held within a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogLockConfirmations">
            <summary>
            Interface for LockConfirmation class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockConfirmations.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockConfirmations.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockConfirmation">LockConfirmation</see>
            from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockDenials">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockDenial">LockDenials</see> 
            held within a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogLockDenials">
            <summary>
            Interface for LockDenial class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockDenials.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockDenials.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockDenial">LockDenial</see>
            from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockRequests">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest">LockRequests</see> 
            held within a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
            <example>
      The following code creates a new Lock Request on an existing loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the loan
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Populate the lock request data in the loan. For many of these fields, we can simply
      // copy the data from the basic loan information since we want to use that same information
      // for the lock request. However, it's possible to pass information to the lock request
      // which differs from the actual values in the loan.
      loan.Fields["2951"].Value = loan.Fields["19"].Value;
      loan.Fields["2952"].Value = loan.Fields["1172"].Value;
      loan.Fields["2953"].Value = loan.Fields["608"].Value;
      loan.Fields["2958"].Value = loan.Fields["420"].Value;

      // Populate the requested lock date and lock period
      loan.Fields["2089"].Value = DateTime.Today;
      loan.Fields["2090"].Value = 30;

      // Now create the new LockRequest. This is equivalent to pressing the Request Lock button
      // on the Lock Request Form.
      LockRequest request = loan.Log.LockRequests.Add();

      // Save and close the loan file
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogLockRequests">
            <summary>
            Interface for LogLockRequests class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockRequests.Add">
            <summary>
            Creates a new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest"/> and adds it to the log.
            </summary>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest">LockRequest</see>
            object.</returns>
            <remarks>When you create a new LockRequest, any existing, current lock request will have
            its status automatically changed to <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestStatus.Inactive"/></remarks>
            <example>
      The following code creates a new Lock Request on an existing loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the loan
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Populate the lock request data in the loan. For many of these fields, we can simply
      // copy the data from the basic loan information since we want to use that same information
      // for the lock request. However, it's possible to pass information to the lock request
      // which differs from the actual values in the loan.
      loan.Fields["2951"].Value = loan.Fields["19"].Value;
      loan.Fields["2952"].Value = loan.Fields["1172"].Value;
      loan.Fields["2953"].Value = loan.Fields["608"].Value;
      loan.Fields["2958"].Value = loan.Fields["420"].Value;

      // Populate the requested lock date and lock period
      loan.Fields["2089"].Value = DateTime.Today;
      loan.Fields["2090"].Value = 30;

      // Now create the new LockRequest. This is equivalent to pressing the Request Lock button
      // on the Lock Request Form.
      LockRequest request = loan.Log.LockRequests.Add();

      // Save and close the loan file
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockRequests.Add(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Creates a new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest"/> and add it to the log.
            </summary>
            <param name="requestingUser">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/> who is issuing the request for the
            lock. If this value is <c>null</c>, the currently logged in user is assumed.</param>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest">LockRequest</see>
            object.</returns>
            <remarks><p>When you create a new LockRequest, any existing, current lock request will have
            its status automatically changed to <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequestStatus.Inactive"/>.</p>
            <p>This method is supported in Banker Edition only.</p>
            </remarks>
            <example>
      The following code creates a new Lock Request on an existing loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the loan
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Populate the lock request data in the loan. For many of these fields, we can simply
      // copy the data from the basic loan information since we want to use that same information
      // for the lock request. However, it's possible to pass information to the lock request
      // which differs from the actual values in the loan.
      loan.Fields["2951"].Value = loan.Fields["19"].Value;
      loan.Fields["2952"].Value = loan.Fields["1172"].Value;
      loan.Fields["2953"].Value = loan.Fields["608"].Value;
      loan.Fields["2958"].Value = loan.Fields["420"].Value;

      // Populate the requested lock date and lock period
      loan.Fields["2089"].Value = DateTime.Today;
      loan.Fields["2090"].Value = 30;

      // Now create the new LockRequest. This is equivalent to pressing the Request Lock button
      // on the Lock Request Form.
      LockRequest request = loan.Log.LockRequests.Add();

      // Save and close the loan file
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockRequests.GetCurrent">
            <summary>
            Returns the currently active or confirmed lock request.
            </summary>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest"/> which is pending or locked.</returns>
            <example>
      The following code determines if the loan has a pending lock request and,
      if so, populates the buy-side and side-data for the request. It the locks
      and confirms the request.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the loan
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Retrieve the current lock request, if any, from the loan
      LockRequest req = loan.Log.LockRequests.GetCurrent();

      // If there's a pending lock request, lock and confirm the request
      if (req != null && req.Status == LockRequestStatus.Pending)
      {
        // Set the Buy side lock date and period
        req.Fields["2149"].Value = DateTime.Today;
        req.Fields["2150"].Value = 45;

        // Set the buy-side base rate and adjustments
        req.Fields["2152"].Value = 6.75;
        req.Fields["2153"].Value = "45 Day Lock Period";
        req.Fields["2154"].Value = 0.125;

        // Set the buy-side base price and adjustments
        req.Fields["2161"].Value = 99.75;
        req.Fields["2162"].Value = "FICO >= 720";
        req.Fields["2163"].Value = 0.25;

        // Set the sell-side lock date and period
        req.Fields["2220"].Value = DateTime.Today.AddDays(2);
        req.Fields["2221"].Value = 60;

        // Set the sell-side base rate and adjustments
        req.Fields["2223"].Value = 6.35;
        req.Fields["2224"].Value = "45 Day Lock Period";
        req.Fields["2225"].Value = 0.05;

        // Set the sell-side base price and adjustments
        req.Fields["2232"].Value = 101.15;
        req.Fields["2233"].Value = "FICO >= 720";
        req.Fields["2234"].Value = 0.125;

        // Commit the changes the to the fields
        req.Fields.CommitChanges();

        // Lock and confirm the rate
        req.Confirm();
      }

      // Save and close the loan file
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockRequests.GetLastConfirmedLockRequest">
            <summary>
            Returns the most recently confirmed <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest"/> object.
            </summary>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest"/> object if one if found, <c>null</c> otherwise.</returns>
            <remarks>
            This method will always return the LockRequest object which was confirmed most recently,
            even if that request is no longer active. A <c>null</c> return value indicates that there
            are no confirmed lock requests in the loan.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockRequests.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogLockRequests.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LockRequest">LockRequest</see>
            from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneEvents">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent"/> objects stored 
            within a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
            <example>
The following code writes the actual or expected
closing date for every loan in the "My Pipeline" folder that has been
sent for processing.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the "My Pipeline" folder
      LoanFolder fol = session.Loans.Folders["My Pipeline"];

      // Retrieve the folder's contents
      LoanIdentityList ids = fol.GetContents();

      // Open each loan in the folder and check the expected closing date
      for (int i = 0; i < ids.Count; i++)
      {
         // Open the next loan in the loop
         Loan loan = fol.OpenLoan(ids[i].LoanName);

         // Get the "Completion" event from the loan
         MilestoneEvent msEvent = 
            loan.Log.MilestoneEvents.GetEventForMilestone(session.Loans.Milestones.Completion.Name);

         if ((msEvent != null) && (msEvent.Date != null))
         {
            if (msEvent.Completed)
               Console.WriteLine("The loan \"" + loan.LoanName + "\" was completed on " + msEvent.Date);
            else
               Console.WriteLine("The loan \"" + loan.LoanName + "\" has an expected completion date of " + msEvent.Date);
         }

         // Close the loan
         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogMilestoneEvents">
            <summary>
            Interface for MilestoneEvent class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneEvents.GetEventForMilestone(System.String)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent">MilestoneEvent</see>
            from the collection based on the name of the corresponding 
            <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone">Milestone</see> object.
            </summary>
            <param name="milestoneName">The name of the milestone. This value is case
            insenstitive but must not be null or the empty string.</param>
            <returns>Returns the event for the specified milestone, if defined; <c>null</c>
            otherwise.
            </returns>
            <remarks>This method should always return a non-null value when the
            <c>milestoneName</c> is that of a "core" milestone, such as Started or Completion.
            However, for custom milestones, this method will return null if the current
            loan does not have an event defined for the specified milestone.
            <p>For a list of the names of the pre-defined Milestones which are part of every loan's
            lifetime sequence, see the Remarks section for the <see cref="T:EllieMae.Encompass.BusinessEnums.Milestones"/>
            object.</p>
            </remarks>
            <example>
The following code writes the actual or expected
closing date for every loan in the "My Pipeline" folder that has been
sent for processing.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the "My Pipeline" folder
      LoanFolder fol = session.Loans.Folders["My Pipeline"];

      // Retrieve the folder's contents
      LoanIdentityList ids = fol.GetContents();

      // Open each loan in the folder and check the expected closing date
      for (int i = 0; i < ids.Count; i++)
      {
         // Open the next loan in the loop
         Loan loan = fol.OpenLoan(ids[i].LoanName);

         // Get the "Completion" event from the loan
         MilestoneEvent msEvent = 
            loan.Log.MilestoneEvents.GetEventForMilestone(session.Loans.Milestones.Completion.Name);

         if ((msEvent != null) && (msEvent.Date != null))
         {
            if (msEvent.Completed)
               Console.WriteLine("The loan \"" + loan.LoanName + "\" was completed on " + msEvent.Date);
            else
               Console.WriteLine("The loan \"" + loan.LoanName + "\" has an expected completion date of " + msEvent.Date);
         }

         // Close the loan
         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneEvents.GetEventByMilestoneID(System.String)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent">MilestoneEvent</see>
            from the collection based on the ID of the corresponding 
            <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone">Milestone</see> object.
            </summary>
            <param name="milestoneID">The MilestoneID of the Milestone.
            This can be a number value or a GUID value.</param>
            <returns>Returns the MilestoneEvent for the specified milestone, if defined; <c>null</c>
            otherwise.
            </returns>
            <remarks>This method should always return a non-null value when the
            <c>milestoneID</c> is that of a "core" milestone, such as Started or Completion.
            However, for custom milestones, this method will return null if the current
            loan does not have an event defined for the specified milestone.
            <p>For a list of the names of the pre-defined Milestones which are part of every loan's
            lifetime sequence, see the Remarks section for the <see cref="T:EllieMae.Encompass.BusinessEnums.Milestones"/>
            object.</p>
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneEvents.GetEventByInternalName(System.String)">
            <summary>
            Returns the specified MilestoneEvent using the internal stage name of the milestone.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneEvents.GetLogEntriesFromLoan(EllieMae.EMLite.DataEngine.Log.LogList)">
            <summary>
            Loads the list of milestones from the underlying loan file.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneEvents.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a MilestoneLog object in a MilestoneEvent
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneEvents.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent"/> by index.
            </summary>
            <remarks>The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent"/> instances held in this collection
            are ordered according to the order defined by the <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone">Milestone</see>
            class.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneEvents.LastCompletedEvent">
            <summary>
            Gets the last <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent"/> in the loan's lifetime sequence 
            which has been completed.
            </summary>
            <remarks> This property is always guaranteed to return a non-null 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent"/>. Use the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneEvents.NextEvent">NextEvent</see> 
            property to retrieve the next event in the loan's lifetime, if any.
            </remarks>
            <example>
The following code produces a report of all the loans in the My Pipeline folder
which have been closed.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the "My Pipeline" folder
      LoanFolder fol = session.Loans.Folders["My Pipeline"];

      // Retrieve the folder's contents
      LoanIdentityList ids = fol.GetContents();

      // Get the Completion Milestone
      Milestone completion = session.Loans.Milestones.Completion;

      // Open each loan in the folder and check the expected closing date
      for (int i = 0; i < ids.Count; i++)
      {
         // Open the next loan in the loop
         Loan loan = fol.OpenLoan(ids[i].LoanName);

         // Check if this loan finished the Completion stage
         if (loan.Log.MilestoneEvents.LastCompletedEvent.MilestoneName == completion.Name)
            Console.WriteLine("The loan \"" + loan.LoanName + "\" has been completed.");

         // Close the loan
         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneEvents.NextEvent">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent"/> for the first 
            <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone">Milestone</see> in the 
            loan's lifetime sequence which has not yet been completed.
            </summary>
            <remarks>
            If the loan has been closed and all Milestones completed, 
            this property will return <c>null</c> (<c>Nothing</c> in Visual Basic).
            </remarks>
            <example>
The following code produces a report of all the loans in the My Pipeline folder
which are currently waiting to be sent to processing.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the "My Pipeline" folder
      LoanFolder fol = session.Loans.Folders["My Pipeline"];

      // Retrieve the folder's contents
      LoanIdentityList ids = fol.GetContents();

      // Get the Processing Milestone
      Milestone processing = session.Loans.Milestones.Processing;

      // Open each loan in the folder and check the expected closing date
      for (int i = 0; i < ids.Count; i++)
      {
         // Open the next loan in the loop
         Loan loan = fol.OpenLoan(ids[i].LoanName);

         // Check if this is in the Processing stage
         if ((loan.Log.MilestoneEvents.NextEvent != null) &&
            (loan.Log.MilestoneEvents.NextEvent.MilestoneName == processing.Name))
            Console.WriteLine("The loan \"" + loan.LoanName + "\" is waiting to be sent for processing.");

         // Close the loan
         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneTasks">
            <summary>
            Summary description for ReceivedFaxes.
            </summary>
            <example>
      The following code demonstrates how to add a new MilestoneTask to a loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      Loan loan = session.Loans.Open("{4c1cd774-96dd-4a92-b703-df8a07b8fc98}");
      loan.Lock();

      // Retrieve the "Processing" milestone
      Milestone ms = session.Loans.Milestones.Processing;

      // Fetch the MilestoneEvent from the loan corresponding to the selected Milestone
      MilestoneEvent msEvent = loan.Log.MilestoneEvents.GetEventForMilestone(ms.Name);

      // Create the new task on this milestone
      MilestoneTask task = loan.Log.MilestoneTasks.Add("Discuss Life Insurance with Borrower", msEvent);
      
      // Set some basic properties on the task
      task.Priority = TaskPriority.High;
      task.DaysToComplete = 10;
      
      // Look up the life insurer contact
      StringFieldCriterion cri = new StringFieldCriterion();
      cri.FieldName = "Contact.CompanyName";
      cri.Value = "Met Life Insurance";

      ContactList insurers = session.Contacts.Query(cri, ContactLoanMatchType.None, ContactType.Biz);

      // Add a contact to the task
      if (insurers.Count > 0)
        task.Contacts.Add((BizContact) insurers[0]);

      // Save and close the loan
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogMilestoneTasks">
            <summary>
            Interface for LogReceivedFaxes class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneTasks.Add(System.String,EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent)">
            <summary>
            Adds a new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask"/> to the log.
            </summary>
            <returns>Returns the new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask"/> object.</returns>
            <example>
      The following code demonstrates how to add a new MilestoneTask to a loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      Loan loan = session.Loans.Open("{4c1cd774-96dd-4a92-b703-df8a07b8fc98}");
      loan.Lock();

      // Retrieve the "Processing" milestone
      Milestone ms = session.Loans.Milestones.Processing;

      // Fetch the MilestoneEvent from the loan corresponding to the selected Milestone
      MilestoneEvent msEvent = loan.Log.MilestoneEvents.GetEventForMilestone(ms.Name);

      // Create the new task on this milestone
      MilestoneTask task = loan.Log.MilestoneTasks.Add("Discuss Life Insurance with Borrower", msEvent);
      
      // Set some basic properties on the task
      task.Priority = TaskPriority.High;
      task.DaysToComplete = 10;
      
      // Look up the life insurer contact
      StringFieldCriterion cri = new StringFieldCriterion();
      cri.FieldName = "Contact.CompanyName";
      cri.Value = "Met Life Insurance";

      ContactList insurers = session.Contacts.Query(cri, ContactLoanMatchType.None, ContactType.Biz);

      // Add a contact to the task
      if (insurers.Count > 0)
        task.Contacts.Add((BizContact) insurers[0]);

      // Save and close the loan
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneTasks.Remove(EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask)">
            <summary>
            Removes a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask"/> from the loan.
            </summary>
            <param name="taskToRemove">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask"/> to be removed.
            The specified entry must be an instance that belongs to the
            current Loan object.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneTasks.GetTasksForMilestone(EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent)">
            <summary>
            Returns the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask"/> objects associated with the specified
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent"/>.
            </summary>
            <param name="msEvent">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent"/> for which the tasks will be retrieved.</param>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.LogEntryList"/> containing the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask"/> objects
            for the specified milestone.</returns>
            <example>
      The following locates all outstanding Milestone Tasks for the next expected
      milestone. If no task are outstanding, it marks the milestone as completed.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      Loan loan = session.Loans.Open("{4c1cd774-96dd-4a92-b703-df8a07b8fc98}");
      loan.Lock();

      // Get the next expected milestone event and retrieve all tasks for that event
      MilestoneEvent nextMs = loan.Log.MilestoneEvents.NextEvent;
      LogEntryList tasks = loan.Log.MilestoneTasks.GetTasksForMilestone(nextMs);

      foreach (MilestoneTask task in tasks)
        if (!task.Completed)
        {
          Console.WriteLine("The task '" + task.Name + "' has not been completed");
          return;
        }

      // If there are no outstanding milestone tasks, mark the milestone as completed
      nextMs.Completed = true;

      // Save and close the loan
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneTasks.GetTasksByName(System.String)">
            <summary>
            Returns a collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask"/> objects with the specified name.
            </summary>
            <param name="taskName">The name of the tasks to be retrieved.</param>
            <returns>Returns a collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask"/> objects whose name matches
            the specified value.</returns>
            <example>
      The following locates all outstanding Milestone Tasks for the next expected
      milestone. If no task are outstanding, it marks the milestone as completed.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      Loan loan = session.Loans.Open("{4c1cd774-96dd-4a92-b703-df8a07b8fc98}");
      loan.Lock();

      // Get all tasks of the specified type from the loan
      foreach (MilestoneTask task in loan.Log.MilestoneTasks.GetTasksByName("Discuss Life Insurance with Borrower"))
      {
        // If the task isn't complete and it's for the next milestone, set the priority to high
        if (!task.Completed && task.MilestoneEvent == loan.Log.MilestoneEvents.NextEvent)
          task.Priority = TaskPriority.High;
      }

      // Save and close the loan
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneTasks.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogMilestoneTasks.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask"/> from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogPostClosingConditions">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition"/> entries held within
            a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogPostClosingConditions">
            <summary>
            Interface for PostClosingCondition class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogPostClosingConditions.Add(System.String)">
            <summary>
            Adds a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition"/> to the loan for the current borrower pair.
            </summary>
            <param name="title">The title of the new document. This value cannot
            be blank or null.</param>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition"/>
            object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogPostClosingConditions.AddFromTemplate(EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplate)">
            <summary>
            Creates a new PostClosingCondition based on the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplate"/>.
            </summary>
            <param name="template">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.PostClosingConditionTemplate"/> from which the condition will
            be created.</param>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition"/>
            object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogPostClosingConditions.Remove(EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition)">
            <summary>
            Removes a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition"/> from the log.
            </summary>
            <param name="cond">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition"/> instance to be removed.
            The specified instance must belong to the current Loan object.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogPostClosingConditions.GetConditionsByTitle(System.String)">
            <summary>
            Gets the set of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition"/> instances that have the specified title.
            </summary>
            <param name="title">The title of the documents to be retrieved. The comparison to the
            document titles will be done in a case insensitive manner.</param>
            <returns>Returns the list of the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition"/> objects with the
            specified title.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogPostClosingConditions.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogPostClosingConditions.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition"/> from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogPreliminaryConditions">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition"/> entries held within
            a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogPreliminaryConditions">
            <summary>
            Interface for PreliminaryCondition class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogPreliminaryConditions.Add(System.String)">
            <summary>
            Adds a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition"/> to the loan for the current borrower pair.
            </summary>
            <param name="title">The title of the new document. This value cannot
            be blank or null.</param>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition"/>
            object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogPreliminaryConditions.Remove(EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition)">
            <summary>
            Removes a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition"/> from the log.
            </summary>
            <param name="cond">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition"/> instance to be removed.
            The specified instance must belong to the current Loan object.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogPreliminaryConditions.GetConditionsByTitle(System.String)">
            <summary>
            Gets the set of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition"/> instances that have the specified title.
            </summary>
            <param name="title">The title of the conditions to be retrieved. The comparison to the
            document titles will be done in a case insensitive manner.</param>
            <returns>Returns the list of the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition"/> objects with the
            specified title.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogPreliminaryConditions.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogPreliminaryConditions.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition"/> from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogPrintEvents">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PrintEvent">PrintEvents</see> 
            held within a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogPrintEvents">
            <summary>
            Interface for LogPrintEvents class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogPrintEvents.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogPrintEvents.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PrintEvent">PrintEvent</see>
            from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogReceivedDownloads">
            <summary>
            Summary description for ReceivedFaxes.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogReceivedDownloads">
            <summary>
            Interface for LogReceivedFaxes class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogReceivedDownloads.Remove(EllieMae.Encompass.BusinessObjects.Loans.Logging.ReceivedDownload)">
            <summary>
            Removes a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ReceivedDownload"/> from the loan.
            </summary>
            <param name="download">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ReceivedDownload"/> to be removed.
            The specified entry must be an instance that belongs to the
            current Loan object.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogReceivedDownloads.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogReceivedDownloads.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ReceivedDownload">ReceivedDownload</see>
            from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogStatusOnlineUpdates">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineUpdate"/> objects held within
            a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
            <example>
The following code displays all of events that have been published to the
Status Online web site for a particular loan, along with the date on
which is was published and the user who published it.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
   
      // Iterate over all of the Status Online updates associated with the loan
      foreach (StatusOnlineUpdate update in loan.Log.StatusOnlineUpdates)
      {
         // Each Status Online update can contains multiple published events,
         // e.g. the achievement of a milestone and the receipt of a document
         foreach (StatusOnlineEvent e in update.PublishedEvents)
            Console.WriteLine(e.Description + " published on " + update.Date 
               + " by " + update.Creator);
      }

      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogStatusOnlineUpdates">
            <summary>
            Interface for StatusOnlineUpdate class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogStatusOnlineUpdates.Remove(EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineUpdate)">
            <summary>
            Removes an <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineUpdate"/> from the log.
            </summary>
            <param name="txn">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineUpdate"/> to be removed.
            The specified entry must be an instance that belongs to the
            current Loan object.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogStatusOnlineUpdates.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogStatusOnlineUpdates.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineUpdate"/> from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogTrackedDocuments">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/> entries held within
            a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
            <example>
The following code adds a new TrackedDocument to every loan in the 
My Pipeline folder, sets the document's ordered day to today and allows
10 days for it to be received.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the "My Pipeline" folder
      LoanFolder fol = session.Loans.Folders["My Pipeline"];

      // Retrieve the folder's contents
      LoanIdentityList ids = fol.GetContents();

      // Open each loan in the folder and check the expected closing date
      for (int i = 0; i < ids.Count; i++)
      {
         // Open and lock the next loan in the loop
         Loan loan = fol.OpenLoan(ids[i].LoanName);
         loan.Lock();

         // Add a new supporting document to the loan
         TrackedDocument doc = loan.Log.TrackedDocuments.Add("My Custom Document", 
            session.Loans.Milestones.Submittal.Name);

         doc.OrderDate = DateTime.Now;
         doc.DueDays = 10;

         // Close the loan
         loan.Commit();
         loan.Unlock();
         loan.Close();
      }
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogTrackedDocuments">
            <summary>
            Interface for TrackedDocument class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogTrackedDocuments.Add(System.String,System.String)">
            <summary>
            Adds a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/> to the loan for the current borrower pair.
            </summary>
            <param name="title">The title of the new document. This value cannot
            be blank or null.</param>
            <param name="milestoneName">The name of the <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone"/>
            with which the document is associated. This value cannot be blank or null.</param>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/>
            object.</returns>
            <example>
The following code adds a new TrackedDocument to every loan in the 
My Pipeline folder, sets the document's ordered day to today and allows
10 days for it to be received.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the "My Pipeline" folder
      LoanFolder fol = session.Loans.Folders["My Pipeline"];

      // Retrieve the folder's contents
      LoanIdentityList ids = fol.GetContents();

      // Open each loan in the folder and check the expected closing date
      for (int i = 0; i < ids.Count; i++)
      {
         // Open and lock the next loan in the loop
         Loan loan = fol.OpenLoan(ids[i].LoanName);
         loan.Lock();

         // Add a new supporting document to the loan
         TrackedDocument doc = loan.Log.TrackedDocuments.Add("My Custom Document", 
            session.Loans.Milestones.Submittal.Name);

         doc.OrderDate = DateTime.Now;
         doc.DueDays = 10;

         // Close the loan
         loan.Commit();
         loan.Unlock();
         loan.Close();
      }
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogTrackedDocuments.AddFromTemplate(EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate,System.String)">
            <summary>
            Adds a new document based on an existing <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/>.
            </summary>
            <param name="template">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> on which the tracked document is based.</param>
            <param name="milestoneName">The name of the <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone"/>
            with which the document is associated. This value cannot be blank or null.</param>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/>
            object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogTrackedDocuments.Remove(EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument)">
            <summary>
            Removes a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/> from the log.
            </summary>
            <param name="docEntry">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/> instance to be removed.
            The specified instance must belong to the current Loan object.</param>
            <example>
The following code opens a loan and removes all supporting documents which
have not been ordered.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the next loan in the loop
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
      loan.Lock();

      // Cache the supporting documents into an array
      TrackedDocument[] docs = new TrackedDocument[loan.Log.TrackedDocuments.Count];

      for (int i = 0; i < loan.Log.TrackedDocuments.Count; i++)
         docs[i] = loan.Log.TrackedDocuments[i];

      // Remove every supporting document from the loan
      foreach (TrackedDocument doc in docs)
         if (doc.OrderDate == null)
            loan.Log.TrackedDocuments.Remove(doc);

      // Close the loan
      loan.Commit();
      loan.Unlock();
      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogTrackedDocuments.GetDocumentsForMilestone(System.String)">
            <summary>
            Gets the set of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/> instances associated with a given 
            <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone"/>.
            </summary>
            <param name="milestoneName">The name of the milestone for which the documents 
            are to be retrieved. This value is case insenstitive.</param>
            <returns>Returns the list of the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/> objects for the 
            given <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone"/>.</returns>
            <remarks>
            For a list of the names of the pre-defined Milestones which are part of every loan's
            lifetime sequence, see the Remarks section for the <see cref="T:EllieMae.Encompass.BusinessEnums.Milestones"/>
            object.
            </remarks>
            <example>
The following code opens a loan and displays all of the supporting documents
associated with the loan's next milestone which have not yet been received.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open the desired loan
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");

      // Retrieve all of the supporting documents associated with the loan's
      // next milestone.
      LogEntryList docList = 
         loan.Log.TrackedDocuments.GetDocumentsForMilestone(loan.Log.MilestoneEvents.NextEvent.MilestoneName);

      // Loop over the list's contents and display any that have not been received
      foreach (TrackedDocument doc in docList)
         if (doc.ReceivedDate == null)
            Console.WriteLine("The document \"" + doc.Title + "\" has not been received.");

      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogTrackedDocuments.GetDocumentsByTitle(System.String)">
            <summary>
            Gets the set of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/> instances that have the specified title.
            </summary>
            <param name="title">The title of the documents to be retrieved. The comparison to the
            document titles will be done in a case insensitive manner.</param>
            <returns>Returns the list of the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/> objects with the
            specified title.</returns>
            <example>
The following code opens a loan and displays all of the credit report information
associated with the loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open the desired loan
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");

      // Retrieve all of the supporting documents with the title "Credit Report"
      LogEntryList docList = 
         loan.Log.TrackedDocuments.GetDocumentsByTitle("Credit Report");

      // Loop over the list's contents and display any that have not been received
      foreach (TrackedDocument doc in docList)
         if (doc.ReceivedDate == null)
            Console.WriteLine("The document \"" + doc.Title + "\" has not been received.");

      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogTrackedDocuments.IsRecordOfType(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Determines if the record is a Document Log
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogTrackedDocuments.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogTrackedDocuments.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument"/> from the collection based on its index.
            </summary>
            <example>
The following code opens a loan and removes all supporting documents which
have not been ordered.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the next loan in the loop
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
      loan.Lock();

      // Cache the supporting documents into an array
      TrackedDocument[] docs = new TrackedDocument[loan.Log.TrackedDocuments.Count];

      for (int i = 0; i < loan.Log.TrackedDocuments.Count; i++)
         docs[i] = loan.Log.TrackedDocuments[i];

      // Remove every supporting document from the loan
      foreach (TrackedDocument doc in docs)
         if (doc.OrderDate == null)
            loan.Log.TrackedDocuments.Remove(doc);

      // Close the loan
      loan.Commit();
      loan.Unlock();
      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogUnderwritingConditions">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition"/> entries held within
            a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LoanLog"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ILogUnderwritingConditions">
            <summary>
            Interface for UnderwritingCondition class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogUnderwritingConditions.Add(System.String)">
            <summary>
            Adds a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition"/> to the loan for the current borrower pair.
            </summary>
            <param name="title">The title of the new document. This value cannot
            be blank or null.</param>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition"/>
            object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogUnderwritingConditions.AddFromTemplate(EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplate)">
            <summary>
            Creates a new UnderwritingCondition based on the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplate"/>.
            </summary>
            <param name="template">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplate"/> from which the condition will
            be created.</param>
            <returns>Returns the newly added <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition"/>
            object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogUnderwritingConditions.Remove(EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition)">
            <summary>
            Removes a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition"/> from the log.
            </summary>
            <param name="cond">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition"/> instance to be removed.
            The specified instance must belong to the current Loan object.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogUnderwritingConditions.GetConditionsByTitle(System.String)">
            <summary>
            Gets the set of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition"/> instances that have the specified title.
            </summary>
            <param name="title">The title of the documents to be retrieved. The comparison to the
            document titles will be done in a case insensitive manner.</param>
            <returns>Returns the list of the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition"/> objects with the
            specified title.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogUnderwritingConditions.Wrap(EllieMae.EMLite.DataEngine.Log.LogRecordBase)">
            <summary>
            Wraps a LogRecord in a LogEntry object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogUnderwritingConditions.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition"/> from the collection based on its index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent">
            <summary>
            Represents a single milestone-related event in the lifetime of a Loan.
            </summary>
            <remarks>
            Inspecting a loan's MilestoneEvents is useful for determining which stages of
            the loan lifetime sequence have already been completed and which remain to be
            done. The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry.Date">Date</see> of a MilestoneEvent represents the point in time 
            at which the associated <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone"/>
            has either been achieved (if the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent.Completed"/> flag is <c>true</c>) or
            is scheduled to be achieved (if <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent.Completed"/> is <c>false</c>). 
            <p>Some MilestoneEvents' <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry.Date">Date</see> may be set to <c>null</c>, 
            which indicates that the loan has not progressed far enough for an estimated completion date
            to be available for the associated Milestone. In particular, until the 
            the first milestone (other than File Started) is crossed, no milestones that 
            occur afterward are assigned scheduled
            completion dates. Once a milestone is completed, all subsequent milestones'
            expected completion dates will be populated.</p>
            <p>As with all LogEntries, MilestoneEvent instances become invalid
            when the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Refresh">Refresh</see> method is
            invoked on the parent <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan">Loan</see> object. Attempting
            to access this object after invoking refresh will result in an
            exception.</p>
            </remarks>
            <example>
The following displays the next milestone to be achieved for each loan
in the MyPipeline folder.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the "My Pipeline" folder
      LoanFolder fol = session.Loans.Folders["My Pipeline"];

      // Retrieve the folder's contents
      LoanIdentityList ids = fol.GetContents();

      // Open each loan in the folder and check the expected closing date
      for (int i = 0; i < ids.Count; i++)
      {
         // Open the next loan in the loop
         Loan loan = fol.OpenLoan(ids[i].LoanName);

         // Check if this is in the Processing stage
         if (loan.Log.MilestoneEvents.NextEvent != null)
            Console.WriteLine("The next milestone for the loan \"" + loan.LoanName + "\" is " + loan.Log.MilestoneEvents.NextEvent.MilestoneName + ".");

         // Close the loan
         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IMilestoneEvent">
            <summary>
            Interface for MilestoneEvent class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent.EllieMae#Encompass#BusinessObjects#Loans#Logging#IMilestoneEvent#SetDate(System.Object)">
            <summary>
            Provides a COM-accessible method for setting the date on a Milestone event.
            </summary>
            <param name="newDate">The date for the milestone event.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent.AdjustDate(System.Object,System.Boolean,System.Boolean)">
            <summary>
            Adjusts the date of a milestone event and, if desired, the previous and successive
            milestones events.
            </summary>
            <param name="newDate">The new completion or expected completion date for the
            milestone event.</param>
            <param name="allowAdjustPastMilestones">Passing the value <c>true</c> allows the expected
            completion dates for past milestones to be adjusted based on the newly specified date for 
            the current milestone. In particular, a <c>true</c> value will have the following effects:
            <list type="bullet">
            <item>Any incomplete milestone events which precede the current milestone in the lifetime 
            sequence and which are scheduled to be completed after <c>newDate</c> will be modified to be 
            due on <c>newDate</c>.</item>
            <item>Any unscheduled milestone events which precede the current milestone will
            be scheduled to be completed on <c>newDate</c>.</item>
            </list> 
            If this parameter is <c>false</c>, the scheduled completion times of milestone events
            earlier in the sequence will never be modified. As a result, if an attempt is made to
            schedule this milestone prior to the scheduled date of a prior milestone, or if an attempt
            is made to schedule a milestone while preceded by an unscheduled milestone,
            this method will raise an exception.</param>
            <param name="allowAdjustFutureMilestones">If <c>true</c> and the next milestone event is
            not marked as completed, then any incomplete, scheduled, future milestone events will have their expected
            completion dates adjusted based on the difference between the current milestone event's 
            prior completion date and the value specified by <c>newDate</c>. For example, if you modify the date of the Submittal
            milestone event by adding 2 days to it and the next milestone event (Approval) has not yet been completed, then
            the Approval milestone and all subsequent milestones will have two days added to their scheduled
            completion dates. If this parameter is <c>false</c>, the dates of subsequent milestones
            are not adjusted and the date specified by <c>newDate</c> may not fall after the date of
            any subsequent milestone.
            </param>
            <remarks>
            This method allows the schedule for milestone events to be changed
            either into the past or the future. However, the date of a milestone can never be adjusted
            so that it precedes the date of any previously completed milestone or comes after the
            date of any subsequently completed milestone.
            </remarks>
            <example>
The following code opens a loan and extends the deadline for all future milestones
by two days.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open the loan
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
      loan.Lock();

      // Extend the due date of all incomplete milestone events by 2 days
      MilestoneEvent e = loan.Log.MilestoneEvents.NextEvent;

      if ((e != null) && (e.Date != null))
         e.AdjustDate(Convert.ToDateTime(e.Date).AddDays(2), false, true);

      // Show the new milestone dates
      foreach (MilestoneEvent ms in loan.Log.MilestoneEvents)
         Console.WriteLine(ms.MilestoneName + ": " + ms.Date);

      loan.Commit();
      loan.Unlock();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent.EntryType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType"/> for the current entry.
            </summary>
            <remarks>This property will always return the value 
            <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.MilestoneEvent"/>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent.MilestoneID">
            <summary>
            Gets the MilestoneID of the Milestone related to the MilestoneEvent.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent.MilestoneName">
            <summary>
            Gets the name of the milestone with which this entry is associated.
            </summary>
            <remarks>You may use this value to attempt to locate the corresponding
            <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone">Milestone</see> object
            associated with this event. However, because the lifetime sequence of the current
            loan was determine when the loan was created, this name may not be a currently
            defined milestone in the Encompass system's default milestone sequence.
            <p>For a list of the pre-defined Milestones which are part of every loan's
            lifetime sequence, see the Remarks section for the <see cref="T:EllieMae.Encompass.BusinessEnums.Milestones"/>
            object.</p>
            </remarks>
            <example>
The following displays the next milestone to be achieved for each loan
in the MyPipeline folder.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the "My Pipeline" folder
      LoanFolder fol = session.Loans.Folders["My Pipeline"];

      // Retrieve the folder's contents
      LoanIdentityList ids = fol.GetContents();

      // Open each loan in the folder and check the expected closing date
      for (int i = 0; i < ids.Count; i++)
      {
         // Open the next loan in the loop
         Loan loan = fol.OpenLoan(ids[i].LoanName);

         // Check if this is in the Processing stage
         if (loan.Log.MilestoneEvents.NextEvent != null)
            Console.WriteLine("The next milestone for the loan \"" + loan.LoanName + "\" is " + loan.Log.MilestoneEvents.NextEvent.MilestoneName + ".");

         // Close the loan
         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent.Completed">
            <summary>
            Gets or sets a flag indicating if this milestone has been reached.
            </summary>
            <remarks>Setting this property to <c>true</c> will indicate that this milestone has been
            completed and will advance the loan to the next stage in the lifetime sequence. Because
            a complete milestone must have a date associated with it, setting this property to
            <c>true</c> will automatically cause the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry.Date"/> property to
            be set to the current date if previously <c>null</c>.
            <p>Additionally, if this property is set to <c>true</c> and the current milestone is not the next 
            milestone scheduled to be completed, all prior, incomplete miletones are marked
            as completed and their completion dates are updated to match the date of this milestone event.</p>
            <p>If this property is set to <c>false</c> and one or more completed milestones follow
            this event, those milestones are set to incomplete and what were previously their
            completion dates become their new scheduled completion dates.</p>
            <p>Note that an exception will be raised if you attempt to modify 
            this property for the <see cref="P:EllieMae.Encompass.BusinessEnums.Milestones.Started">Started</see>
            milestone, for which this property always returns <c>true</c>.</p>
            </remarks>
            <example>
The following code generates a report of all the loans in the My Pipeline
folder that have been sent for processing at some point in the past.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the "My Pipeline" folder
      LoanFolder fol = session.Loans.Folders["My Pipeline"];

      // Retrieve the folder's contents
      LoanIdentityList ids = fol.GetContents();

      // Get the "Processing" milestone
      Milestone processing = session.Loans.Milestones.Processing;

      // Open each loan in the folder and check the expected closing date
      for (int i = 0; i < ids.Count; i++)
      {
         // Open the next loan in the loop
         Loan loan = fol.OpenLoan(ids[i].LoanName);

         // Check if this is in the Processing stage
         MilestoneEvent evnt = loan.Log.MilestoneEvents.GetEventForMilestone(processing.Name);

         if (evnt.Completed)
            Console.WriteLine("The loan \"" + loan.LoanName + "\" started processing on " + evnt.Date);

         // Close the loan
         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent.Date">
            <summary>
            Gets or sets the completion date (or expected completion date) for the
            current milestone.
            </summary>
            <remarks>
            When the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent.Completed"/> property is <c>true</c>, this date represents
            the date on which the milestone was achieved. If <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent.Completed"/> is <c>false</c>,
            this date represents the projected completion date, if one is available. If no
            projected date is available, this property returns null.
            <p>You may also use this property to modify the completion date or expected completion
            date of a milestone in a loan. However, the new date must not precede the date of any
            milestone earlier in the lifetime sequence or come after any milestone later in the
            lifetime sequence. If you wish to adjust the entire miletone schedule, use the
            <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent.AdjustDate(System.Object,System.Boolean,System.Boolean)"/> method.
            </p>
            <p><note type="implementnotes">Developers of COM-based clients will need to invoke the
            SetDate() method in order to modify the date on this object.
            </note></p>
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent.IsAlert">
            <summary>
            Indicates if this MilestoneEvent is in alert status.
            </summary>
            <remarks>A MilestoneEvent is considered to be an alert if both of the following
            conditions are met:
            <list type="bullet">
            <item>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry.Date">Date</see> is non-null and is on or before today.</item>
            <item>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent.Completed"/> property is <c>false</c>.</item>
            </list>
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent.LoanAssociate">
            <summary>
            Gets or sets the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent.LoanAssociate"/> who is attached to the current Milestone.
            </summary>
            <remarks>
            This property will return <c>null</c> if there is no Role associated with this milestone
            based on the business process defined by the Encompass system.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneEvent.LoanAssociateAccess">
            <summary>
            Gets or sets whether the loan associate for this milestone should be given write access to
            the Loan after the loan has transitioned to a later milestone.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TaskPriority">
            <summary>
            Enumeration for the priority of a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask"/>.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.TaskPriority.None">
            <summary>No priority specified.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.TaskPriority.Low">
            <summary>Low priority</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.TaskPriority.Normal">
            <summary>Normal priority</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.TaskPriority.High">
            <summary>High priority</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask">
            <summary>
            Represents a Task associated with a specific Milestone in Encompass.
            </summary>
            <example>
      The following example adds an alert for the Loan Officer for any milestone
      task which has not been completed for the current milestone.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      Loan loan = session.Loans.Open("{4c1cd774-96dd-4a92-b703-df8a07b8fc98}");
      loan.Lock();

      // Get the LO role
      Role lo = session.Loans.Roles.GetRoleByAbbrev("LO");

      // Iterate thru all of the tasks on the selected loan
      foreach (MilestoneTask task in loan.Log.MilestoneTasks)
      {
        // If the task isn't complete and it's for the next milestone, 
        // create an alert for the Loan Officer.
        if (!task.Completed && task.MilestoneEvent == loan.Log.MilestoneEvents.NextEvent)
          if (task.DueDate is DateTime)
          {
            // Create an alert and assign to the LO
            task.RoleAlerts.Add(lo, (DateTime)task.DueDate);
          }
      }

      // Save and close the loan
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IMilestoneTask">
            <summary>
            Interface for GeneralEntry class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask.EntryType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType"/> for the current entry.
            </summary>
            <remarks>This property will always return the value 
            <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.MilestoneTask"/>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask.Name">
            <summary>
            Gets or sets the title of the task.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask.Description">
            <summary>
            Gets or sets the description of the task.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask.AddedBy">
            <summary>
            Gets the ID of the user who added this condition to the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask.DateAdded">
            <summary>
            Gets the Date and time on which the condition was added to the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask.Priority">
            <summary>
            Gets or sets the priority of the task.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask.DaysToComplete">
            <summary>
            Gets or sets the number of days until the task is due from the date the task was added.
            </summary>
            <remarks>Set the property to -1 to clear the number of days for the task to be completed.</remarks>
            <example>
      The following code demonstrates how to add a new MilestoneTask to a loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      Loan loan = session.Loans.Open("{4c1cd774-96dd-4a92-b703-df8a07b8fc98}");
      loan.Lock();

      // Retrieve the "Processing" milestone
      Milestone ms = session.Loans.Milestones.Processing;

      // Fetch the MilestoneEvent from the loan corresponding to the selected Milestone
      MilestoneEvent msEvent = loan.Log.MilestoneEvents.GetEventForMilestone(ms.Name);

      // Create the new task on this milestone
      MilestoneTask task = loan.Log.MilestoneTasks.Add("Discuss Life Insurance with Borrower", msEvent);
      
      // Set some basic properties on the task
      task.Priority = TaskPriority.High;
      task.DaysToComplete = 10;
      
      // Look up the life insurer contact
      StringFieldCriterion cri = new StringFieldCriterion();
      cri.FieldName = "Contact.CompanyName";
      cri.Value = "Met Life Insurance";

      ContactList insurers = session.Contacts.Query(cri, ContactLoanMatchType.None, ContactType.Biz);

      // Add a contact to the task
      if (insurers.Count > 0)
        task.Contacts.Add((BizContact) insurers[0]);

      // Save and close the loan
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask.DueDate">
            <summary>
            Gets the due date for the task.
            </summary>
            <remarks>If the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask.DaysToComplete"/> property is not set, this property will return
            <c>null</c>. Otherwise, the property will return the date the task is due, which is the 
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask.DateAdded"/> plus the number of days specified by the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask.DaysToComplete"/>.
            </remarks>
            <example>
      The following example adds an alert for the Loan Officer for any milestone
      task which has not been completed for the current milestone.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      Loan loan = session.Loans.Open("{4c1cd774-96dd-4a92-b703-df8a07b8fc98}");
      loan.Lock();

      // Get the LO role
      Role lo = session.Loans.Roles.GetRoleByAbbrev("LO");

      // Iterate thru all of the tasks on the selected loan
      foreach (MilestoneTask task in loan.Log.MilestoneTasks)
      {
        // If the task isn't complete and it's for the next milestone, 
        // create an alert for the Loan Officer.
        if (!task.Completed && task.MilestoneEvent == loan.Log.MilestoneEvents.NextEvent)
          if (task.DueDate is DateTime)
          {
            // Create an alert and assign to the LO
            task.RoleAlerts.Add(lo, (DateTime)task.DueDate);
          }
      }

      // Save and close the loan
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask.Completed">
            <summary>
            Gets or sets whether the task has been marked as completed.
            </summary>
            <example>
      The following locates all outstanding Milestone Tasks for the next expected
      milestone. If no task are outstanding, it marks the milestone as completed.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      Loan loan = session.Loans.Open("{4c1cd774-96dd-4a92-b703-df8a07b8fc98}");
      loan.Lock();

      // Find the insurance task(s)
      LogEntryList tasks = loan.Log.MilestoneTasks.GetTasksByName("Discuss Life Insurance with Borrower");

      // If it's not already complete, mark it completed
      foreach (MilestoneTask task in tasks)
        if (!task.Completed)
          task.DateCompleted = DateTime.Now;

      // Save and close the loan
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask.DateCompleted">
            <summary>
            Gets or sets the date the task was completed.
            </summary>
            <example>
      The following locates all outstanding Milestone Tasks for the next expected
      milestone. If no task are outstanding, it marks the milestone as completed.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      Loan loan = session.Loans.Open("{4c1cd774-96dd-4a92-b703-df8a07b8fc98}");
      loan.Lock();

      // Find the insurance task(s)
      LogEntryList tasks = loan.Log.MilestoneTasks.GetTasksByName("Discuss Life Insurance with Borrower");

      // If it's not already complete, mark it completed
      foreach (MilestoneTask task in tasks)
        if (!task.Completed)
          task.DateCompleted = DateTime.Now;

      // Save and close the loan
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask.CompletedBy">
            <summary>
            Gets or sets the ID of the user who has completed this task.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask.DateCompleted"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask.MilestoneEvent">
            <summary>
            Gets or sets the milestone with which the task is associated.
            </summary>
            <example>
      The following example adds an alert for the Loan Officer for any milestone
      task which has not been completed for the current milestone.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      Loan loan = session.Loans.Open("{4c1cd774-96dd-4a92-b703-df8a07b8fc98}");
      loan.Lock();

      // Get the LO role
      Role lo = session.Loans.Roles.GetRoleByAbbrev("LO");

      // Iterate thru all of the tasks on the selected loan
      foreach (MilestoneTask task in loan.Log.MilestoneTasks)
      {
        // If the task isn't complete and it's for the next milestone, 
        // create an alert for the Loan Officer.
        if (!task.Completed && task.MilestoneEvent == loan.Log.MilestoneEvents.NextEvent)
          if (task.DueDate is DateTime)
          {
            // Create an alert and assign to the LO
            task.RoleAlerts.Add(lo, (DateTime)task.DueDate);
          }
      }

      // Save and close the loan
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask.Contacts">
            <summary>
            Gets the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact"/> records associated with the
            Milestone Task.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact">
            <summary>
            Represents a contact associated with a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask"/>.
            </summary>
            <remarks>
            When a contact is associated with a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask"/>, the contact's name and address information 
            can be directly entered in the object or the contact can be linked to a <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact"/>,
            in which case the information is taken from the BizContact record. However, once the link is established,
            you can override the values in this MilestoneTaskContact so it will differ from the values in
            the linked Contact.
            </remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IMilestoneTaskContact">
            <summary>
            Interface for MilestoneTaskContact class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact.GetLinkedContact">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact"/> which is linked to this Task Contact.
            </summary>
            <returns>Returns <c>null</c> if there is no linked contact, otherwise it returns
            the <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact"/> object for the linked contact.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact.LinkContact(EllieMae.Encompass.BusinessObjects.Contacts.BizContact)">
            <summary>
            Links the task contact to the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact"/>.
            </summary>
            <param name="contact"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact.UnlinkContact">
            <summary>
            Unlinks the task from the currently linked contact.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact.Unwrap">
            <summary>
            Returns the underlying MilestoneTaskLog.TaskContact object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact.Name">
            <summary>
            Gets or sets the name of the contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact.Category">
            <summary>
            Gets or sets the category of the contact.
            </summary>
            <summary>
            Gets or sets the <see cref="T:EllieMae.Encompass.BusinessEnums.BizCategory">BizCategory</see> associated with this contact.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact.PhoneNumber">
            <summary>
            Gets or sets the contact's phone number.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact.Email">
            <summary>
            Gets or sets the contact's email address.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact.StreetAddress">
            <summary>
            Gets or sets the contact's street address.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact.City">
            <summary>
            Gets or sets the city portion of the contact's address.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact.State">
            <summary>
            Gets or sets the state portion of the contact's address.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact.ZipCode">
            <summary>
            Gets or sets the ZIP Code portion of the contact's address.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContacts">
            <summary>
            Represents a collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact"/> objects which are assigned
            to a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTask"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IMilestoneTaskContacts">
            <summary>
            Interface for MilestoneTaskContacts class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContacts.Add(System.String,System.String,System.String)">
            <summary>
            Adds a new contact to the collection.
            </summary>
            <param name="contactName">The contact's full name.</param>
            <param name="contactEmail">The contact's email address.</param>
            <param name="contactPhone">The contact's phone number.</param>
            <returns>Returns the new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact"/> object.</returns>
            <remarks>You must provide a name and either an email address or phone number or this method
            will raise an exception.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContacts.Add(EllieMae.Encompass.BusinessObjects.Contacts.BizContact)">
            <summary>
            Create a new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact"/> and links it to an existing <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact"/>.
            </summary>
            <param name="contactToLink">The <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact"/> to which to link the Task contact.</param>
            <returns>Returns the new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact"/> object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContacts.Remove(EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact)">
            <summary>
            Removes a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact"/> from the collection.
            </summary>
            <param name="taskContact">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact"/> to remove.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContacts.Clear">
            <summary>
            Clears all contacts from the collection.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContacts.GetEnumerator">
            <summary>
            Provides a enumerator for the collection of contacts.
            </summary>
            <returns>Returns an <see cref="T:System.Collections.IEnumerator"/> implementation for the collection.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContacts.Count">
            <summary>
            Gets the number of contacts in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContacts.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact"/> from the collection.
            </summary>
            <param name="index">The index of the desired contact.</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.MilestoneTaskContact"/> at the specified index.</returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition">
            <summary>
            Represents the tracking information for an underwriting condition.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IPostClosingCondition">
            <summary>
            Interface for EDMTransaction class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.EntryType">
            <summary>
            Gets the type of log entry represented by the object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.Recipient">
            <summary>
            Gets or sets the recipient of the item.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.DaysToReceive">
            <summary>
            Gets or sets the number of days from the date requested until the condition is due to be received.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.Expected">
            <summary>
            Indicates if the condition has a <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.DateExpected"/> set.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.DateExpected">
            <summary>
            Gets or sets the date the condition is expected to be received.
            </summary>
            <remarks>To clear the date expected for the condition, set this property to <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.Received">
            <summary>
            Indicates if the condition has been marked as received.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.DateReceived">
            <summary>
            Gets or sets the date the condition was received.
            </summary>
            <remarks>To clear the received state of the condition, set this property to <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.ReceivedBy">
            <summary>
            Gets or sets the ID of the user who has received this Condition.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.DateReceived"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.Requested">
            <summary>
            Indicates if the condition has been marked as requested.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.DateRequested">
            <summary>
            Gets or sets the date the condition was requested.
            </summary>
            <remarks>To clear the requested state of the condition, set this property to <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.RequestedBy">
            <summary>
            Gets or sets the ID of the user who has reviewed this Condition.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.DateRequested"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.Rerequested">
            <summary>
            Indicates if the condition has been marked as re-requested.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.DateRerequested">
            <summary>
            Gets or sets the date the condition was requested.
            </summary>
            <remarks>To clear the requested state of the condition, set this property to <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.RerequestedBy">
            <summary>
            Gets or sets the ID of the user who has reviewed this Condition.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.DateRequested"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.RequestedFrom">
            <summary>
            Gets and sets who the condition was requested from
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.Sent">
            <summary>
            Indicates if the condition has been marked as waived.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.DateSent">
            <summary>
            Gets or sets the date the condition was waived.
            </summary>
            <remarks>To clear the waived state of the condition, set this property to <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.SentBy">
            <summary>
            Gets or sets the ID of the user who has cleared this Condition.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.DateSent"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.Cleared">
            <summary>
            Gets or sets whether the condition has been cleared
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.DateCleared">
            <summary>
            Gets or sets the date the condition was received.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.ClearedBy">
            <summary>
            Gets or sets the ID of the user who has cleared this Condition.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PostClosingCondition.DateCleared"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition">
            <summary>
            Represents the tracking information for a preliminary condition.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IPreliminaryCondition">
            <summary>
            Interface for EDMTransaction class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.EntryType">
            <summary>
            Gets the type of log entry represented by the object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.Category">
            <summary>
            Gets or sets the category of the condition.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.PriorTo">
            <summary>
            Gets or sets the event prior to which the condition must be satisfied.
            </summary>
            <remarks>Valid values recognized by Encompass are: PTA, PTF, PTD or AC.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.AllowUnderwriterAccess">
            <summary>
            Indicates if the underwriter is allowed to have access to this condition.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.Fulfilled">
            <summary>
            Indicates if the condition has been marked as received.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.DateFulfilled">
            <summary>
            Gets or sets the date the condition was fulfilled.
            </summary>
            <remarks>To clear the fulfilled state of the condition, set this property to <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.FulfilledBy">
            <summary>
            Gets or sets the ID of the user who has received this Condition.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.DateFulfilled"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.Received">
            <summary>
            Indicates if the condition has been marked as received.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.Requested">
            <summary>
            Indicates if the condition has been marked as requested.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.Rerequested">
            <summary>
            Indicates if the condition has been marked as re-requested.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.DateExpected">
            <summary>
            Gets or sets the date the condition is expected to be received.
            </summary>
            <remarks>To clear the date expected for the condition, set this property to <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.ReceivedBy">
            <summary>
            Gets or sets the ID of the user who has received this Condition.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.DateReceived"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.DateReceived">
            <summary>
            Gets or sets the date the condition was received.
            </summary>
            <remarks>To clear the received state of the condition, set this property to <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.RequestedBy">
            <summary>
            Gets or sets the ID of the user who has reviewed this Condition.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.DateRequested"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.DateRequested">
            <summary>
            Gets or sets the date the condition was requested.
            </summary>
            <remarks>To clear the requested state of the condition, set this property to <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.RequestedFrom">
            <summary>
            Gets and sets who the condition was requested from
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.RerequestedBy">
            <summary>
            Gets or sets the ID of the user who has reviewed this Condition.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.DateRequested"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.DateRerequested">
            <summary>
            Gets or sets the date the condition was requested.
            </summary>
            <remarks>To clear the requested state of the condition, set this property to <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PreliminaryCondition.DaysToReceive">
            <summary>
            Gets or sets the number of days from the date requested until the condition is due to be received.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PrintDocument">
            <summary>
            Represents a single printed document that is included in an Print event.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IPrintDocument">
            <summary>
            Interface for the PrintDocument class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PrintDocument.DocumentName">
            <summary>
            Gets the name of the document that was printed.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PrintDocuments">
            <summary>
            Represents the collection of documents printed in n
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PrintEvent"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IPrintocuments">
            <summary>
            Interface for the Printocuments object.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.PrintDocuments.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An object that implements IEnumerator for iterating over the collection.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PrintDocuments.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PrintDocuments.Item(System.Int32)">
            <summary>
            Gets an <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PrintDocument"/> from the collection by index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PrintAction">
            <summary>
            Enumeration of the different print-related actions which can be performed.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.PrintEvent">
            <summary>
            Represents a print event associated with a Loan.
            </summary>
            <remarks>A Print event records a list of printed documents and the user
            who performed the action.
            </remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IPrintEvent">
            <summary>
            Interface for GeneralEntry class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PrintEvent.EntryType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType"/> for the current entry.
            </summary>
            <remarks>This property will always return the value 
            <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.PrintEvent"/>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PrintEvent.PerformedBy">
            <summary>
            Gets or sets the person who performed the printing.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PrintEvent.PerformedByUserName">
            <summary>
            Gets or sets the person who performed the printing.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PrintEvent.PrintAction">
            <summary>
            Gets or sets the print action performed by the user.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.PrintEvent.Documents">
            <summary>
            Gets the collection of printed documents that were included in this print event.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ReceivedDownload">
            <summary>
            Represents a download that has been received and imported into Encompass.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IReceivedDownload">
            <summary>
            Interface for ReceivedDownload class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.ReceivedDownload.EntryType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType"/> for the current entry.
            </summary>
            <remarks>This property will always return the value 
            <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.ReceivedDownload"/>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.ReceivedDownload.Title">
            <summary>
            Gets the Title of the Download.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.ReceivedDownload.Sender">
            <summary>
            Gets the Sender of the Download.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.ReceivedDownload.Date">
            <summary>
            Gets the date on which the download was imported into Encompass.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.RoleAccessList">
            <summary>
            Summary description for RoleAccessList.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IRoleAccessList">
            <summary>
            Interface for LogLockRequests class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.RoleAccessList.Add(EllieMae.Encompass.BusinessObjects.Loans.Role)">
            <summary>
            Adds a specified <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> to the access list.
            </summary>
            <param name="roleToAdd">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> to be added.</param>
            <remarks>If the specified role is already in the access list, this method will
            return without error.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.RoleAccessList.Remove(EllieMae.Encompass.BusinessObjects.Loans.Role)">
            <summary>
            Removes a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> from the access list.
            </summary>
            <param name="roleToRemove">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> to be removed.</param>
            <remarks>If the specified Role is not in the access list, this method will
            return without error.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.RoleAccessList.Clear">
            <summary>
            Clears the access list.
            </summary>
            <remarks>When an access list is cleared, all roles are presumed to have access to
            the resource which is protects.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.RoleAccessList.GetEnumerator">
            <summary>
            Creates an enumerator for the collection of roles in the access list.
            </summary>
            <returns>Returns an enumerator for the collection of roles.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.RoleAccessList.Count">
            <summary>
            Returns the number of roles in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.RoleAccessList.Item(System.Int32)">
            <summary>
            Returns a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> from the access list by index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineEvent">
            <summary>
            Represents a single published event to the Status Online web site.
            </summary>
            <remarks>A published event could be the achievement of a milestone,
            the receipt of a supporting document or any other condition avaialble
            in the Status Online configuration within Encompass.</remarks>
            <example>
The following code displays all of events that have been published to the
Status Online web site for a particular loan, along with the date on
which is was published and the user who published it.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
   
      // Iterate over all of the Status Online updates associated with the loan
      foreach (StatusOnlineUpdate update in loan.Log.StatusOnlineUpdates)
      {
         // Each Status Online update can contains multiple published events,
         // e.g. the achievement of a milestone and the receipt of a document
         foreach (StatusOnlineEvent e in update.PublishedEvents)
            Console.WriteLine(e.Description + " published on " + update.Date 
               + " by " + update.Creator);
      }

      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IStatusOnlineEvent">
            <summary>
            Interface for the EDMTransactionItem class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineEvent.Description">
            <summary>
            Gets the description of the item that was published to the Status Online web site.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineEvent.Date">
            <summary>
            Gets the date of the event that was published.
            </summary>
            <remarks>This date represents the date on which the action described by this
            item occurred, not the date on which it was published. For example, if the
            item represents the achievement of a milestone, the Date property will be the
            date on which that milestone was achieved, not the date on which the Status
            Online website was updated.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineEvents">
            <summary>
            Provides access to the collection of events that were submitted to the Status
            Online web site as part of a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineUpdate"/>.
            </summary>
            <example>
The following code displays all of events that have been published to the
Status Online web site for a particular loan, along with the date on
which is was published and the user who published it.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
   
      // Iterate over all of the Status Online updates associated with the loan
      foreach (StatusOnlineUpdate update in loan.Log.StatusOnlineUpdates)
      {
         // Each Status Online update can contains multiple published events,
         // e.g. the achievement of a milestone and the receipt of a document
         foreach (StatusOnlineEvent e in update.PublishedEvents)
            Console.WriteLine(e.Description + " published on " + update.Date 
               + " by " + update.Creator);
      }

      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IStatusOnlineEvents">
            <summary>
            Interface for the StatusOnlineEvents object.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineEvents.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An object that implements IEnumerator for iterating over the collection.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineEvents.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineEvents.Item(System.Int32)">
            <summary>
            Gets an <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineEvent"/> from the collection by index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineUpdate">
            <summary>
            Provides a record of an update to the Status Online website for a loan.
            </summary>
            <example>
The following code displays all of events that have been published to the
Status Online web site for a particular loan, along with the date on
which is was published and the user who published it.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
   
      // Iterate over all of the Status Online updates associated with the loan
      foreach (StatusOnlineUpdate update in loan.Log.StatusOnlineUpdates)
      {
         // Each Status Online update can contains multiple published events,
         // e.g. the achievement of a milestone and the receipt of a document
         foreach (StatusOnlineEvent e in update.PublishedEvents)
            Console.WriteLine(e.Description + " published on " + update.Date 
               + " by " + update.Creator);
      }

      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IStatusOnlineUpdate">
            <summary>
            Interface for StatusOnlineUpdate class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineUpdate.EntryType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType"/> for the current entry.
            </summary>
            <remarks>This property will always return the value 
            <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.StatusOnlineUpdate"/>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineUpdate.Date">
            <summary>
            Gets the date on which the update occurred.
            </summary>
            <example>
The following code displays all of events that have been published to the
Status Online web site for a particular loan, along with the date on
which is was published and the user who published it.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
   
      // Iterate over all of the Status Online updates associated with the loan
      foreach (StatusOnlineUpdate update in loan.Log.StatusOnlineUpdates)
      {
         // Each Status Online update can contains multiple published events,
         // e.g. the achievement of a milestone and the receipt of a document
         foreach (StatusOnlineEvent e in update.PublishedEvents)
            Console.WriteLine(e.Description + " published on " + update.Date 
               + " by " + update.Creator);
      }

      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineUpdate.Description">
            <summary>
            Gets a description of the update.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineUpdate.Creator">
            <summary>
            Gets the name of the user who performed the update.
            </summary>
            <example>
The following code displays all of events that have been published to the
Status Online web site for a particular loan, along with the date on
which is was published and the user who published it.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
   
      // Iterate over all of the Status Online updates associated with the loan
      foreach (StatusOnlineUpdate update in loan.Log.StatusOnlineUpdates)
      {
         // Each Status Online update can contains multiple published events,
         // e.g. the achievement of a milestone and the receipt of a document
         foreach (StatusOnlineEvent e in update.PublishedEvents)
            Console.WriteLine(e.Description + " published on " + update.Date 
               + " by " + update.Creator);
      }

      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.StatusOnlineUpdate.PublishedEvents">
            <summary>
            Gets the collection of events that were published to the Status Online web site
            as part of this update.
            </summary>
            <remarks>This collection may be empty in the event that no new items
            were published. This can occur if items are instead unpublished from
            the Status Online site.</remarks>
            <example>
The following code displays all of events that have been published to the
Status Online web site for a particular loan, along with the date on
which is was published and the user who published it.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
   
      // Iterate over all of the Status Online updates associated with the loan
      foreach (StatusOnlineUpdate update in loan.Log.StatusOnlineUpdates)
      {
         // Each Status Online update can contains multiple published events,
         // e.g. the achievement of a milestone and the receipt of a document
         foreach (StatusOnlineEvent e in update.PublishedEvents)
            Console.WriteLine(e.Description + " published on " + update.Date 
               + " by " + update.Creator);
      }

      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument">
            <summary>
            Represents a single Document Tracking entry associated with a Loan.
            </summary>
            <remarks>The Date property of a TrackedDocument represents either
            the date on which the document is due to be received or the day the 
            document actually was received.
            <p>TrackedDocument instances become invalid
            when the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Loan.Refresh">Refresh</see> method is
            invoked on the parent <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan">Loan</see> object. Attempting
            to access this object after invoking refresh will result in an
            exception.</p>
            </remarks>
            <example>
The following code retrieves the set of all supporting documents associated
with a loan and generates a report for all documents that are overdue.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan for reading
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");

      // Look for any supporting document which is overdue
      foreach (TrackedDocument doc in loan.Log.TrackedDocuments)
      {
         if (doc.DueDate != null)
         {
            if ((DateTime) doc.DueDate < DateTime.Now)
               Console.WriteLine("The document \"" + doc.Title + "\" is overdue!");
         }
      }

      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.ITrackedDocument">
            <summary>
            Interface for TrackedDocument class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.EllieMae#Encompass#BusinessObjects#Loans#Logging#ITrackedDocument#SetOrderDate(System.Object)">
            <summary>
            Interface method for COM components that cannot set the date directly by using
            the OrderDate property.
            </summary>
            <param name="value">The new date or the Empty variant to clear the date.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.EllieMae#Encompass#BusinessObjects#Loans#Logging#ITrackedDocument#SetReorderDate(System.Object)">
            <summary>
            Interface method for COM components that cannot set the date directly by using
            the ReorderDate property.
            </summary>
            <param name="value">The new date or the Empty variant to clear the date.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.EllieMae#Encompass#BusinessObjects#Loans#Logging#ITrackedDocument#SetReceivedDate(System.Object)">
            <summary>
            Interface method for COM components that cannot set the date directly by using
            the ReceivedDate property.
            </summary>
            <param name="value">The new date or the Empty variant to clear the date.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.EllieMae#Encompass#BusinessObjects#Loans#Logging#ITrackedDocument#SetReviewedDate(System.Object)">
            <summary>
            Interface method for COM components that cannot set the date directly by using
            the ReviewedDate property.
            </summary>
            <param name="value">The new date or the Empty variant to clear the date.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.EllieMae#Encompass#BusinessObjects#Loans#Logging#ITrackedDocument#SetShippingReadyDate(System.Object)">
            <summary>
            Interface method for COM components that cannot set the date directly by using
            the ShippingReadyDate property.
            </summary>
            <param name="value">The new date or the Empty variant to clear the date.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.EllieMae#Encompass#BusinessObjects#Loans#Logging#ITrackedDocument#SetUnderwritingReadyDate(System.Object)">
            <summary>
            Interface method for COM components that cannot set the date directly by using
            the UnderwritingReadyDate property.
            </summary>
            <param name="value">The new date or the Empty variant to clear the date.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.EllieMae#Encompass#BusinessObjects#Loans#Logging#ITrackedDocument#SetArchiveDate(System.Object)">
            <summary>
            Interface method for COM components that cannot set the date directly by using
            the ReorderDate property.
            </summary>
            <param name="value">The new date or the Empty variant to clear the date.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.MarkAsAccessed(System.String)">
            <summary>
            Marks the document as being accessed.
            </summary>
            <param name="accessUserId">The User ID that should be used to indicate access to this
            document. This value must equal the User ID of the current session unless the currently
            logged in user has the Administrator persona.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.GetLinkedConditions">
            <summary>
            Gets the set of conditions linked to the current document.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.LinkToCondition(EllieMae.Encompass.BusinessObjects.Loans.Logging.Condition)">
            <summary>
            Links the TrackedDocument to a condition.
            </summary>
            <param name="condition">The condition to which the document will be linked.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.UnlinkCondition(EllieMae.Encompass.BusinessObjects.Loans.Logging.Condition)">
            <summary>
            Breaks the link between the TrackedDocument and a condition.
            </summary>
            <param name="condition">The condition to which the document will be unlinked.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.GetAttachments">
            <summary>
            Retrieves the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/> objects associated with the document.
            </summary>
            <returns>Returns an <see cref="T:EllieMae.Encompass.Collections.AttachmentList"/> containing the attachments.</returns>
            <example>
The following code exports all of the attachments associated with the Appraisals
in a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the next loan in the loop
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");

      // Get all Appraisals from the TrackedDocument list
      LogEntryList appraisals = loan.Log.TrackedDocuments.GetDocumentsByTitle("Appraisal");

      // Save each attachment to the C:\Appraisals folder
      foreach (TrackedDocument appraisal in appraisals)
         foreach (Attachment att in appraisal.GetAttachments())
         att.SaveToDisk("C:\\Appraisals\\" + att.Name);

      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.Attach(EllieMae.Encompass.BusinessObjects.Loans.Attachment)">
            <summary>
            Links an <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/> to the document.
            </summary>
            <param name="attachment">The existing Attachment to be linked.</param>
            <example>
The following code creates a new attachment to the loan and associates it
with an existing Appraisal.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the next loan in the loop
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");

      // Lock the loan since we will be modifying it
      loan.Lock();

      // Create a new attachment by importing it from a TIFF document on disk
      Attachment att = loan.Attachments.Add("C:\\Scanner Output\\MyAppraisal.tif");

      // Now attach the new Attachment to the Appraisal on the loan
      LogEntryList appraisals = loan.Log.TrackedDocuments.GetDocumentsByTitle("Appraisal");

      if (appraisals.Count > 0)
      {
         TrackedDocument appraisal = (TrackedDocument) appraisals[0];
         appraisal.Attach(att);
      }

      // Save the changes to the loan, which commits the new attachment
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.Detach(EllieMae.Encompass.BusinessObjects.Loans.Attachment)">
            <summary>
            Removes the link to an <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment"/> for the document.
            </summary>
            <param name="attachment">The existing Attachment to be detached.</param>
            <example>
The following code creates a new attachment to the loan and associates it
with an existing Appraisal.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the next loan in the loop
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");

      // Lock the loan since we will be modifying it
      loan.Lock();

      // Create a new attachment by importing it from a TIFF document on disk
      Attachment att = loan.Attachments.Add("C:\\Scanner Output\\MyAppraisal.tif");

      // Now attach the new Attachment to the Appraisal on the loan
      LogEntryList appraisals = loan.Log.TrackedDocuments.GetDocumentsByTitle("Appraisal");

      if (appraisals.Count > 0)
      {
         TrackedDocument appraisal = (TrackedDocument) appraisals[0];
         appraisal.Attach(att);
      }

      // Save the changes to the loan, which commits the new attachment
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.EntryType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType"/> for the current item.
            </summary>
            <remarks>This property will always return the value 
            <see cref="F:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntryType.TrackedDocument"/>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.Title">
            <summary>
            Gets the title of the supporting document.
            </summary>
            <example>
The following code sets the order date to today for all Document Events 
associated with the "Submittal" milestone. Once the OrderDate property has been
set, the DueDate property is printed to indicate when the document should
be received.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
      loan.Lock();
   
      // Look for any supporting document which is overdue
      foreach (TrackedDocument doc in loan.Log.TrackedDocuments)
      {
         // Mark all of the documents associated with the Submittal milestone as ordered
         if (doc.MilestoneName == session.Loans.Milestones.Submittal.Name)
         {
            // Set the order date to today and allow 10 days to be received
            doc.OrderDate = DateTime.Now;
            doc.DueDays = 10;

            // Write a message showing the date by which the document is due
            Console.WriteLine("Document \"" + doc.Title + "\" has been ordered and is due on " + doc.DueDate);
         }
      }

      loan.Commit();
      loan.Unlock();
      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.Description">
            <summary>
            Gets/sets the description of the supporting document.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.DocumentType">
            <summary>
            Gets the eFolder type of the document.
            </summary>
            <remarks>
            This property returns one of the following values:
            <list type="bullet">
            <item>Settlement Service</item>
            <item>Closing Document</item>
            <item>eDisclosure</item>
            <item>Verification</item>
            <item>Needed</item>
            <item>Standard Form</item>
            <item>Custom Form</item>
            </list>
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.Company">
            <summary>
            Gets or sets the company name associated with the supporting document.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.MilestoneName">
            <summary>
            Gets or sets the <see cref="T:EllieMae.Encompass.BusinessEnums.Milestone">Milestone</see> associated with the supporting document.
            </summary>
            <remarks>If you attempt to set this property to null, an exception will be thrown.
            </remarks>
            <example>
The following code sets the order date to today for all Document Events 
associated with the "Submittal" milestone. Once the OrderDate property has been
set, the DueDate property is printed to indicate when the document should
be received.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
      loan.Lock();
   
      // Look for any supporting document which is overdue
      foreach (TrackedDocument doc in loan.Log.TrackedDocuments)
      {
         // Mark all of the documents associated with the Submittal milestone as ordered
         if (doc.MilestoneName == session.Loans.Milestones.Submittal.Name)
         {
            // Set the order date to today and allow 10 days to be received
            doc.OrderDate = DateTime.Now;
            doc.DueDays = 10;

            // Write a message showing the date by which the document is due
            Console.WriteLine("Document \"" + doc.Title + "\" has been ordered and is due on " + doc.DueDate);
         }
      }

      loan.Commit();
      loan.Unlock();
      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.BorrowerPair">
            <summary>
            Gets or sets the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.BorrowerPair">BorrowerPair</see> with which this document is associated.
            </summary>
            <example>
The following code displays the titles of all of the Supporting Documents
associated with the loan's current borrower pair.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan for reading
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");

      // Loop over the list of supporting documents
      foreach (TrackedDocument doc in loan.Log.TrackedDocuments)
      {
         // Get the borrower pair with which the document is associated
         if (doc.BorrowerPair == loan.BorrowerPairs.Current)
            Console.WriteLine(doc.Title);
      }

      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.Comments">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.Comments"/> associated with the TrackedDocument.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.IncludeInEDisclosurePackage">
            <summary>
            Indicates if the document is to be included in the eDisclosure package.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.IsWebcenter">
            <summary>
            Indicates if the document is available to Webcenter (Send Files to borrower).
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.IsTPOWebcenterPortal">
            <summary>
            Indicates if the document is available to TPO Webcenter Portal.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.IsThirdPartyDoc">
            <summary>
            Indicates if the document is available to EDM Lenders (Send Files to Lenders) or other service providers.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.IsClosingDocument">
            <summary>
            Indicates if the document is a Closing document
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.IsPreClosingDocument">
            <summary>
            Indicates if the document is a PreClosing document
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.IsOpeningDocument">
            <summary>
            Indicates if the document is an opening document
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.IsEMNDocument">
            <summary>
            Indicates if the document came thru the Ellie Mae Network
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.EPassSignature">
            <summary>
            Gets the EPass Signature of the document, if any
            </summary>
            <remarks>This property is intended for use within Encompass only.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.AddedBy">
            <summary>
            Gets the ID of the user who added this condition to the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.DateAdded">
            <summary>
            Gets the Date and time on which the condition was added to the loan.
            </summary>
            <remarks>Some legacy TrackedDocument items do not contain a value for the DateAdded. For those
            items, this property will return <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.Ordered">
            <summary>
            Gets or sets whether the document has been ordered.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.OrderDate">
            <summary>
            Gets or sets the date the document was ordered/requested.
            </summary>
            <remarks>If the document has not been ordered, this property will be null; otherwise,
            it will be a DateTime value. Modifying the OrderDate for a document will cause
            the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ExpirationDate">ExpirationDate</see> and <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.DueDate">DueDate</see>
            to be adjusted accordingly.
            <note type="implementnotes">Because of a limitation in the way COM marshals date values
            when exposed as a VARIANT, COM-based clients should call the <c>SetOrderDate()</c> method
            to set this property.</note>
            </remarks>
            <example>
The following code sets the order date to today for all Document Events 
associated with the "Submittal" milestone. Once the OrderDate property has been
set, the DueDate property is printed to indicate when the document should
be received.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
      loan.Lock();
   
      // Look for any supporting document which is overdue
      foreach (TrackedDocument doc in loan.Log.TrackedDocuments)
      {
         // Mark all of the documents associated with the Submittal milestone as ordered
         if (doc.MilestoneName == session.Loans.Milestones.Submittal.Name)
         {
            // Set the order date to today and allow 10 days to be received
            doc.OrderDate = DateTime.Now;
            doc.DueDays = 10;

            // Write a message showing the date by which the document is due
            Console.WriteLine("Document \"" + doc.Title + "\" has been ordered and is due on " + doc.DueDate);
         }
      }

      loan.Commit();
      loan.Unlock();
      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.OrderedBy">
            <summary>
            Gets or sets the ID of the user who ordered/requested this document.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.OrderDate"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.Reordered">
            <summary>
            Gets or sets whether the document has been re-ordered.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ReorderDate">
            <summary>
            Gets or sets the date the document was re-ordered.
            </summary>
            <remarks>If the document has not been re-ordered, this property will be null; otherwise,
            it will be a DateTime value. To mark a document as having been re-ordered, set this
            property to the approrpiate date. Once reordered, the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.DueDate">DueDate</see>
            and <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ExpirationDate">ExpirationDate</see> will be reset accordingly.
            <note type="implementnotes">Because of a limitation in the way COM marshals date values
            when exposed as a VARIANT, COM-based clients should call the <c>SetReorderDate()</c> method
            to set this property.</note>
            </remarks>
            <example>
The following code locates all past-due documents in a loan and, for each,
sets the re-order date to today.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the next loan in the loop
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");

      // Lock the loan
      loan.Lock();

      // Loop over the list of supporting documents
      foreach (TrackedDocument doc in loan.Log.TrackedDocuments)
      {
         // Check if the document has been ordered 
         if ((doc.OrderDate != null) && (doc.DueDays > 0))
         {
            // Check if it's past due
            if (((DateTime) doc.DueDate < DateTime.Now) && (doc.ReceivedDate == null))
            {
               // Re-order the document
               doc.ReorderDate = DateTime.Now;
               Console.WriteLine("The document \"" + doc.Title + "\" has been reordered and is now due on " + doc.DueDate);
            }
         }
      }

      loan.Commit();
      loan.Unlock();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ReorderedBy">
            <summary>
            Gets or sets the ID of the user who ordered/requested this document.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ReorderDate"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.DueDays">
            <summary>
            Gets or sets the number of days from the order date until the document is due.
            </summary>
            <remarks>Modifying this property will cause the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.DueDate">DueDate</see>
            to be reset based on the number of days entered.</remarks>
            <example>
The following code sets the order date to today for all Document Events 
associated with the "Submittal" milestone. Once the OrderDate property has been
set, the DueDate property is printed to indicate when the document should
be received.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan and lock it for writing
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");
      loan.Lock();
   
      // Look for any supporting document which is overdue
      foreach (TrackedDocument doc in loan.Log.TrackedDocuments)
      {
         // Mark all of the documents associated with the Submittal milestone as ordered
         if (doc.MilestoneName == session.Loans.Milestones.Submittal.Name)
         {
            // Set the order date to today and allow 10 days to be received
            doc.OrderDate = DateTime.Now;
            doc.DueDays = 10;

            // Write a message showing the date by which the document is due
            Console.WriteLine("Document \"" + doc.Title + "\" has been ordered and is due on " + doc.DueDate);
         }
      }

      loan.Commit();
      loan.Unlock();
      loan.Close();
   
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.Due">
            <summary>
            Indicates if the document is currently in the Due/Expected state.
            </summary>
            <remarks>A document is due if it has a valid <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.DueDate"/>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.DueDate">
            <summary>
            Gets the date on which the document is due.
            </summary>
            <remarks>This property will return null until a valid <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.OrderDate">OrderDate</see>
            is set for the document. Once the OrderDate is set, this property is calculated by adding to
            it the value of the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.DueDays">DueDays</see> property.</remarks>
            <example>
The following code retrieves the set of all supporting documents associated
with a loan and generates a report for all documents that are overdue.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan for reading
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");

      // Look for any supporting document which is overdue
      foreach (TrackedDocument doc in loan.Log.TrackedDocuments)
      {
         if (doc.DueDate != null)
         {
            if ((DateTime) doc.DueDate < DateTime.Now)
               Console.WriteLine("The document \"" + doc.Title + "\" is overdue!");
         }
      }

      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.PastDue">
            <summary>
            Gets a flag indicating if this document is past due.
            </summary>
            <remarks>
            If the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.DueDate"/> property is null, this property will always
            return <c>false</c>. Otherwise, it will return true if the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.DueDate"/>
            is prior to the current date and the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ReceivedDate"/> is null.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.Received">
            <summary>
            Gets or sets whether the document has been received.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ReceivedDate">
            <summary>
            Gets or sets the date the document was received.
            </summary>
            <remarks>If the document has not been received, this property will be null; otherwise,
            it will be a DateTime value. To mark a document as not having been received, set this
            property to null.
            <note type="implementnotes">Because of a limitation in the way COM marshals date values
            when exposed as a VARIANT, COM-based clients should call the <c>SetReceivedDate()</c> method
            to set this property.</note>
            </remarks>
            <example>
The following code locates all past-due documents in a loan and, for each,
sets the re-order date to today.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the next loan in the loop
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");

      // Lock the loan
      loan.Lock();

      // Loop over the list of supporting documents
      foreach (TrackedDocument doc in loan.Log.TrackedDocuments)
      {
         // Check if the document has been ordered 
         if ((doc.OrderDate != null) && (doc.DueDays > 0))
         {
            // Check if it's past due
            if (((DateTime) doc.DueDate < DateTime.Now) && (doc.ReceivedDate == null))
            {
               // Re-order the document
               doc.ReorderDate = DateTime.Now;
               Console.WriteLine("The document \"" + doc.Title + "\" has been reordered and is now due on " + doc.DueDate);
            }
         }
      }

      loan.Commit();
      loan.Unlock();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ReceivedBy">
            <summary>
            Gets or sets the ID of the user who has marked the document as received.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ReceivedDate"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.Reviewed">
            <summary>
            Gets or sets whether the document has been reviewed.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ReviewedDate">
            <summary>
            Gets or sets the date the document was reviewed
            </summary>
            <remarks>If the document has not been reviewed, this property will be null; otherwise,
            it will be a DateTime value. To mark a document as not having been reviewed, set this
            property to null.
            <note type="implementnotes">Because of a limitation in the way COM marshals date values
            when exposed as a VARIANT, COM-based clients should call the <c>SetReviewedDate()</c> method
            to set this property.</note>
            </remarks>
            <!-- No matching elements were found for the following include tag --><include file="TrackedDocument.xml" path="Examples/Example[@name=&quot;TrackedDocument.ReviewedDate&quot;]/*"/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ReviewedBy">
            <summary>
            Gets or sets the ID of the user who has marked the document as reviewed.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ReviewedDate"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ShippingReady">
            <summary>
            Gets or sets whether the document has been marked as ready for shipping.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ShippingReadyDate">
            <summary>
            Gets or sets the date the document was marked as ready for shipping.
            </summary>
            <remarks>If the document has not been marked as Ready for Shipping, this property will be null; otherwise,
            it will be a DateTime value. To mark a document as not having been received, set this
            property to null.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ShippingReadyBy">
            <summary>
            Gets or sets the ID of the user who has marked the document as ready to be shipped.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ShippingReadyDate"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.UnderwritingReady">
            <summary>
            Gets or sets whether the document has been marked as ready for underwriting.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.UnderwritingReadyDate">
            <summary>
            Gets or sets the date the document was marked as ready for underwriting.
            </summary>
            <remarks>If the document has not been marked as Ready for Underwriting, this property will be null; otherwise,
            it will be a DateTime value. To mark a document as not having been received, set this
            property to null.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.UnderwritingReadyBy">
            <summary>
            Gets or sets the ID of the user who has marked the document as ready to for underwriting.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.UnderwritingReadyDate"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.Archived">
            <summary>
            Gets or sets whether the document has been archived.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ArchiveDate">
            <summary>
            Gets or sets the date the document was re-ordered.
            </summary>
            <remarks>If the document has not been re-ordered, this property will be null; otherwise,
            it will be a DateTime value. To mark a document as having been re-ordered, set this
            property to the approrpiate date. Once reordered, the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.DueDate">DueDate</see>
            and <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ExpirationDate">ExpirationDate</see> will be reset accordingly.
            <note type="implementnotes">Because of a limitation in the way COM marshals date values
            when exposed as a VARIANT, COM-based clients should call the <c>SetReorderDate()</c> method
            to set this property.</note>
            </remarks>
            <example>
The following code locates all past-due documents in a loan and, for each,
sets the re-order date to today.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the next loan in the loop
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");

      // Lock the loan
      loan.Lock();

      // Loop over the list of supporting documents
      foreach (TrackedDocument doc in loan.Log.TrackedDocuments)
      {
         // Check if the document has been ordered 
         if ((doc.OrderDate != null) && (doc.DueDays > 0))
         {
            // Check if it's past due
            if (((DateTime) doc.DueDate < DateTime.Now) && (doc.ReceivedDate == null))
            {
               // Re-order the document
               doc.ReorderDate = DateTime.Now;
               Console.WriteLine("The document \"" + doc.Title + "\" has been reordered and is now due on " + doc.DueDate);
            }
         }
      }

      loan.Commit();
      loan.Unlock();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ArchivedBy">
            <summary>
            Gets or sets the ID of the user who archived this document.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ArchiveDate"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ExpirationDays">
            <summary>
            Gets or sets the number of days from the date the document is received until the 
            document is considered to be expired.
            </summary>
            <remarks>Modifying this property will cause the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ExpirationDate">ExpirationDate</see>
            to be reset based on the number of days entered.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ExpirationDate">
            <summary>
            Gets the date on which the document expires.
            </summary>
            <remarks>This property will return null if the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ReceivedDate">ReceivedDate</see> 
            has not been set. Once the document is received, this property will be set 
            by adding the number of days specified in the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ExpirationDays">ExpirationDays</see>
            property to the ReceivedDate.</remarks>
            <example>
The following code generates a list of all of the expired conditions for
a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Logging;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open and lock the next loan in the loop
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Sample");

      // Loop over the list of supporting documents
      foreach (TrackedDocument doc in loan.Log.TrackedDocuments)
      {
         // Locate any documents which are expired conditions for the loan
         if ((doc.ExpirationDate != null) &&
            ((DateTime) doc.ExpirationDate < DateTime.Now))
         {
            Console.WriteLine("The document \"" + doc.Title + "\" is an expired condition for this loan");
         }
      }

      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.Expired">
            <summary>
            Gets a flag indicating if this document has expired.
            </summary>
            <remarks>
            If the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ExpirationDate"/> property is null, this property will always
            return <c>false</c>. Otherwise, it will return true if the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ExpirationDate"/>
            is prior to the current date.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.LastAccessedBy">
            <summary>
            Gets the UserID that last accessed this document.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.LastAccessDate">
            <summary>
            Gets the date on which the document was last accessed.
            </summary>
            <remarks>This property will return null if the document has not yet been accessed.
            Once the document has been accessed, this property will indicate the date of that event.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.IsAlert">
            <summary>
            Indicates if this TrackedDocument is in alert status.
            </summary>
            <remarks>A TrackedDocument is considered to be an alert if either of the following
            conditions are met:
            <list type="bullet">
            <item>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ReceivedDate"/> is null and the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.DueDate"/> is on or prior to today.</item>
            <item>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.ExpirationDate"/> is on or prior to today.</item>
            </list>
            Note that these conditions differ slightly from the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.PastDue"/> and
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.Expired"/> properties, which will not return <c>true</c> until the 
            respective dates are in the past.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.RoleAccessList">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.TrackedDocument.RoleAccessList"/> that defines which roles have access to the document.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition">
            <summary>
            Represents the tracking information for an underwriting condition.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.IUnderwritingCondition">
            <summary>
            Interface for EDMTransaction class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.EntryType">
            <summary>
            Gets the type of log entry represented by the object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.Category">
            <summary>
            Gets or sets the category of the condition.
            </summary>
            <remarks>Valid values recognized by Encompass are: Assets, Credit, Income, Legal,
            Property and Misc.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.PriorTo">
            <summary>
            Gets or sets the event prior to which the condition must be satisfied.
            </summary>
            <remarks>Valid values recognized by Encompass are: PTA, PTF, PTD or AC.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.Received">
            <summary>
            Indicates if the condition has been marked as received.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.DateReceived">
            <summary>
            Gets or sets the date the condition was received.
            </summary>
            <remarks>To clear the received state of the condition, set this property to <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.ReceivedBy">
            <summary>
            Gets or sets the ID of the user who has received this Condition.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.DateReceived"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.Reviewed">
            <summary>
            Indicates if the condition has been marked as received.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.DateReviewed">
            <summary>
            Gets or sets the date the condition was reviewed.
            </summary>
            <remarks>To clear the reviewed state of the condition, set this property to <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.ReviewedBy">
            <summary>
            Gets or sets the ID of the user who has reviewed this Condition.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.DateReviewed"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.Cleared">
            <summary>
            Gets or sets whether the condition has been cleared
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.DateCleared">
            <summary>
            Gets or sets the date the condition was cleared.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.ClearedBy">
            <summary>
            Gets or sets the ID of the user who has cleared this Condition.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.DateCleared"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.Waived">
            <summary>
            Indicates if the condition has been marked as waived.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.DateWaived">
            <summary>
            Gets or sets the date the condition was waived.
            </summary>
            <remarks>To clear the waived state of the condition, set this property to <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.WaivedBy">
            <summary>
            Gets or sets the ID of the user who has cleared this Condition.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.DateWaived"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.Rejected">
            <summary>
            Indicates if the condition has been marked as rejected.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.DateRejected">
            <summary>
            Gets or sets the date the condition was rejected.
            </summary>
            <remarks>To clear the rejected state of the condition, set this property to <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.RejectedBy">
            <summary>
            Gets or sets the ID of the user who has rejected this Condition.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.DateRejected"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.Fulfilled">
            <summary>
            Indicates if the condition has been marked as fulfilled.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.DateFulfilled">
            <summary>
            Gets or sets the date the condition was fulfilled.
            </summary>
            <remarks>To clear the fulfilled state of the condition, set this property to <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.FulfilledBy">
            <summary>
            Gets or sets the ID of the user who has fulfilled this Condition.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.DateFulfilled"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.ForInternalUse">
            <summary>
            Gets or sets whether the condition is used for internal display.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.ForExternalUse">
            <summary>
            Gets or sets whether the condition is used for external display.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.ForRole">
            <summary>
            Gets or sets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> which this conditiond is meant for.
            </summary>
            <remarks>If no role has been selected, this property will return <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.AllowToClear">
            <summary>
            Gets or sets if a user in the specified <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.ForRole"/> is allowed to clear the condition.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.Requested">
            <summary>
            Indicates if the condition has been marked as Requested.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.DateRequested">
            <summary>
            Gets or sets the date the condition was Requested.
            </summary>
            <remarks>To clear the Requested state of the condition, set this property to <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.RequestedBy">
            <summary>
            Gets or sets the ID of the user who has Requested this Condition.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.DateRequested"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.Rerequested">
            <summary>
            Indicates if the condition has been marked as Rerequested.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.DateRerequested">
            <summary>
            Gets or sets the date the condition was Rerequested.
            </summary>
            <remarks>To clear the Rerequested state of the condition, set this property to <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.RerequestedBy">
            <summary>
            Gets or sets the ID of the user who has Rerequested this Condition.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Logging.UnderwritingCondition.DateRerequested"/> property must be set prior to setting this property.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.AlertType">
            <summary>
            The different types of alerts possible on an item in the Pipeline
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.MilestoneCompletion">
            <summary>An alert indicating that a milestone has been completed.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.Conversation">
            <summary>An follow-up alert related to a perviously held conversation</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.Document">
            <summary>An alert related to the expected arrival or expiration of a document</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.EscrowDisbursement">
            <summary>Indicates that a servicing distribution from escrow is due.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.Reminder">
            <summary>An reminder alert related to a milestone task entry</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.Milestone">
            <summary>An alert caused by the expiration (or pending expiration) of a milestone</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.BorrowerPayment">
            <summary>Indicates that a borrower payment is past due when servicing a loan.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.StatementDelivery">
            <summary>Indicates that a statement is past due to be printed/mailed when servicing a loan.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.PurchaseAdvice">
            <summary>Indicates that the purchase advice form is incomplete.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.RateLockConfirmation">
            <summary>An alert related to the confirmation of a previously requested rate lock.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.RateLock">
            <summary>An alert related to the pending expiration of a rate lock</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.InvestorShipping">
            <summary>An alert indicating that the loan is due to be shipped to the investor.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.InvestorRegistration">
            <summary>An alert indicating that a rate has been registered with an investor.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.Condition">
            <summary>An alert indicating a condition is expiring or past due.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.DocumentExpiration">
            <summary>An alert indicating that a document has expired.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.RateLockRequest">
            <summary>An alert indicating a rate lock has been requested.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.RateLockDenied">
            <summary>Indicates that a rate lock request has been denied.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.MilestoneTask">
            <summary>Indicates that a milestone task is expected or past due.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.RediscloseTIL">
            <summary>A redisclosure of the TIL is required for regulatory purposes.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.InitialDisclosures">
            <summary>You are required to make initial disclosures to the borrower.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.GFEExpires">
            <summary>The GFE is set to expire.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.RediscloseGFERateLocked">
            <summary>A redisclosure of the GFE is required after the rate is locked.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.HUD1ToleranceViolation">
            <summary>A variation between the HUD1 and GFE that is outside of allowed tolerances is detected.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.ClosingDateViolation">
            <summary>The estimated closing date is earlier than the earliest closing date allowed for compliance.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.RediscloseGFEChangedCircumstances">
            <summary>A redisclosure of the GFE is required after changed circumstances.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertType.ComplianceReview">
            <summary>Indicates that the loan has failed a comprehensive compliance review.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.AlertStatus">
            <summary>
            The possible status of a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineAlert"/> object.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertStatus.None">
            <summary>No status is provided</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertStatus.Due">
            <summary>The specified item is due to be completed or received</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertStatus.Expires">
            <summary>The specified item is set to expire</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertStatus.Eligible">
            <summary>The alert signals eligibility for a special offer</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.AlertStatus.Received">
            <summary>The alert signals that a special offer has been received</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineAlert">
            <summary>
            Represents an alert on a loan in the Pipeline.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IPipelineAlert">
            <summary>
            Interface for PipelineAlert class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PipelineAlert.Type">
            <summary>
            Gets the type of alert represented by this object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PipelineAlert.Source">
            <summary>
            Gets the source of the event.
            </summary>
            <remarks>The source of the event will depend on the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.PipelineAlert.Type"/> of 
            event represented by this object. For example, a Milestone event's source
            will be the name of the Milestone which has triggered an event.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PipelineAlert.Status">
            <summary>
            Gets the status of the event.
            </summary>
            <remarks>The status of the event will depend on the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.PipelineAlert.Type"/> of 
            event represented by this object.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PipelineAlert.WorkflowRole">
            <summary>
            Gets the target role for an alert
            </summary>
            <remarks>
            The target of an alert is the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> which is intended to handle the alert
            and resolve it. For example, for a reminder alert, it is the role that should
            take action on the reminder. This property may be <c>null</c> for alerts which do not
            target a specific role.
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PipelineAlert.Date">
            <summary>
            Gets the date of the triggering event, if any.
            </summary>
            <remarks>The alert date is the date of the event which has triggered the
            alert. For example, a Milestone alert's date will be the date the milestone
            is/was expeted to be completed.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineAlerts">
            <summary>
            Summary description for PipelineAlerts.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IPipelineAlerts">
            <summary>
            Interface for PipelineAlert class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.PipelineAlerts.GetEnumerator">
            <summary>
            Provides an enumerator for the collection.
            </summary>
            <returns>An object implementing IEnumerator for iterating over the collection.
            </returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.PipelineAlerts.ToString">
            <summary>
            Provides a text description of all of the alerts on the loan.
            </summary>
            <returns>Returns a text description of each alert, seperated by
            a CR/LF pair.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PipelineAlerts.Count">
            <summary>
            Gets the number of alerts in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PipelineAlerts.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineAlert"/> from the collection based on index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineSortOrder">
            <summary>
            Enumeration of the different possible pipeline sort orders.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.PipelineSortOrder.None">
            <summary>No sort is applied to the pipeline elements.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.PipelineSortOrder.Alert">
            <summary>Items with current alerts are placed first in the sort order.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.PipelineSortOrder.LastName">
            <summary>Items are sorted based on the borrower's last name.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.PipelineSortOrder.Milestone">
            <summary>Items are sorted based on the current milestone, with the earliest milestones first.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.PipelineSortOrder.RateLock">
            <summary>Items are sorted based on rate lock date.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineCursor">
            <summary>
            A PipelineCursor represents a server-side cursor for a collection of
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineData"/> objects.
            </summary>
            <remarks>Like all objects that derive from <see cref="T:EllieMae.Encompass.Cursors.Cursor"/>,
            you should invoke the Close() method on this object when you are done using
            it. Otherwise, a memory leak will occur on the Encompass Server.
            </remarks>
            <example>
The following code retrieves a PipelineCursor for the "My Pipeline" folder
and then displays the first 20 items to the user.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Query for the pipeline data from the "My Pipeline" folder. Use the
      // "using" statement to ensure that the cursor is properly disposed
      // so all server-side resources are released.
      LoanFolder fol = session.Loans.Folders["My Pipeline"];
      
      using (PipelineCursor pc = fol.OpenPipeline(PipelineSortOrder.LastName))
      {
         // Fetch the first 20 items to display to the user (or fewer of there are
         // less than 20 in the cursor).
         int numItems = pc.Count;
         if (numItems > 20) numItems = 20;

         foreach (PipelineData pdata in pc.GetItems(0, numItems))
            Console.WriteLine(pdata.LoanIdentity.LoanName + " is in the "
               + pdata["CurrentMilestoneName"] + " milestone"
               + " and was last modified " + pdata["LastModified"]);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IPipelineCursor">
            <summary>
            Interface for Cursor class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.PipelineCursor.GetItem(System.Int32)">
            <summary>
            Retrieves the item from the cursor at the specified index.
            </summary>
            <param name="index">Index of the item to be retrieved (with 0 as the first
            index).</param>
            <returns>Returns the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineData"/> object.</returns>
            <example>
The following code opens a PipelineCursor to find a specific loan using
the loan's GUID. It then retrieves the folder and loan name of the loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Construct the criteria to retrieve the pipeline information for a loan
      // with a specific GUID.
      StringFieldCriterion cri = new StringFieldCriterion();
      cri.FieldName = "Loan.Guid";
      cri.Value = "{1fcf4303-4759-4a50-9eaa-22a6faf94e02}";
      
      // Open the cursor using the selected criteria. There's no need to
      // sorth the results since there should be at most one hit.
      using (PipelineCursor pc = session.Loans.QueryPipeline(cri, PipelineSortOrder.None))
      {
         // Check if we got a result
         if (pc.Count == 0)
            Console.WriteLine("Loan not found");
         else
         {
            // Retrieve the one and only match for this query
            PipelineData pdata = pc.GetItem(0);

            Console.WriteLine("The loan " + pdata.LoanIdentity.LoanName + " is in the "
               + "folder '" + pdata.LoanIdentity.LoanFolder + "'.");
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.PipelineCursor.GetItems(System.Int32,System.Int32)">
            <summary>
            Retrieves a subset of the cursor items starting at a specified index.
            </summary>
            <param name="startIndex">The index at which to start the subset.</param>
            <param name="count">The number of items to retrieve</param>
            <returns>Returns an array containing the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineData"/> objects 
            within the specified range</returns>
            <example>
The following code retrieves a PipelineCursor for the "My Pipeline" folder
and then displays the first 20 items to the user.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Query for the pipeline data from the "My Pipeline" folder. Use the
      // "using" statement to ensure that the cursor is properly disposed
      // so all server-side resources are released.
      LoanFolder fol = session.Loans.Folders["My Pipeline"];
      
      using (PipelineCursor pc = fol.OpenPipeline(PipelineSortOrder.LastName))
      {
         // Fetch the first 20 items to display to the user (or fewer of there are
         // less than 20 in the cursor).
         int numItems = pc.Count;
         if (numItems > 20) numItems = 20;

         foreach (PipelineData pdata in pc.GetItems(0, numItems))
            Console.WriteLine(pdata.LoanIdentity.LoanName + " is in the "
               + pdata["CurrentMilestoneName"] + " milestone"
               + " and was last modified " + pdata["LastModified"]);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineData">
            <summary>
            Represents summary information for a single Loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IPipelineData">
            <summary>
            Interface for PipelineData class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.PipelineData.GetFieldNames">
            <summary>
            Returns the names of the fields contained in the PipelineData.
            </summary>
            <returns>Returns a StringList containing the names of the fields in the PipelineData
            object. These field names can be used to retrieve field values from the data object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.PipelineData.GetAccessRights">
            <summary>
            Returns the current user's effective access rights to this loan.
            </summary>
            <returns>The rights to this loan.</returns>
            <remarks>This method requires a round trip to the Encompass Server and
            should be considered expensive to invoke.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PipelineData.Item(System.String)">
            <summary>
            Retrieves the data for a specified summary field.
            </summary>
            <remarks>
            The set of summary field available to the user correponds to fields which
            can be used to query for a loan. However, when specifying the field name, the
            leading portion of the canonical name should be omitted.
            <p>For example, the canonical name for the field containing the borrower's
            last name is "Loan.BorrowerLastName". To access the last name in the 
            PipelineData class, simply use the field name "BorrowerLastName".</p>
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PipelineData.LoanIdentity">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.PipelineData.LoanIdentity"/> for the current loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PipelineData.Alerts">
            <summary>
            Gets the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineAlert"/> objects for this
            loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.PipelineData.CurrentLock">
            <summary>
            Returns the information for the current lock held on the loan.
            </summary>
            <remarks>If no lock is currently held, this property will return <c>null</c>.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Role">
            <summary>
            A Role represents the business function that a user can take within a Loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IRole">
            <summary>
            Interface for Role class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Role.ToString">
            <summary>
            Provides a string representation of a Role.
            </summary>
            <returns>Returns the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Role.Name"/> of the Role.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Role.GetHashCode">
            <summary>
            Provides a Hash code for the Role object.
            </summary>
            <returns>Returns the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Role.ID"/> of the Role.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Role.Equals(System.Object)">
            <summary>
            Compares two Roles for equality based on their Role IDs.
            </summary>
            <param name="obj">The Role to which to compare the current Role.</param>
            <returns>Returns <c>true</c> if the objects represent the same Role, <c>false</c> otherwise.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Role.ID">
            <summary>
            Returns the ID for the Role.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Role.Name">
            <summary>
            Gets the display name for the Role.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Role.Abbreviation">
            <summary>
            Gets the two-character abbreviation for the Role.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Role.Protected">
            <summary>
            Gets a flag indicating if the role is "protected", meaning that certain rights cannot be revoked
            once granted.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Role.EligiblePersonas">
            <summary>
            Returns the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/>s which are eligible for this role.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Role.EligibleGroups">
            <summary>
            Returns the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.UserGroup"/>s which are eligible for this role.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.FixedRole">
            <summary>
            Represents one of the fixed roles within Encompass.
            </summary>
            <remarks>Encompass defines several fixed roles which are used to determine certain behaviors
            within the loan process. In the Broker Edition, these fixed roles map to the corresponding
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> objects of the same name. In the Banker Edition, the administrator
            can set their own mapping of the fixed roles to their customized roles.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Roles">
            <summary>
            Provides access to the collection of defined Roles.
            </summary>
            <example>
      The following code retrieves the Loan Officer role using its abbreviation,
      LO, and assigns a user to that role within the loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");
      loan.Lock();

      // Retrieve the Loan Officer role (LO)
      Role role = session.Loans.Roles.GetRoleByAbbrev("LO");

      // Retrieve the desired user for the role
      User user = session.Users.GetUser("jsmith");

      // Assign the user to the specified role
      loan.Associates.AssignUser(role, user);

      // Save and close the loan file
      loan.Commit();
      loan.Close();
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.IRoles">
            <summary>
            Interface for Roles class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Roles.GetRoleByID(System.Int32)">
            <summary>
            Returns a role based on its role ID.
            </summary>
            <param name="roleId">The ID of the role to be returned.</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> object with the given ID, or <c>null</c>
            if no role is found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Roles.GetRoleByAbbrev(System.String)">
            <summary>
            Returns a role based on its 2-letter abbreviation.
            </summary>
            <param name="abbrev">The 2-letter abbreviation for the role.</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> object with the abbreviation, or <c>null</c>
            if no role is found.</returns>
            <example>
      The following code retrieves the Loan Officer role using its abbreviation,
      LO, and assigns a user to that role within the loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");
      loan.Lock();

      // Retrieve the Loan Officer role (LO)
      Role role = session.Loans.Roles.GetRoleByAbbrev("LO");

      // Retrieve the desired user for the role
      User user = session.Users.GetUser("jsmith");

      // Assign the user to the specified role
      loan.Associates.AssignUser(role, user);

      // Save and close the loan file
      loan.Commit();
      loan.Close();
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Roles.GetRoleByName(System.String)">
            <summary>
            Returns a role based on its name.
            </summary>
            <param name="name">The name of the role.</param>
            <returns>Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> object with the given name, or <c>null</c>
            if no role is found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Roles.GetFixedRole(EllieMae.Encompass.BusinessObjects.Loans.FixedRole)">
            <summary>
            Retrieves one of the "fixed" roles from Encompass.
            </summary>
            <param name="roleType">The type of the fixed role to retrieve.</param>
            <returns>The mapped <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> for the role type.</returns>
            <remarks>In the Banker Edition, this method may return <c>null</c> if no role is mapped to the specified
            fixed role type. In the Broker Edition, this method will always return a non-null value.</remarks>
            <example>
      The following code removes the Loan Officer assignment from the loan,
      clearing out any existing user or user group assigned to that role.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanManager
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Open a loan from the My Pipeline folder and retrieve the information on the current lock
      Loan loan = session.Loans.Folders["My Pipeline"].OpenLoan("Example#1");
      loan.Lock();

      // Find the Role object that is mapped to the fixed Loan Officer role, if any
      Role role = session.Loans.Roles.GetFixedRole(FixedRole.LoanOfficer);

      if (role != null)
      {
        // Fetch the users in the specified role
        LoanAssociateList los = loan.Associates.GetAssociatesByRole(role);

        // Clear the assigned user or user group from the role
        foreach (LoanAssociate lo in los)
          lo.Unassign();
      }

      // Save and close the loan file
      loan.Commit();
      loan.Close();
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Roles.Refresh">
            <summary>
            Refreshes the role list if it has become out-of-date.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Roles.GetEnumerator">
            <summary>
            Provides an enumerator for the collection of Roles.
            </summary>
            <returns>A enumerator for iterating over the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> objects
            in the collection.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Roles.Count">
            <summary>
            Gets the number of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> objects in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Roles.Item(System.Int32)">
            <summary>
            Returns a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> from the collection by index.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Roles.Others">
            <summary>
            Returns a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role"/> object which represents the "Others" role when detemining
            access rights to Document Tracking items within a loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Roles.FileStarter">
            <summary>
            Returns the FileStarter Role.
            </summary>
            <remarks>The File Starter (FS) role is the role automatically assigned to the user
            who creates the loan.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursement">
            <summary>
            Represents an disbursement from the escrow account.
            </summary>
            <remarks>A single EscrowDisbursement object is used to indicate a payment of 
            the borrower's insurance, taxes, etc. from the escrow account.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.IEscrowDisbursement">
            <summary>
            Interface for EscrowDisbursement class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursement.IsReversed">
            <summary>
            Determines if the current disbursement has been reversed.
            </summary>
            <returns>Returns <c>true</c> if the disbursement has been reversed, <c>false</c> otherwise.</returns>
            <remarks>You can use the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursement.GetReversal"/> method to retrieve the 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursementReversal"/> object if this property returns <c>true</c>.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursement.GetReversal">
            <summary>
            Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursementReversal"/> object for a disbursement which has been reversed.
            </summary>
            <returns>Returns the reversal object if the disbursement has been reversed or <c>null</c> if the
            disbursement has not been reversed.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursement.Reverse(System.DateTime)">
            <summary>
            Reverses the disbursement and restores the balance of the escrow account.
            </summary>
            <param name="reversalDate">The date on which the reversal took place.</param>
            <returns>Returns an <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursementReversal"/> object representing
            the current reversal.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursement.DisbursementNumber">
            <summary>
            Gets the index of this disbursement.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursement.DisbursementDueDate">
            <summary>
            Gets or sets the date on which the disbursement is due.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursement.DisbursementType">
            <summary>
            Gets or sets the type of disbursement being made.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursement.InstitutionName">
            <summary>
            Gets or sets the name of the institution to which the disbursement is being made.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursement.Comments">
            <summary>
            Gets or sets additional comments for the transaction.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursementReversal">
            <summary>
            Represents an escrow disbursement servicing transaction.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.IEscrowDisbursementReversal">
            <summary>
            Interface for ServicingTransaction class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursementReversal.GetDisbursement">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursement"/> that was reversed by this transaction.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursementReversal.TransactionType">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransactionType"/> for the transaction.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowInterest">
            <summary>
            Represents an escrow disbursement servicing transaction.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.IEscrowInterest">
            <summary>
            Interface for EscrowInterest class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowInterest.Comments">
            <summary>
            Gets or sets additional comments for the transaction.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.LoanServicing">
            <summary>
            Provides an interface into the servicing features on a loan.
            </summary>
            <example>
      The following code demonstrates how to activate the servicing activities
      for a loan and display the payment schedule for the loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Set the first payment date on the loan. This is a required field before
      // starting servicing since it determines the payment schedule for the loan
      loan.Fields["682"].Value = "6/1/2008";

      // First, activate the servicing if not already started. This will calculate
      // the initial payment schedule for the loan.
      if (!loan.Servicing.IsStarted())
        loan.Servicing.Start();

      // Display the payment schedule on the screen, showing the date of each
      // payment along with the amount of principal and interest due.
      PaymentSchedule schedule = loan.Servicing.GetPaymentSchedule();

      foreach (ScheduledPayment payment in schedule.Payments)
        Console.WriteLine(payment.DueDate + ": P = " + payment.Principal + ", I = " + payment.Interest);

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ILoanServicing">
            <summary>
            Interface for LoanServicing class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.LoanServicing.IsStarted">
            <summary>
            Determines if loan servicing has been started for this loan.
            </summary>
            <returns>Returns <c>true</c> if servicing has been previously enabled, false otherwise.</returns>
            <example>
      The following code demonstrates how to activate the servicing activities
      for a loan and display the payment schedule for the loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Set the first payment date on the loan. This is a required field before
      // starting servicing since it determines the payment schedule for the loan
      loan.Fields["682"].Value = "6/1/2008";

      // First, activate the servicing if not already started. This will calculate
      // the initial payment schedule for the loan.
      if (!loan.Servicing.IsStarted())
        loan.Servicing.Start();

      // Display the payment schedule on the screen, showing the date of each
      // payment along with the amount of principal and interest due.
      PaymentSchedule schedule = loan.Servicing.GetPaymentSchedule();

      foreach (ScheduledPayment payment in schedule.Payments)
        Console.WriteLine(payment.DueDate + ": P = " + payment.Principal + ", I = " + payment.Interest);

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.LoanServicing.Start">
            <summary>
            Starts the servicing process for the loan.
            </summary>
            <remarks><p>The Start method must be called once on the loan prior to processing transactions
            to enable the servicing features. If Start is called a second time, it will be ignored.</p>
            <p>This method is supported in Banker Edition only.</p>
            </remarks>
            <example>
      The following code demonstrates how to activate the servicing activities
      for a loan and display the payment schedule for the loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Set the first payment date on the loan. This is a required field before
      // starting servicing since it determines the payment schedule for the loan
      loan.Fields["682"].Value = "6/1/2008";

      // First, activate the servicing if not already started. This will calculate
      // the initial payment schedule for the loan.
      if (!loan.Servicing.IsStarted())
        loan.Servicing.Start();

      // Display the payment schedule on the screen, showing the date of each
      // payment along with the amount of principal and interest due.
      PaymentSchedule schedule = loan.Servicing.GetPaymentSchedule();

      foreach (ScheduledPayment payment in schedule.Payments)
        Console.WriteLine(payment.DueDate + ": P = " + payment.Principal + ", I = " + payment.Interest);

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.LoanServicing.Recalculate">
            <summary>
            Forces a recalculation of the interim servicing payment schedule.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.LoanServicing.GetPaymentSchedule">
            <summary>
            Gets the current payment schedule for the loan.
            </summary>
            <returns>Returns a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule"/> object with the loan's current payment 
            schedule.</returns>
            <example>
      The following code demonstrates how to activate the servicing activities
      for a loan and display the payment schedule for the loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Set the first payment date on the loan. This is a required field before
      // starting servicing since it determines the payment schedule for the loan
      loan.Fields["682"].Value = "6/1/2008";

      // First, activate the servicing if not already started. This will calculate
      // the initial payment schedule for the loan.
      if (!loan.Servicing.IsStarted())
        loan.Servicing.Start();

      // Display the payment schedule on the screen, showing the date of each
      // payment along with the amount of principal and interest due.
      PaymentSchedule schedule = loan.Servicing.GetPaymentSchedule();

      foreach (ScheduledPayment payment in schedule.Payments)
        Console.WriteLine(payment.DueDate + ": P = " + payment.Principal + ", I = " + payment.Interest);

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.LoanServicing.Transactions">
            <summary>
            Gets the collection of servicing transactions from the loan.
            </summary>
            <example>
      The following code demonstrates how to add a new payment into the servicing
      history of a loan. It also displays the outstanding balance of the loan
      both before and after the payment is applied.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Servicing;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to enable editing
      loan.Lock();

      // Display the balance of the loan prior to the payment
      Console.WriteLine("Prior balance: " + loan.Fields["SERVICE.X57"].FormattedValue);

      // Add a new payment to the servicing history of the loan
      Payment pmt = loan.Servicing.Transactions.AddPayment(DateTime.Now);

      // Set the properties of the payment to match what was received
      pmt.Principal = 700;
      pmt.Interest = 1500;
      pmt.Escrow = 250;
      pmt.AdditionalPrincipal = 150;
      
      // Indicate the manner in which payment was made
      pmt.PaymentMethod = ServicingPaymentMethod.AutomatedClearingHouse;
      pmt.AccountHolder = "Janet T. Barnes";
      pmt.AccountNumber = "10339442-4";
      pmt.InstitutionName = "First Federated Bank";
      pmt.InstitutionRouting = "444444444";
      pmt.Reference = "AB3-4434-223";
      
      // Check the new balance due
      Console.WriteLine("New balance: " + loan.Fields["SERVICE.X57"].FormattedValue);

      // Save the loan to commit this new payment
      loan.Commit();

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.LoanServicingTransactions">
            <summary>
            Provides access to the collection of servicing transactions on a loan.
            </summary>
            <example>
      The following code demonstrates how to add a new payment into the servicing
      history of a loan. It also displays the outstanding balance of the loan
      both before and after the payment is applied.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Servicing;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to enable editing
      loan.Lock();

      // Display the balance of the loan prior to the payment
      Console.WriteLine("Prior balance: " + loan.Fields["SERVICE.X57"].FormattedValue);

      // Add a new payment to the servicing history of the loan
      Payment pmt = loan.Servicing.Transactions.AddPayment(DateTime.Now);

      // Set the properties of the payment to match what was received
      pmt.Principal = 700;
      pmt.Interest = 1500;
      pmt.Escrow = 250;
      pmt.AdditionalPrincipal = 150;
      
      // Indicate the manner in which payment was made
      pmt.PaymentMethod = ServicingPaymentMethod.AutomatedClearingHouse;
      pmt.AccountHolder = "Janet T. Barnes";
      pmt.AccountNumber = "10339442-4";
      pmt.InstitutionName = "First Federated Bank";
      pmt.InstitutionRouting = "444444444";
      pmt.Reference = "AB3-4434-223";
      
      // Check the new balance due
      Console.WriteLine("New balance: " + loan.Fields["SERVICE.X57"].FormattedValue);

      // Save the loan to commit this new payment
      loan.Commit();

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ILoanServicingTransactions">
            <summary>
            Interface for LoanServicingTransactions class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.LoanServicingTransactions.GetTransactionByID(System.String)">
            <summary>
            Retrieves a transaction by its unique ID.
            </summary>
            <param name="transId">The unique ID of the transaction to be retrieved.</param>
            <returns>Returns the requested <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction"/>.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.LoanServicingTransactions.GetTransactions(EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransactionType)">
            <summary>
            Retrieves all transactions of a specified type.
            </summary>
            <param name="transType">The type of transaction to be retrieved.</param>
            <returns>Returns a collection containing the requested transactions.</returns>
            <example>
      The following code demonstrates how to calculate the total amount
      of principal paid on the loan by adding the principal payments together
      from the servicing history.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Servicing;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Retrieve all Payment transactions from the loan and add up the total principal
      // paid (excluding any payment that's been reversed).
      ServicingTransactionList payments = loan.Servicing.Transactions.GetTransactions(ServicingTransactionType.Payment);

      decimal principalPaid = 0;
      foreach (Payment pmt in payments)
        if (!pmt.IsReversed())
          principalPaid += pmt.Principal;

      Console.WriteLine("Total Principal Paid: " + principalPaid);

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.LoanServicingTransactions.AddPayment(System.DateTime)">
            <summary>
            Adds a payment transaction to the servicing history.
            </summary>
            <param name="dateReceived">The date of the statement that corresponds to the payment.</param>
            <returns>Returns a new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment"/> object for this transaction.</returns>
            <remarks>The returned Payment object will be pre-populated with the balance and payment
            information based on the next scheduled payment. This data can then be overridden to match
            the actual payment details.</remarks>
            <example>
      The following code demonstrates how to add a new payment into the servicing
      history of a loan. It also displays the outstanding balance of the loan
      both before and after the payment is applied.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Servicing;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to enable editing
      loan.Lock();

      // Display the balance of the loan prior to the payment
      Console.WriteLine("Prior balance: " + loan.Fields["SERVICE.X57"].FormattedValue);

      // Add a new payment to the servicing history of the loan
      Payment pmt = loan.Servicing.Transactions.AddPayment(DateTime.Now);

      // Set the properties of the payment to match what was received
      pmt.Principal = 700;
      pmt.Interest = 1500;
      pmt.Escrow = 250;
      pmt.AdditionalPrincipal = 150;
      
      // Indicate the manner in which payment was made
      pmt.PaymentMethod = ServicingPaymentMethod.AutomatedClearingHouse;
      pmt.AccountHolder = "Janet T. Barnes";
      pmt.AccountNumber = "10339442-4";
      pmt.InstitutionName = "First Federated Bank";
      pmt.InstitutionRouting = "444444444";
      pmt.Reference = "AB3-4434-223";
      
      // Check the new balance due
      Console.WriteLine("New balance: " + loan.Fields["SERVICE.X57"].FormattedValue);

      // Save the loan to commit this new payment
      loan.Commit();

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.LoanServicingTransactions.AddDisbursement(System.DateTime,System.Decimal,EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingDisbursementType)">
            <summary>
            Adds a transaction for a disbursement from the escrow account.
            </summary>
            <param name="transDate">The date on which the disbursement was made.</param>
            <param name="disAmount">The amount of the disbursement.</param>
            <param name="disType">The type of disbursement made.</param>
            <returns>Returns as <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursement"/> object which represents
            the new transaction.</returns>
            <example>
      The following code demonstrates how to add an escrow disbursement to
      the servicing history of a loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Servicing;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to enable editing
      loan.Lock();

			// Create a new EscrowDisbursement transaction for the loan to represent
			// a $450 payment of hazard insurance.
			EscrowDisbursement disb = loan.Servicing.Transactions.AddDisbursement(DateTime.Now, 450, 
				ServicingDisbursementType.HazardInsurance);

			disb.InstitutionName = "State Farm Insurance";
			disb.DisbursementDueDate = DateTime.Parse("6/5/2008");
			disb.Comments = "Covers 3 month period from 6/1/08 - 8/31/08";

      // Save the loan to commit this new payment
      loan.Commit();

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.LoanServicingTransactions.AddEscrowInterest(System.DateTime,System.Decimal)">
            <summary>
            Adds a transaction for interest accrued on the escrow account balance.
            </summary>
            <param name="transDate">The date on which the interest was paid.</param>
            <param name="transAmount">The amount of the interest payment.</param>
            <returns>Returns an <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowInterest"/> object which represents
            the new transaction.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.LoanServicingTransactions.AddOtherTransaction(System.DateTime,System.Decimal)">
            <summary>
            Adds a user-defined transaction to the servicing history.
            </summary>
            <param name="transDate">The date on which the transaction occurred.</param>
            <param name="transAmount">The amount of the transaction.</param>
            <returns>Returns an <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.OtherTransaction"/> object which represents
            the new transaction.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.LoanServicingTransactions.Remove(EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction)">
            <summary>
            Removes a transaction from the servicing history of the loan.
            </summary>
            <param name="trans">The transaction to be removed.</param>
            <remarks>If the transaction being removed is a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment"/> (or
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursement"/>) transaction for which a
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentReversal"/> (or <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.EscrowDisbursementReversal"/>)
            transaction exists, the reversal transaction will also be removed from the
            servicing history as well.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.LoanServicingTransactions.GetEnumerator">
            <summary>
            Provides an enumerator to iterate over the set of servicing transactions.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.OtherTransaction">
            <summary>
            Represents an escrow disbursement servicing transaction.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.IOtherTransaction">
            <summary>
            Interface for ServicingTransaction class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.OtherTransaction.InstitutionName">
            <summary>
            Gets or sets the name of the institution for the transaction.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.OtherTransaction.InstitutionRouting">
            <summary>
            Gets or sets the routing information for the transaction.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.OtherTransaction.AccountNumber">
            <summary>
            Gets or sets the account number used for the transaction.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.OtherTransaction.Reference">
            <summary>
            Gets or sets the reference number for the transaction.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.OtherTransaction.Comments">
            <summary>
            Gets or sets additional comments for the transaction.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment">
            <summary>
            Represents a borrower payment against the loan balance.
            </summary>
            <example>
      The following code demonstrates how to record a payment into the servicing
      history of the loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Servicing;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Add a new payment to the servicing history of the loan.
      // The payment will be pre-populated with the data for the next scheduled payment.
      Payment pmt = loan.Servicing.Transactions.AddPayment(DateTime.Now);

      // Adjust the transaction amount to the amount actually received from the customer
      // If this is more than the scheduled payment amount, the balanced will be applied
      // as an additional principal payment. If it's less, the portion of the 
      // payment allocated to principal will be reduced by the difference.
      pmt.TransactionAmount = 2000;

      // Display the portion allocated to each balance
      Console.WriteLine("Principal: " + pmt.Principal);
      Console.WriteLine("Interest:  " + pmt.Interest);
      Console.WriteLine("Escrow:    " + pmt.Escrow);
      Console.WriteLine("Late Fee:  " + pmt.LateFee);
      Console.WriteLine("Addl Prin: " + pmt.AdditionalPrincipal);
      Console.WriteLine("Addl Escr: " + pmt.AdditionalEscrow);
      Console.WriteLine("Misc Fees: " + pmt.MiscFee);

      // Close the loan, releasing its resources
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.IPayment">
            <summary>
            Interface for ServicingTransaction class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.IsReversed">
            <summary>
            Determines if the current payment has been reversed.
            </summary>
            <returns>Returns <c>true</c> if the payment has been reversed, <c>false</c> otherwise.</returns>
            <remarks>You can use the <see cref="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.GetReversal"/> method to retrieve the 
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentReversal"/> object if this property returns <c>true</c>.</remarks>
            <example>
      The following code demonstrates how to calculate the total amount
      of principal paid on the loan by adding the principal payments together
      from the servicing history.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Servicing;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Retrieve all Payment transactions from the loan and add up the total principal
      // paid (excluding any payment that's been reversed).
      ServicingTransactionList payments = loan.Servicing.Transactions.GetTransactions(ServicingTransactionType.Payment);

      decimal principalPaid = 0;
      foreach (Payment pmt in payments)
        if (!pmt.IsReversed())
          principalPaid += pmt.Principal;

      Console.WriteLine("Total Principal Paid: " + principalPaid);

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.GetReversal">
            <summary>
            Returns the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentReversal"/> object for a payment which has been reversed.
            </summary>
            <returns>Returns the reversal object if the payment has been reversed or <c>null</c> if the
            payment has not been reversed.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.Reverse(System.DateTime)">
            <summary>
            Reverses the payment and restores the balance of the loan.
            </summary>
            <param name="reversalDate">The date on which the reversal took place.</param>
            <returns>Returns a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentReversal"/> object representing
            the current reversal.</returns>
            <example>
      The following code demonstrates how to reverse an existing payment in
      the servicing transaction history.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Servicing;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);

      // Lock the loan to enable editing
      loan.Lock();

      // Prints the current balance of the loan
      Console.WriteLine("Prior balance: " + loan.Fields["SERVICE.X57"].FormattedValue);

      // Retrieve the most recent payment from the servicing history
      ServicingTransactionList payments = loan.Servicing.Transactions.GetTransactions(ServicingTransactionType.Payment);
      Payment lastPayment = (Payment) payments[payments.Count - 1];

      // Write the amount of principal included in that payment
      Console.WriteLine("Last payment included $" + lastPayment.Principal + " in principal");

      // Reverse the payment, which will re-apply the principal back to the loan balance.
      lastPayment.Reverse(DateTime.Now);

      // Prints the updated balance of the loan.
      Console.WriteLine("New balance: " + loan.Fields["SERVICE.X57"].FormattedValue);

      // Save the loan back to the server
      loan.Commit();

      // Close the loan, releasing its resources
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.PaymentNumber">
            <summary>
            Gets the sequential index of the payment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.ScheduledDueDate">
            <summary>
            Gets the date on which this payment was originally scheduled to be due.
            </summary>
            <remarks>This date will differ from the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.PaymentDueDate"/> only if the
            PaymetDueDate has been override by the user. In that case, this property will indicate
            the original due date of the scheduled payment.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.StatementDate">
            <summary>
            Gets or sets the date the statement was issued.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.PaymentDueDate">
            <summary>
            Gets or sets the payment due date.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.LatePaymentDate">
            <summary>
            Gets or sets the date after which payment is considered late and the late fee applies.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.TransactionDate">
            <summary>
            Gets or sets the date the payment was received.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.PaymentDepositedDate">
            <summary>
            Gets or sets the date the payment was deposited.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.IndexRate">
            <summary>
            Gets the current rate of the index used to calculate this payment in an adjustable mortgage.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.InterestRate">
            <summary>
            Gets the current interest rate on the loan used to calculate the payment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.AmountDue">
            <summary>
            Gets the total amount due for the payment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.TransactionAmount">
            <summary>
            Gets or sets the total payment received.
            </summary>
            <remarks>
            This property represents the sum of the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.Principal"/>, <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.Escrow"/>,
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.Interest"/>, <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.LateFee"/>, <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.MiscFee"/>, <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.AdditionalPrincipal"/>,
            and <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.AdditionalEscrow"/> values, which determine how the payment is to allocated. 
            <p>If you set
            this property directly and its value is greater than the sum of the 
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.Principal"/>, <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.Escrow"/>,
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.Interest"/>, <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.LateFee"/>, <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.MiscFee"/>
            and <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.AdditionalEscrow"/> values, the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.AdditionalPrincipal"/> amount will be 
            adjusted to ensure that the above properties sum to the specified total transaction amount.</p>
            <p>If you set
            this property directly and its value is less than the sum of the 
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.Principal"/>, <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.Escrow"/>,
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.Interest"/>, <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.LateFee"/>, <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.MiscFee"/>
            and <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.AdditionalEscrow"/> values, the <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.AdditionalPrincipal"/> amount will be 
            set to 0 and the Principal amount paid will be reduced by the difference in the amounts to
            ensure the transaction total is accurate.</p>
            </remarks>
            <example>
      The following code demonstrates how to record a payment into the servicing
      history of the loan.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Servicing;

class SampleApp
{
   public static void Main(string[] args)
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Open the loan using the GUID specified on the command line
      Loan loan = session.Loans.Open(args[0]);
      loan.Lock();

      // Add a new payment to the servicing history of the loan.
      // The payment will be pre-populated with the data for the next scheduled payment.
      Payment pmt = loan.Servicing.Transactions.AddPayment(DateTime.Now);

      // Adjust the transaction amount to the amount actually received from the customer
      // If this is more than the scheduled payment amount, the balanced will be applied
      // as an additional principal payment. If it's less, the portion of the 
      // payment allocated to principal will be reduced by the difference.
      pmt.TransactionAmount = 2000;

      // Display the portion allocated to each balance
      Console.WriteLine("Principal: " + pmt.Principal);
      Console.WriteLine("Interest:  " + pmt.Interest);
      Console.WriteLine("Escrow:    " + pmt.Escrow);
      Console.WriteLine("Late Fee:  " + pmt.LateFee);
      Console.WriteLine("Addl Prin: " + pmt.AdditionalPrincipal);
      Console.WriteLine("Addl Escr: " + pmt.AdditionalEscrow);
      Console.WriteLine("Misc Fees: " + pmt.MiscFee);

      // Close the loan, releasing its resources
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.Principal">
            <summary>
            Gets or sets the amount of principal which is included in this payment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.Interest">
            <summary>
            Gets or sets the amount of interest included in this payment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.Escrow">
            <summary>
            Gets or sets the portion of the payment which will be directed to the escrow account.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.LateFee">
            <summary>
            Gets or sets the late fee which is included in this payment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.MiscFee">
            <summary>
            Gets or sets any extra fees which are included in this payment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.AdditionalPrincipal">
            <summary>
            Gets or sets any additional principal which included in this payment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.AdditionalEscrow">
            <summary>
            Gets or sets any additional funds to be directed to the escrow account from this payment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.LateFeeIfLate">
            <summary>
            Gets or sets the late fee which will be applied if payment is not received by the 
            <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.PaymentDueDate"/>.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.InstitutionName">
            <summary>
            Gets or sets the name of the institution from which payment is drawn.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.InstitutionRouting">
            <summary>
            Gets or sets the routing number of the institution from which payment is drawn.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.AccountNumber">
            <summary>
            Gets or sets the account number for which payment is drawn.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.AccountHolder">
            <summary>
            Gets or sets the name on the account from which payment is drawn.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.Reference">
            <summary>
            Gets or sets a reference number for this transaction.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.CheckNumber">
            <summary>
            Gets or sets the check number used for this payment if paid by check.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.PaymentAmount">
            <summary>
            Gets or sets the actual amount received from the borrower as payment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.PaymentDate">
            <summary>
            Gets or sets the date shown on the payment, e.g. the date on a check.
            </summary>
            <remarks>This property does nto represent the actual date the payment was received.
            That date is stored in the <see cref="P:EllieMae.EMLite.DataEngine.InterimServicing.PaymentTransactionLog.PaymentReceivedDate"/> property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment.Comments">
            <summary>
            Gets or sets additional comments for the transaction.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentReversal">
            <summary>
            Represents an escrow disbursement servicing transaction.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.IPaymentReversal">
            <summary>
            Interface for ServicingTransaction class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentReversal.GetPayment">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.Payment"/> that was reversed by this transaction.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule">
            <summary>
            Represents a payment schedule for paying off a loan.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.IPaymentSchedule">
            <summary>
            Interface for PaymentSchedule class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule.Payments">
            <summary>
            Gets the collection of principal and interest payments based on the schedule.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule.Disbursements">
            <summary>
            Gets the collection of escrow disbursements based on the schedule.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule.DaysPerYear">
            <summary>
            Gets the number of days per year used to calculate the payment schedule.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule.LoanTerm">
            <summary>
            Gets the term of the loan as specified in the loan contract.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule.ActualTerm">
            <summary>
            Gets the total number of monthly payments based on the payment schedule.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule.IsARM">
            <summary>
            Gets a flag indicating if the payment schedule is for an adjustable rate mortgage.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule.IsBiweekly">
            <summary>
            Gets a flag indicating if the payment schedule is based on biweekly payments.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule.IsNegativeARM">
            <summary>
            Gets a flag indicating if the payment schedule is for a negative ARM.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule.LoanAmount">
            <summary>
            Gets the loan amount on which the payment schedule is based.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule.MarginRate">
            <summary>
            Gets the margin rate for an adjustable rate mortgage.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule.MinLateFee">
            <summary>
            Gets the minimum late fee for a late payment.
            </summary>
            <remarks>This property returns 0 if no minimum fee is set.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule.MaxLateFee">
            <summary>
            Gets the maximum late fee for a late payment.
            </summary>
            <remarks>This property returns 0 if no maximum fee is set.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule.NoteRate">
            <summary>
            Gets the initial note rate of the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule.PaymentsPerYear">
            <summary>
            Gets the number of scheduled payments per year.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule.PaymentDueDays">
            <summary>
            Gets the number of days in which payment is due from the time of the scheduled payment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule.StatementDueDays">
            <summary>
            Gets the number of days from the time of the scheduled payment to the time the statement should be printed.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement">
            <summary>
            Represents a single escrow disbursement within a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.IScheduledDisbursement">
            <summary>
            Interface for ScheduledDisbursement class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement.Index">
            <summary>
            Gets the index of this disbursement in the payment schedule.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement.Taxes">
            <summary>
            Gets the amount of taxes payable for this disbursement.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement.TaxesDueDate">
            <summary>
            Gets the date on which the tax payment is due.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement.HazardInsurance">
            <summary>
            Gets the amount of hazard insurance payable for this disbursement.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement.HazardInsuranceDueDate">
            <summary>
            Gets the date on which the hazard insurance payment is due.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement.MortgageInsurance">
            <summary>
            Gets the amount of mortgage insurance payable for this disbursement.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement.MortgageInsuranceDueDate">
            <summary>
            Gets the date on which the mortgage insurance payment is due.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement.FloodInsurance">
            <summary>
            Gets the amount of flood insurance payable for this disbursement.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement.FloodInsuranceDueDate">
            <summary>
            Gets the date on which the flood insurance payment is due.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement.CityTax">
            <summary>
            Gets the amount of city property tax payable for this disbursement.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement.CityTaxDueDate">
            <summary>
            Gets the date on which the city property tax payment is due.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement.UserFee1">
            <summary>
            Gets the first amount of user-defined fees for this disbursement.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement.UserFee1DueDate">
            <summary>
            Gets the date on which the first user-defined fee is due.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement.UserFee2">
            <summary>
            Gets the second amount of user-defined fees for this disbursement.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement.UserFee2DueDate">
            <summary>
            Gets the date on which the second user-defined fee is due.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement.UserFee3">
            <summary>
            Gets the third amount of user-defined fees for this disbursement.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement.UserFee3DueDate">
            <summary>
            Gets the date on which the third user-defined fee is due.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursements">
            <summary>
            Represents a collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement"/> objects within a
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.IScheduledDisbursements">
            <summary>
            Interface for ScheduledDisbursements class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursements.GetEnumerator">
            <summary>
            Returns an enumerator for iterating over the collection of disbursements.
            </summary>
            <returns>Returns an IEnumerator which iterates over the disbursements in order based on index.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursements.Count">
            <summary>
            Gets the number of disbursements in the payment schedule.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursements.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledDisbursement"/> by index.
            </summary>
            <param name="index">The 1-based index of the desired disbursements.</param>
            <returns>The specified ScheduledDisbursement object.</returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledPayment">
            <summary>
            Represents a single payment within a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.IScheduledPayment">
            <summary>
            Interface for ScheduledPayment class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledPayment.Index">
            <summary>
            Gets the index of the payment in the schedule.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledPayment.DueDate">
            <summary>
            Gets the date on which the payment is due.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledPayment.InterestRate">
            <summary>
            Gets the interest rate on the loan at the time of the payment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledPayment.Principal">
            <summary>
            Gets the amount of principal included in the payment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledPayment.Interest">
            <summary>
            Gets the amount of interest included in the payment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledPayment.MortgageInsurance">
            <summary>
            Gets the amount of mortgage insurance included in the payment.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledPayment.Balance">
            <summary>
            Gets the remaining balance on the loan.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledPayment.Total">
            <summary>
            Gets the total amount due for the payment.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledPayments">
            <summary>
            Represents a collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledPayment"/> objects within a
            <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.PaymentSchedule"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.IScheduledPayments">
            <summary>
            Interface for ScheduledPayments class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledPayments.GetEnumerator">
            <summary>
            Returns an enumerator for iterating over the collection of payments.
            </summary>
            <returns>Returns an IEnumerator which iterates over the payments in order based on index.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledPayments.Count">
            <summary>
            Gets the number of payments in the payment schedule.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledPayments.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ScheduledPayment"/> by index.
            </summary>
            <param name="index">The 1-based index of the desired payment.</param>
            <returns>The specified ScheduledPayment object.</returns>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransactionType">
            <summary>
            Enumeration for the support interim servicing transaction types.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransactionType.None">
            <summary>No transaction type specified.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransactionType.Payment">
            <summary>A payment made by the borrower.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransactionType.PaymentReversal">
            <summary>Reversal of a payment made by the borrower.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransactionType.EscrowDisbursement">
            <summary>A disbursement from the escrow account.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransactionType.EscrowInterest">
            <summary>Interest paid on the escrow balance.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransactionType.EscrowDisbursementReversal">
            <summary>Reversal of a disbursement paid from escrow.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransactionType.Other">
            <summary>A custom or user-defined transaction.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingPaymentMethod">
            <summary>
            Enumeration for the support interim servicing payment methods.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingPaymentMethod.None">
            <summary>No method specified.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingPaymentMethod.Check">
            <summary>Payment made by check.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingPaymentMethod.AutomatedClearingHouse">
            <summary>Electronic payment made through the ACH.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingPaymentMethod.LockBox">
            <summary>Payment taken from the lockbox.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingPaymentMethod.Wire">
            <summary>Payment made via wire transfer.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingDisbursementType">
            <summary>
            Enumeration for the support interim servicing disbursement types.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingDisbursementType.None">
            <summary>No disbursement type sepcified.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingDisbursementType.Taxes">
            <summary>Disbursement to pay property taxes.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingDisbursementType.HazardInsurance">
            <summary>Disbursement to pay property/hazard insurance.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingDisbursementType.MortgageInsurance">
            <summary>Disbursement to pay mortgage insurance.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingDisbursementType.FloodInsurance">
            <summary>Disbursement to pay flood insurance.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingDisbursementType.CityPropertyTax">
            <summary>Disbursement to pay city-specific property taxes.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingDisbursementType.User1">
            <summary>User-defined disbursement type.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingDisbursementType.User2">
            <summary>User-defined disbursement type.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingDisbursementType.User3">
            <summary>User-defined disbursement type.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanTemplate">
            <summary>
            Represents a saved loan template which can be used for the creation of new loans.
            </summary>
            <example>
The following code creates a new loan using an existing Loan Template.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Templates;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the example purchase loan template from the server
      LoanTemplate template = (LoanTemplate) session.Loans.Templates.GetTemplate(TemplateType.LoanTemplate, 
         @"public:\Example Puchase Loan Template");

      // Create a new loan from the template
      Loan loan = template.NewLoan();

      // Set the name and folder
      loan.LoanName = "TemplateLoan";
      loan.LoanFolder = "My Pipeline";

      // Commit the loan to save it to the server
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.ILoanTemplate">
            <summary>
            Interface for the LoanTemplate class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanTemplate.NewLoan">
            <summary>
            Creates a new <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan"/> object based on this template.
            </summary>
            <returns>A new, uncommitted <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Loan"/> object.</returns>
            <example>
The following code creates a new loan using an existing Loan Template.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Templates;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the example purchase loan template from the server
      LoanTemplate template = (LoanTemplate) session.Loans.Templates.GetTemplate(TemplateType.LoanTemplate, 
         @"public:\Example Puchase Loan Template");

      // Create a new loan from the template
      Loan loan = template.NewLoan();

      // Set the name and folder
      loan.LoanName = "TemplateLoan";
      loan.LoanFolder = "My Pipeline";

      // Commit the loan to save it to the server
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanTemplate.GetComponent(EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateType)">
            <summary>
            Gets one of the component <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.Template"/> objects which make up the Loan Template.
            </summary>
            <param name="tmplType">The <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanTemplate.TemplateType"/> of the component to retrieve.</param>
            <returns>The specified Template, if one exists. Otherwise, <c>null</c> is returned.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanTemplate.Unwrap">
            <summary>
            Unwraps the template object to return the internal data type.
            </summary>
            <returns></returns>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanTemplate.TemplateType">
            <summary>
            Returns the type of template represented by the object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.LoanTemplate.Description">
            <summary>
            Gets the description of the template.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateType">
            <summary>
            Enumerator of the template types supported by Encompass.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateType.LoanProgram">
            <summary>Loan Program template</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateType.ClosingCost">
            <summary>Closing Cost template</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateType.DataTemplate">
            <summary>Data template</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateType.InputFormSet">
            <summary>Input Form Set template</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateType.DocumentSet">
            <summary>Document Set template</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateType.LoanTemplate">
            <summary>Loan Template</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateType.TaskSet">
            <summary>Task Set Template</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateType.Investor">
            <summary>Investor Template</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.Templates">
            <summary>
            Provides access to the loan templates accessible in the Encompass system
            </summary>
            <example>
The following code creates a new loan using an existing Loan Template.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Templates;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the example purchase loan template from the server
      LoanTemplate template = (LoanTemplate) session.Loans.Templates.GetTemplate(TemplateType.LoanTemplate, 
         @"public:\Example Puchase Loan Template");

      // Create a new loan from the template
      Loan loan = template.NewLoan();

      // Set the name and folder
      loan.LoanName = "TemplateLoan";
      loan.LoanFolder = "My Pipeline";

      // Commit the loan to save it to the server
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.ITemplates">
            <summary>
            Interface for the Templates class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.Templates.GetTemplate(EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateType,System.String)">
            <summary>
            Retrieves a loan template from the Encompass Server.
            </summary>
            <param name="templateType">The type of template to be retrieved.</param>
            <param name="path">The path of the template.</param>
            <returns>Returns the specified template or <c>null</c>
            if no template with the specified path is found.</returns>
            <remarks>
            <p>Every template in Encompass has a well-defined <see cref="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.Template.Path"/> that
            can be used to retrieve the template from the Encompass Server. The path is made up
            or three parts:
            <list type="bulleted">
            <item><term>Domain</term>, which can be either "public" or "personal" and identifies the template
            as being a publicly-accessible template available to all users or a private template
            available on to it owner.</item>
            <item><term>Folders</term>, which is the delimited folder hierarchy in which the template
            resides. The elements of the path are separated using the backslash (\) character.</item>
            <item><term>Name</term>, which is the name of the template and can include any printable
            character except the path delimiter (\).</item>
            </list>
            A full path for a template would then have the format:
            <code>&lt;domain&gt;:\&lt;folder&gt;\&lt;name&gt;</code>
            For example, a publicly-accessible template named "MyTemplate" which resides in the
            folders "LenderA\ARMs" would be "public:\LenderA\ARMs\MyTemplate".</p>
            <p>If a personal template path is specified, the template's owner is assumed to be the
            currently logged in user. Thus, you should not pass in a user-qualified path for this
            parameter. To retrieve a personal template for a user other than the currently logged in
            user, use the overload of GetTemplate that allows a <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry"/> to
            be specified.</p>
            </remarks>
            <example>
The following code creates a new loan using an existing Loan Template.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Templates;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the example purchase loan template from the server
      LoanTemplate template = (LoanTemplate) session.Loans.Templates.GetTemplate(TemplateType.LoanTemplate, 
         @"public:\Example Puchase Loan Template");

      // Create a new loan from the template
      Loan loan = template.NewLoan();

      // Set the name and folder
      loan.LoanName = "TemplateLoan";
      loan.LoanFolder = "My Pipeline";

      // Commit the loan to save it to the server
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.Templates.GetTemplate(EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateType,EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry)">
            <summary>
            Retrieves a Template from the server.
            </summary>
            <param name="templateType">The type of template to be retrieved.</param>
            <param name="entry">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry"/> of the template to be retrieved.</param>
            <returns>Returns the specified template, if found, or <c>null</c> if the template is
            not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Loans.Templates.Templates.GetTemplateFolderContents(EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateType,EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry)">
            <summary>
            Gets the contents of a folder in the template repository.
            </summary>
            <param name="templateType">The type of template for which the directory contents are to be retrieved.
            </param>
            <param name="folderEntry">The <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TemplateEntry"/> that represents the folder for
            which the request is being made.</param>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.TemplateEntryList"/> containing the entries within the
            specified folder. Each entry represents either a subfolder of the specified <c>folderEntry</c>
            or a template that resides in the folder. The method does not recurse into subfolders of the specified
            folder, thus if you wish to retrieve all templates you will need to call this method recursively. Such
            recursive calls may perform poorly on systems with large numbers of templates.
            </returns>
            <example>
      The following code demonstrates how to recursively descend the template
      file system hierarchy to generate a list of all available loan templates.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Templates;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");
      
      // Call the method which will descend the hierarchy, starting with the Public root
      // folder for the templates.
      printTemplateHierarchy(session, TemplateEntry.PublicRoot);

      // End the session to gracefully disconnect from the server
      session.End();
   }
   
    // Allows for recursively traversing the template hierarchy
    private static void printTemplateHierarchy(Session session, TemplateEntry parent)
    {
      // Retrieve the contents of the specified parent folder
      TemplateEntryList templateEntries = session.Loans.Templates.GetTemplateFolderContents(TemplateType.LoanTemplate, parent);

      // Iterate over each of the TemplateEntry records, each of which represents either
      // a Template or a subfolder of the parent folder.
      foreach (TemplateEntry e in templateEntries)
      {
        printTemplateEntry(e);

        // If the entry represents a subfolder, recurse into that folder
        if (e.EntryType == TemplateEntryType.Folder)
          printTemplateHierarchy(session, e);
      }
    }

    // Prints the details of a single TemplateEntry object
    private static void printTemplateEntry(TemplateEntry e)
    {
      Console.WriteLine("-> " + e.Name);
      Console.WriteLine("   Type = " + e.EntryType);
      Console.WriteLine("   IsPublic = " + e.IsPublic);
      Console.WriteLine("   LastModified = " + e.LastModified);
      Console.WriteLine("   Owner = " + e.Owner);
      Console.WriteLine("   ParentFolder = " + e.ParentFolder);
      Console.WriteLine("   Path = " + e.Path);
      Console.WriteLine("   RepositoryPath = " + e.DomainPath);

      foreach (string name in e.Properties.GetPropertyNames())
        Console.WriteLine("   Properties[\"" + name + "\"] = " + e.Properties[name]);

      Console.WriteLine();
    }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.Templates.Documents">
            <summary>
            Gets the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> objects defined in the Encompass system.
            </summary>
            <example>
      The following code adds a new Document Tracking record to a loan using
      a DocumentTemplate object.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessEnums;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Loans.Templates;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create a new loan and populate some default fields
      Loan loan = session.Loans.CreateNew();
      loan.LoanFolder = "My Pipeline";
      loan.Fields["36"].Value = "Mike";
      loan.Fields["37"].Value = "Smith";
      loan.Fields["1109"].Value = 200000;
      loan.Fields["4"].Value = 360;
      loan.Fields["3"].Value = 5.75;

      // Retrieve the Credit Report document template
      DocumentTemplate tmpl = session.Loans.Templates.Documents.GetTemplateByTitle("Credit Report");

      // Create a TrackedDocument in the loan using the template
      loan.Log.TrackedDocuments.AddFromTemplate(tmpl, session.Loans.Milestones.Processing.Name);

      // Commit the loan to save it to the server
      loan.Commit();
      loan.Close();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
      </code>
    </example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.Templates.Tasks">
            <summary>
            Gets the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.TaskTemplate"/> objects defined in the Encompass system.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.Templates.UnderwritingConditions">
            <summary>
            Gets the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.UnderwritingConditionTemplate"/> objects defined in the Encompass system.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Loans.Templates.Templates.PostClosingConditions">
            <summary>
            Gets the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Templates.DocumentTemplate"/> objects defined in the Encompass system.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.PersistentObjectEventHandler">
            <summary>
            Delegate class for events related to persistent objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.PersistentObjectEventArgs">
            <summary>
            Provide event arguments for events related to persistent objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.IPersistentObjectEventArgs">
            <summary>
            Interface for the PersistentObjectEventArgs class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.PersistentObjectEventArgs.ObjectID">
            <summary>
            Gets the identifier for the object about which the event is raised.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.Feature">
            <summary>
            Enumeration of the different access items to which users/personas can be grantred access
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.Organization">
            <summary>
            Represents an item in the Encompass organization hierarchy.
            </summary>
            <remarks>If the organization is set to use parent info the values 
            of the internal properties will return the values of the parent 
            organization properties. Otherwise the properties will return their 
            own values. If a property value is changed the Organization will be changed
            to not use the parent info and the values will be returned from the actual Oranization.</remarks>
            <example>
The following code demonstrates how to display the entire organization
hierarchy.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Fetch the root organization
      Organization root = session.Organizations.GetTopMostOrganization();

      // Recursively display this organization and its children
      displayOrgHierarchy(root, 0);

      // End the session to gracefully disconnect from the server
      session.End();
   }
   
   // Used to recursively generate the organization hierarchy
   private static void displayOrgHierarchy(Organization parentOrg, int depth)
   {
      // Write out the parent organization's name
      Console.WriteLine(new string('-', depth * 2) + parentOrg.Name);

      // Iterate over the organization's children, recursively calling this function
      foreach (Organization suborg in parentOrg.GetSuborganizations())
         displayOrgHierarchy(suborg, depth + 1);
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.IOrganization">
            <summary>
            Interface for User class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organization.Commit">
            <summary>
            Commits the changes to the organization to the Encompass Server.
            </summary>
            <example>
The following code demonstrates how to display the entire organization
hierarchy.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Fetch the root organization
      Organization root = session.Organizations.GetTopMostOrganization();

      // Modify the organization's name and org code
      root.Name = "MyCompany Headquarters";
      root.OrgCode = "0001";

      // Save the changes
      root.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organization.Delete">
            <summary>
            Deletes the organization from the Encompass Server.
            </summary>
            <remarks>The organization must contain no users and no suborganizations
            in order to be deleted.</remarks>
            <example>
The following code deletes all leaf nodes on the organization hierarchy
tree which all contain no users.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Fetch a list of all the organizations in the hierarchy
      OrganizationList orgs = session.Organizations.GetAllOrganizations();

      foreach (Organization org in orgs)
      {
         // If the organization is empty (no users or suborganizations),
         // delete it from the tree
         if ((org.GetUsers().Count == 0) && (org.GetSuborganizations().Count == 0))
            org.Delete();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organization.Refresh">
            <summary>
            Refreshes the data for the current organization, causing any changes to be discarded.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organization.GetTopParent(System.Boolean)">
            <summary>
            Gets the top most parent that does not have its info inherited from a parent.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organization.GetParentOrganization">
            <summary>
            Retrieves the parent organization of the current organization.
            </summary>
            <returns>Returns the parent <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Organization"/> object unless
            the current object is the root organization, in which case it returns
            <c>null</c>.</returns>
            <example>
The following code moves every user up one level in the organization hierarchy
except those users which are already at the top-most level.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Fetch a list of all the organizations in the hierarchy
      UserList users = session.Users.GetAllUsers();

      foreach (User user in users)
      {
         // Get the organization to which the user already belongs
         Organization currentOrg = session.Organizations.GetOrganization(user.OrganizationID);

         // Check if the user is already at the top level of the tree
         if (!currentOrg.IsTopMostOrganization)
         {
            // Fetch the parent organization of the current org
            Organization parentOrg = currentOrg.GetParentOrganization();

            // Move the user into the parent organization
            user.ChangeOrganization(parentOrg);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organization.GetSuborganizations">
            <summary>
            Returns the list of suborganizations of the current organization;
            </summary>
            <returns></returns>
            <example>
The following code demonstrates how to display the entire organization
hierarchy.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Fetch the root organization
      Organization root = session.Organizations.GetTopMostOrganization();

      // Recursively display this organization and its children
      displayOrgHierarchy(root, 0);

      // End the session to gracefully disconnect from the server
      session.End();
   }
   
   // Used to recursively generate the organization hierarchy
   private static void displayOrgHierarchy(Organization parentOrg, int depth)
   {
      // Write out the parent organization's name
      Console.WriteLine(new string('-', depth * 2) + parentOrg.Name);

      // Iterate over the organization's children, recursively calling this function
      foreach (Organization suborg in parentOrg.GetSuborganizations())
         displayOrgHierarchy(suborg, depth + 1);
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organization.CreateSuborganization(System.String)">
            <summary>
            Creates a new suborganization for the current organization.
            </summary>
            <param name="name">The name of the new suborganization.</param>
            <returns>A new Organization object for the suborganization. This object
            will not be saved to the Encompass Server until the <see cref="M:EllieMae.Encompass.BusinessObjects.Users.Organization.Commit"/>
            method is invoked on it.</returns>
            <example>
The following code creates a new suborganization of the top-most organization
named "Loan Officers" and moves all users with the LO Persona into the organization.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Fetch the top-level organization
      Organization rootOrg = session.Organizations.GetTopMostOrganization();

      // Create a new suborganization to hold the Loan Officers
      // The organization must be committed before we add users to it.
      Organization loOrg = rootOrg.CreateSuborganization("Loan Officers");
      loOrg.Commit();

      // Get the "Loan Officer" Persona
      Persona lop = session.Users.Personas.GetPersonaByName("Loan Officer");

      // Fetch the list of Loan Officers from the server
      UserList los = session.Users.GetUsersWithPersona(lop, false);

      // For each LO, move the user into the new organization
      foreach (User lo in los)
         lo.ChangeOrganization(loOrg);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organization.GetUsers">
            <summary>
            Returns the list of users in the current organization.
            </summary>
            <returns>The list of users in this organization.</returns>
            <remarks>This method is not recursive; that is, the set of users returned are only
            those in the current organization, not in its suborganizations.</remarks>
            <example>
The following code disables all of the users that reside under the
"Loan Officers" organization(s).
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Fetch the "Loan Officers" organization(s)
      OrganizationList orgs = session.Organizations.GetOrganizationsByName("Loan Officers");

      foreach (Organization org in orgs)
      {
         // Fetch all of the users from the organization
         UserList users = org.GetUsers();

         // For each LO, move the user into the new organization
         foreach (User user in users)
         {
            if (user.Enabled)
               user.Disable();
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organization.CreateUser(System.String,System.String,EllieMae.Encompass.Collections.PersonaList)">
            <summary>
            Creates a new user in the current organization.
            </summary>
            <param name="userId">The Login ID of the user to create. This value must be unique
            from all other Encompass users.</param>
            <param name="password">The password for the new user.</param>
            <param name="personas">A <see cref="T:EllieMae.Encompass.Collections.PersonaList"/> containing one or more <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona">Personas</see>
            which should be assigned to the new user.</param>
            <returns>A new <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/> within the current organization. This user is
            not persisted on the Encompass Server until the <see cref="M:EllieMae.Encompass.BusinessObjects.Users.User.Commit"/> method
            is invoked on it.</returns>
            <example>
The following code creates a new user account within the "Loan Officers"
organization.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Fetch the organizations with the name "Loan Officers"
      OrganizationList orgs = session.Organizations.GetOrganizationsByName("Loan Officers");

      // Get the "Loan Officer" Persona
      Persona lo = session.Users.Personas.GetPersonaByName("Loan Officer");
      PersonaList personas = new PersonaList();
      personas.Add(lo);

      // We'll assume there's just one matching org, so we'll use that one
      // to create out user in.
      Organization loOrg = orgs[0];
      User newLo = loOrg.CreateUser("james", "jamespwd", personas);

      // Set some properties on the new users
      newLo.FirstName = "James";
      newLo.LastName = "Smith";
      newLo.Email = "james@mycompany.com";
      newLo.Phone = "333-333-3333";
      newLo.WorkingFolder = "My Pipeline";
      newLo.SubordinateLoanAccessRight = SubordinateLoanAccessRight.ReadOnly;
      
      // Assign some rights to the new LO
      newLo.GrantAccessTo(Feature.PersonalLoanTemplateSets);
      newLo.GrantAccessTo(Feature.PersonalePASS);

      // Save the new user
      newLo.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organization.GetUserGroups">
            <summary>
            Returns the list of User Groups to which the organization belongs.
            </summary>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.UserGroupList"/> containing the set of user groups to which
            the organization's memers are assigned, either through direct assignment or by virtue of its position
            within the organization hierarchy.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organization.ToString">
            <summary>
            Provides a string representation for the object.
            </summary>
            <returns>Returns the <see cref="P:EllieMae.Encompass.BusinessObjects.Users.Organization.Name"/> of the organization.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organization.GetHashCode">
            <summary>
            Provides a hash code for the organization object
            </summary>
            <returns>A hash code for the object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organization.Equals(System.Object)">
            <summary>
            Indicates if two Organization objects represent the same persistent organization.
            </summary>
            <param name="obj">The Organization object to which to compare the current object.</param>
            <returns>Returns <c>true</c> if the organizations have the same ID and come from the same
            <see cref="T:EllieMae.Encompass.Client.Session">Session</see>, <c>false</c> otherwise.</returns>
        </member>
        <member name="E:EllieMae.Encompass.BusinessObjects.Users.Organization.Committed">
            <summary>Event indicating that the object has been committed to the server.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Organization.UseParentInfo">
            <summary>
            Indicates if the organization is using parent info.
            <remarks>If this value is set to true the organization will inherit its info from the 
            parent organization. If this value is set to false it will copy the current 
            values from the previous parent and use those values. If the organization has this value
            set to true and a property is changed, this value will automatically be set to false and all 
            other property values will be copied from the parent.
            </remarks>
            <example>
    The following code demonstrates how to the UseParentInfo property works.
    <code>
      <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Get at organization that is using parent info (UseParentInfo is true)
      Organization org = session.Organizations.GetOrganization(7);
      
      // Output starting values
      Console.WriteLine("Before Update");
      Console.WriteLine(org.UseParentInfo);
      Console.WriteLine(org.OrgCode);
      Console.WriteLine(org.CompanyName);
      
      // Change organization to not use parent in
      org.CompanyName = "Different Company"
      
      // Output values after change
      Console.WriteLine("After Update");
      Console.WriteLine(org.UseParentInfo);
      Console.WriteLine(org.OrgCode);
      Console.WriteLine(org.CompanyName);
 
      // Save the Organization
      org.Commit();
      
      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
    </code>
  </example>
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Organization.ID">
            <summary>
            Gets the unqiue identifier for this organization.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Organization.Name">
            <summary>
            Gets or sets the name of the organization as it appears in the organization hierarchy.
            </summary>
            <remarks>This value differs from the <see cref="P:EllieMae.Encompass.BusinessObjects.Users.Organization.CompanyName"/> property, which
            represents the company's name as it should appear on printed forms.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Organization.OrgCode">
            <summary>
            Gets or sets the OrgCode for this organization.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Organization.CompanyAddress">
            <summary>
            Gets the address of record for the organization.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Organization.CompanyName">
            <summary>
            Gets or sets the name of the company.
            </summary>
            <remarks>This value differs from the <see cref="P:EllieMae.Encompass.BusinessObjects.Users.Organization.Name"/> property in that it represents
            the company name which should be shown on forms when printed by users within this
            organization.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Organization.CompanyPhone">
            <summary>
            Gets or set the phone number for this organization.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Organization.CompanyFax">
            <summary>
            Gets or sets the fax number for this organization.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Organization.DBAName1">
            <summary>
            Gets or sets the 1st DBA name for this organization.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Organization.DBAName2">
            <summary>
            Gets or sets the 2nd DBA name for this organization.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Organization.DBAName3">
            <summary>
            Gets or sets the 3rd DBA name for this organization.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Organization.DBAName4">
            <summary>
            Gets or sets the 4th DBA name for this organization.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Organization.Description">
            <summary>
            Gets or sets the description of the organization.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Organization.IsNew">
            <summary>
            Indicates if this object represents a new, unsaved organization.
            </summary>
            <remarks>A new organization is not saved to the server unless the <see cref="M:EllieMae.Encompass.BusinessObjects.Users.Organization.Commit"/>
            method is invoked.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Organization.IsTopMostOrganization">
            <summary>
            Indicates if the current organization is the root organization in the hierarchy.
            </summary>
            <example>
The following code moves every user up one level in the organization hierarchy
except those users which are already at the top-most level.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Fetch a list of all the organizations in the hierarchy
      UserList users = session.Users.GetAllUsers();

      foreach (User user in users)
      {
         // Get the organization to which the user already belongs
         Organization currentOrg = session.Organizations.GetOrganization(user.OrganizationID);

         // Check if the user is already at the top level of the tree
         if (!currentOrg.IsTopMostOrganization)
         {
            // Fetch the parent organization of the current org
            Organization parentOrg = currentOrg.GetParentOrganization();

            // Move the user into the parent organization
            user.ChangeOrganization(parentOrg);
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.Organizations">
            <summary>
            Provides methods for accessing the Encompass organization hierarchy.
            </summary>
            <remarks>The properties and methods of this class are restricted to users
            who have the Administrator persona.</remarks>
            <example>
The following code demonstrates how to display the entire organization
hierarchy.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Fetch the root organization
      Organization root = session.Organizations.GetTopMostOrganization();

      // Recursively display this organization and its children
      displayOrgHierarchy(root, 0);

      // End the session to gracefully disconnect from the server
      session.End();
   }
   
   // Used to recursively generate the organization hierarchy
   private static void displayOrgHierarchy(Organization parentOrg, int depth)
   {
      // Write out the parent organization's name
      Console.WriteLine(new string('-', depth * 2) + parentOrg.Name);

      // Iterate over the organization's children, recursively calling this function
      foreach (Organization suborg in parentOrg.GetSuborganizations())
         displayOrgHierarchy(suborg, depth + 1);
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.IOrganizations">
            <summary>
            Interface for Organizations class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.GetTopMostOrganization">
            <summary>
            Returns the top-most organization in the organization hierarchy.
            </summary>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Organization"/> object representing the top
            organization in the hierarchy.</returns>
            <example>
The following code demonstrates how to display the entire organization
hierarchy.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Fetch the root organization
      Organization root = session.Organizations.GetTopMostOrganization();

      // Recursively display this organization and its children
      displayOrgHierarchy(root, 0);

      // End the session to gracefully disconnect from the server
      session.End();
   }
   
   // Used to recursively generate the organization hierarchy
   private static void displayOrgHierarchy(Organization parentOrg, int depth)
   {
      // Write out the parent organization's name
      Console.WriteLine(new string('-', depth * 2) + parentOrg.Name);

      // Iterate over the organization's children, recursively calling this function
      foreach (Organization suborg in parentOrg.GetSuborganizations())
         displayOrgHierarchy(suborg, depth + 1);
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.GetTopMostExternalOrganizations">
            <summary>
            Returns the top-most organization in the organization hierarchy.
            </summary>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization">ExternalOrg</see></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.GetAllOrganizations">
            <summary>
            Returns a list of all defined Organizations.
            </summary>
            <returns>A <see cref="T:EllieMae.Encompass.Collections.OrganizationList">OrganizationList</see>
            containing all of the <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Organization">Organization</see> objects
            defined on the Encompass Server.</returns>
            <example>
The following code generates a complete roster of the users defined in
Encompass, broken down by the organization in which they belong.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Fetch all of the organizations
      OrganizationList orgs = session.Organizations.GetAllOrganizations();

      foreach (Organization org in orgs)
      {
         // Display the organization name
         Console.WriteLine(org.Name);

         // Display the name of each user in the organization
         foreach (User user in org.GetUsers())
            Console.WriteLine("+ " + user.ToString());

         Console.WriteLine();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.GetAllExternalOrganizations">
            <summary>
            Returns a list of all defined External Organizations - could have performance issue with large number of organizations
            </summary>
            <returns>A <see cref="T:EllieMae.Encompass.Collections.ExternalOrganizationList">ExternalOrganizationList</see>
            containing all of the <see cref="T:EllieMae.EMLite.ClientServer.ExternalOriginatorManagementData">ExternalOriginatorManagementData</see> objects
            defined on the Encompass Server.</returns>
            <example>
The following code generates a complete roster of the users defined in
Encompass, broken down by the external organization in which they belong.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.ExternalOrganization;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Fetch all of the organizations
      ExternalOrganizationList orgs = session.Organizations.GetAllExternalOrganizations();

      foreach (ExternalOrganization org in orgs)
      {
        // Display the organization name
        Console.WriteLine(org.CompanyLegalName);

        // Display the name of each user in the organization
        foreach (ExternalUser user in org.GetUsers())
          Console.WriteLine("+ " + user.ToString());

        Console.WriteLine();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.GetOrganizationsByName(System.String)">
            <summary>
            Returns a list of organization whose names match the specified value.
            </summary>
            <param name="orgName">The name of the organization(s) to be found.</param>
            <returns>Returns a list of matching organizations. A organization's name must
            match the specified value exactly to be returned.</returns>
            <example>
The following code enables all of the user accounts in the 
"Loan Officers" organization.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Fetch the "Loan Officers" organization(s)
      OrganizationList orgs = session.Organizations.GetOrganizationsByName("Loan Officers");

      foreach (Organization org in orgs)
      {
         // Fetch all of the users from the organization
         UserList users = org.GetUsers();

         // For each LO, move the user into the new organization
         foreach (User user in users)
         {
            if (user.Enabled == false)
               user.Enable();
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.GetOrganization(System.Int32)">
            <summary>
            Retrieves the specified Organization from the Encompass server.
            </summary>
            <param name="orgId">The unique ID for the desired Organization.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Organization">Organization</see> object for the requested Organization, or
            null if no such Organization exists.</returns>
            <example>
The following code displays a roster of all Loan Officers in the system
along with the organizations to which they belong.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Get the "Loan Officer" Persona
      Persona lop = session.Users.Personas.GetPersonaByName("Loan Officer");

      // Fetch the list of Loan Officers from the server
      UserList los = session.Users.GetUsersWithPersona(lop, false);

      foreach (User lo in los)
      {
         // Fetch the user's organization
         Organization org = session.Organizations.GetOrganization(lo.OrganizationID);

         // Display the user's name and organization
         Console.WriteLine(lo + ", " + org);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.GetExternalOrganization(System.Int32)">
            <summary>
            Retrieves the specified External Organization without details from the Encompass server.
            </summary>
            <param name="orgId">The unique ID for the desired External Organization.</param>
            <returns>The <see cref="N:EllieMae.Encompass.BusinessObjects.ExternalOrganization">ExternalOrganization</see> object for the requested External Organization, or
            null if no such External Organization exists.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.GetExternalOrganization(System.Int32,System.Boolean)">
            <summary>
            Retrieves the specified External Organization with all details from the Encompass server.
            </summary>
            <param name="orgId">The unique ID for the desired External Organization.</param>
            <returns>The <see cref="N:EllieMae.Encompass.BusinessObjects.ExternalOrganization">ExternalOrganization</see> object for the requested External Organization, or
            null if no such External Organization exists.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.GetExternalOrganization(System.String)">
            <summary>
            Retrieves the specified External Organization without details from the Encompass server.
            </summary>
            <param name="externalID">The externalID of the organization.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization">ExternalOrg</see> object for the corresponding externalID.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.GetExternalOrganizationsWithExtension(System.String)">
            <summary>
            Retrieves the specified External Organizations for a given externalID without details from the Encompass server.
            </summary>
            <param name="externalID">The externalID of the organization.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization">ExternalOrg</see> list object for the corresponding externalID.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.GetExternalOrganization(System.String,System.Boolean)">
            <summary>
            Retrieves the specified External Organization with all details from the Encompass server.
            </summary>
            <param name="externalID">External ID of the External Organization</param>
            <param name="getAllDetails">Flag to indicate whether detail information of the ExternalOrg will be populated by default.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization">ExternalOrg</see> object for the corresponding externalID.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.GetExternalOrganizationsWithExtension(System.String,System.Boolean)">
            <summary>
            Retrieves the specified External Organizations for a given externalID with all details from the Encompass server.
            </summary>
            <param name="externalID">External ID of the External Organization</param>
            <param name="getAllDetails">Flag to indicate whether detail information of the ExternalOrg will be populated by default.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganization">ExternalOrg</see> list object for the corresponding externalID.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.GetAccessibleExternalOrganizations(System.String)">
            <summary>
            Retrieves organizations and users having aeUserId assigned as sales reps
            </summary>
            <param name="aeUserId">Encompass userid</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.AEExternalAccessibleEntity">AEExternalAccessibleEntity</see> object that contains the accessible organizations and users.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.GetVisibleExternalOrganizations(System.String)">
            <summary>
            Retrieves visible organizations and users
            </summary>
            <param name="aeUserId">Encompass userid</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.AEExternalAccessibleEntity">AEExternalAccessibleEntity</see> object that contains the accessible organizations and users.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.AddSiteUrl(System.String,System.String)">
            <summary>
            Method to add site URL
            </summary>
            <param name="url">The url to add</param>
            <param name="siteId">The corresponding siteid for the url</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.DeleteSiteUrl(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl)">
            <summary>
            Method to delete url
            </summary>
            <param name="url">The <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl">ExternalSiteUrl</see> object to delete.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.UpdateSiteUrl(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl)">
            <summary>
            Method to update url
            </summary>
            <param name="url">The <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl">ExternalSiteUrl</see> object to update.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.GetSiteUrls">
            <summary>
            Retrieves all site urls
            </summary>
            <returns>A list of <see cref="T:EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalSiteUrl">ExternalSiteUrl</see></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.ArchiveExternalDocumentSetting(System.Collections.Generic.List{EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings})">
            <summary>
            Archive documents
            </summary>
            <param name="settingObjs"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.DeleteExternalDocumentSetting(System.Collections.Generic.List{EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings})">
            <summary>
            Deletes documents
            </summary>
            <param name="settingObjs"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.UnArchiveExternalDocumentSetting(System.Collections.Generic.List{EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings})">
            <summary>
            Unarchive the external documents
            </summary>
            <param name="settingObjs"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.GetAllArchivedDocuments">
            <summary>
            Gets All archived documents
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.GetUnArchivedDocuments">
            <summary>
            Gets Non Archived documents
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.RetrieveDocument(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings)">
            <summary>
            Reetrieve Document
            </summary>
            <param name="docObject"></param>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.EditDocument(EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalDocumentsSettings)">
            <summary>
            Edit the properties of the uploaded document
            </summary>
            <param name="docObject"></param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Organizations.UploadDocument(EllieMae.Encompass.BusinessObjects.DataObject,System.String,System.String,System.DateTime,System.DateTime,EllieMae.Encompass.BusinessObjects.ExternalOrganization.DocumentCategory,EllieMae.Encompass.BusinessObjects.ExternalOrganization.ExternalOrganizationEntityType,System.Boolean)">
            <summary>
            Uploads dodument attachment
            </summary>
            <param name="fileObject"></param>
            <param name="filename"></param>
            <param name="displayName"></param>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <param name="Category"></param>
            <param name="channel"></param>
            <param name="availbleAllTPO"></param>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.Persona">
            <summary>
            Represents a defined Persona in the Encompass system.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.IPersona">
            <summary>
            Interface for Persona class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Persona.ToString">
            <summary>
            Returns a string representation of the object.
            </summary>
            <returns>Returns the <see cref="P:EllieMae.Encompass.BusinessObjects.Users.Persona.Name"/> of the Persona.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Persona.GetHashCode">
            <summary>
            Provides a hash code implementation for the Persona class.
            </summary>
            <returns>Returns the <see cref="P:EllieMae.Encompass.BusinessObjects.Users.Persona.ID"/> of the Persona.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Persona.Equals(System.Object)">
            <summary>
            Provides an equality implementation for the Persona class.
            </summary>
            <param name="obj">The Persona object to which to compare the current object.</param>
            <returns>Returns <c>true</c> if the objects represent the same Persona, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Persona.op_Equality(EllieMae.Encompass.BusinessObjects.Users.Persona,EllieMae.Encompass.BusinessObjects.Users.Persona)">
            <summary>
            Overrides the equality operator for a Persona object.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Persona.op_Inequality(EllieMae.Encompass.BusinessObjects.Users.Persona,EllieMae.Encompass.BusinessObjects.Users.Persona)">
            <summary>
            Overrides the inequality operator for a Persona object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Persona.ID">
            <summary>
            Get the unique indenitifer for the Persona.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Persona.Name">
            <summary>
            Gets the viewable name for the Persona.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Persona.DisplayOrder">
            <summary>
            Gets the index of the Persona in the display order.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.Personas">
            <summary>
            Provides access to the set of Personas defined in the Encompass system.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.IPersonas">
            <summary>
            Interface for Personas class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Personas.GetPersonaByID(System.Int32)">
            <summary>
            Gets a Persona from the collection using the unique Persona ID.
            </summary>
            <param name="personaId">The ID of the persona to retrieve.</param>
            <returns>Returns the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/> if one is found,
            <c>null</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Personas.GetPersonaByName(System.String)">
            <summary>
            Gets a Persona from the collection using the persona's name.
            </summary>
            <param name="personaName">The name of the persona being retrieved.</param>
            <returns>Returns the specified <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/> if one is found,
            <c>null</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Personas.GetEnumerator">
            <summary>
            Provides for enumeration of the collection of personas.
            </summary>
            <returns>Returns an enumerator for the collection.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Personas.SuperAdministrator">
            <summary>
            Gets the fixed Super Administrator persona.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Personas.Administrator">
            <summary>
            Gets the fixed Administrator persona.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Personas.Count">
            <summary>
            Gets the number of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/> objects in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Personas.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/> from the collection by index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.StateLicense">
            <summary>
            Represents a Loan Officers license to originate loans in a particular state.
            </summary>
            <example>
The following code enumerates the loans in which a particular Loan Officer
is licensed to originate.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Retrieve the "officer" user from the server
      User officer = session.Users.GetUser("officer");

      // Iterate over the officer's licenses
      foreach (StateLicense license in officer.StateLicenses)
      {
         // Only display enabled licenses
         if (license.Enabled)
            Console.WriteLine(license.State + ": " + license.LicenseNumber);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.IStateLicense">
            <summary>
            Interface for StateLicense class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.StateLicense.EllieMae#Encompass#BusinessObjects#Users#IStateLicense#SetExpirationDate(System.Object)">
            <summary>
            Sets the expiration date for the license.
            </summary>
            <param name="value">The expiration date for the license or <c>null</c> if the 
            license does not expire.</param>
            <remarks>This method is provided primarilly for COM-based clients that cannot
            set the ExpirationDate directly thru the <see cref="P:EllieMae.Encompass.BusinessObjects.Users.StateLicense.ExpirationDate"/> property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicense.State">
            <summary>
            The abbreviated state name in which the license applies.
            </summary>
            <example>
The following code enumerates the loans in which a particular Loan Officer
is licensed to originate.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Retrieve the "officer" user from the server
      User officer = session.Users.GetUser("officer");

      // Iterate over the officer's licenses
      foreach (StateLicense license in officer.StateLicenses)
      {
         // Only display enabled licenses
         if (license.Enabled)
            Console.WriteLine(license.State + ": " + license.LicenseNumber);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicense.LicenseNumber">
            <summary>
            Gets or sets the license number for the current license.
            </summary>
            <example>
The following code enumerates the loans in which a particular Loan Officer
is licensed to originate.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Retrieve the "officer" user from the server
      User officer = session.Users.GetUser("officer");

      // Iterate over the officer's licenses
      foreach (StateLicense license in officer.StateLicenses)
      {
         // Only display enabled licenses
         if (license.Enabled)
            Console.WriteLine(license.State + ": " + license.LicenseNumber);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicense.ExpirationDate">
            <summary>
            Gets or sets the expiration date for the license.
            </summary>
            <remarks>If no license expiration date is set, </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicense.Enabled">
            <summary>
            Gets or sets whether the current license is enabled in Encompass.
            </summary>
            <example>
The following code enumerates the loans in which a particular Loan Officer
is licensed to originate.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Retrieve the "officer" user from the server
      User officer = session.Users.GetUser("officer");

      // Iterate over the officer's licenses
      foreach (StateLicense license in officer.StateLicenses)
      {
         // Only display enabled licenses
         if (license.Enabled)
            Console.WriteLine(license.State + ": " + license.LicenseNumber);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicense.Selected">
            <summary>
            Gets or sets whether the current license is selected in Encompass.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="StateLicense.xml" path="Examples/Example[@name=&quot;StateLicense.Selected&quot;]/*"/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicense.Exempt">
            <summary>
            Gets or sets whether the current license is exempt in Encompass.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="StateLicense.xml" path="Examples/Example[@name=&quot;StateLicense.Exempt&quot;]/*"/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicense.IssueDate">
            <summary>
            Gets or sets the issue date for the current license.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="StateLicense.xml" path="Examples/Example[@name=&quot;StateLicense.IssueDate&quot;]/*"/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicense.StartDate">
            <summary>
            Gets or sets the start date for the current license.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="StateLicense.xml" path="Examples/Example[@name=&quot;StateLicense.StartDate&quot;]/*"/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicense.LicenseStatus">
            <summary>
            Gets or sets the license status for the current license.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="StateLicense.xml" path="Examples/Example[@name=&quot;StateLicense.LicenseStatus&quot;]/*"/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicense.StatusDate">
            <summary>
            Gets or sets the status date for the current license.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="StateLicense.xml" path="Examples/Example[@name=&quot;StateLicense.StatusDate&quot;]/*"/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicense.LastChecked">
            <summary>
            Gets or sets the last checked date for the current license.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="StateLicense.xml" path="Examples/Example[@name=&quot;StateLicense.LastChecked&quot;]/*"/>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.StateLicenses">
            <summary>
            Provides access to the <see cref="T:EllieMae.Encompass.BusinessObjects.Users.StateLicense"/> objects associated with
            a particular <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/>.
            </summary>
            <example>
The following code fetches all of the loans for which a loan officer has
been assigned and, for each, verifies that the LO is licensed to originate loans in
the state in which the subject property resides.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Query;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Create a query to find all loans with a non-empty loan officer
      StringFieldCriterion loCri = new StringFieldCriterion();
      loCri.FieldName = "Loan.LoanOfficerID";
      loCri.Value = "";
      loCri.Include = false;

      // Fetch the loans that match the criteria
      LoanIdentityList ids = session.Loans.Query(loCri);

      foreach (LoanIdentity id in ids)
      {
         // Open the loan identified by the id
         Loan loan = session.Loans.Open(id.Guid);

         // Fetch the Loan Officer for this loan
         User lo = session.Users.GetUser(loan.LoanOfficerID);

         // Get the subject property state for the loan, which is field 14
         string propertyState = loan.Fields["14"].FormattedValue;

         if ((propertyState != "") && (lo != null))
         {
            // Check if the loan officer is licensed in that state
            StateLicense license = lo.StateLicenses[propertyState];

            if ((license == null) || !license.Enabled)
               Console.WriteLine("The loan '" + loan.Guid + "' is assigned to an unlicensed LO");
         }

         // Close the loan
         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.IStateLicenses">
            <summary>
            Interface for StateLicense class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.StateLicenses.Add(System.String)">
            <summary>
            Adds a license for a particular state.
            </summary>
            <param name="state">The state in which to add the license.</param>
            <returns>A new state license object or, if a license already exists for
            the specific state, the existing StateLicense object.</returns>
            <example>
The following code demonstrates how to add a new state license to an existing
Loan Officer account so that the LO can originate loans in that state.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Retrieve the "officer" user from the server
      User officer = session.Users.GetUser("officer");

      // Add a new license for the state of Maryland
      StateLicense license = officer.StateLicenses.Add("MD");

      // Set the license number and enable the license
      license.LicenseNumber = "ABCD01234";
      license.Enabled = true;

      // Commit the user to save changes to the license
      officer.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.StateLicenses.Add(System.String,System.String,System.DateTime,System.DateTime,System.DateTime,System.String,System.DateTime,System.Boolean,System.Boolean,System.DateTime)">
            <summary>
            Adds a license for a particular state.
            </summary>
            <param name="state">The state in which to add the license.</param>
            <returns>A new state license object or, if a license already exists for
            the specific state, the existing StateLicense object.</returns>
            <example>
The following code demonstrates how to add a new state license to an existing
Loan Officer account so that the LO can originate loans in that state.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Retrieve the "officer" user from the server
      User officer = session.Users.GetUser("officer");

      // Add a new license for the state of Maryland
      StateLicense license = officer.StateLicenses.Add("MD");

      // Set the license number and enable the license
      license.LicenseNumber = "ABCD01234";
      license.Enabled = true;

      // Commit the user to save changes to the license
      officer.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.StateLicenses.Remove(System.String)">
            <summary>
            Removes a license from the collection.
            </summary>
            <param name="state">The state for which the license should be removed.</param>
            <example>
The following code demonstrates how to remove a license from a Loan Officer
so they are no longer able to originate loans in a particular state.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Retrieve the "officer" user from the server
      User officer = session.Users.GetUser("officer");

      // Removes the user's existing license for the state of Maryland, if any
      officer.StateLicenses.Remove("MD");

      // Commit the user to save changes to the license
      officer.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.StateLicenses.Clear">
            <summary>
            Removes all licenses for the current user.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.StateLicenses.GetEnumerator">
            <summary>
            Provides an enumerator for the StateLicense objects contained in the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.StateLicenses.Item(System.String)">
            <summary>
            Returns the license for a particular state.
            </summary>
            <remarks>The state should be a 2-character abbreviation and is not
            case sensitive.</remarks>
            <example>
The following code fetches all of the loans for which a loan officer has
been assigned and, for each, verifies that the LO is licensed to originate loans in
the state in which the subject property resides.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Query;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Create a query to find all loans with a non-empty loan officer
      StringFieldCriterion loCri = new StringFieldCriterion();
      loCri.FieldName = "Loan.LoanOfficerID";
      loCri.Value = "";
      loCri.Include = false;

      // Fetch the loans that match the criteria
      LoanIdentityList ids = session.Loans.Query(loCri);

      foreach (LoanIdentity id in ids)
      {
         // Open the loan identified by the id
         Loan loan = session.Loans.Open(id.Guid);

         // Fetch the Loan Officer for this loan
         User lo = session.Users.GetUser(loan.LoanOfficerID);

         // Get the subject property state for the loan, which is field 14
         string propertyState = loan.Fields["14"].FormattedValue;

         if ((propertyState != "") && (lo != null))
         {
            // Check if the loan officer is licensed in that state
            StateLicense license = lo.StateLicenses[propertyState];

            if ((license == null) || !license.Enabled)
               Console.WriteLine("The loan '" + loan.Guid + "' is assigned to an unlicensed LO");
         }

         // Close the loan
         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.SubordinateLoanAccessRight">
            <summary>
            Defines possible Subordinate access rights
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.SubordinateLoanAccessRight.ReadWrite">
            <summary>Allows full read and write access to the loans of subordinates.</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.SubordinateLoanAccessRight.ReadOnly">
            <summary>Allows read-only access to the loans of subordinates (unless full access 
            is explicitly assigned).</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.PeerLoanAccessRight">
            <summary>
            Enumeration for determining a user's access to loans based on the rights of other users
            at the same level of the organization hierarchy (i.e. their peers).
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.PeerLoanAccessRight.None">
            <summary>
            User cannot access loans based on assigned rights of other users at the same level in the
            hierarchy.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.PeerLoanAccessRight.ReadOnly">
            <summary>Allows read-only access to the loans of peers (unless full access 
            is explicitly assigned).</summary>
        </member>
        <member name="F:EllieMae.Encompass.BusinessObjects.Users.PeerLoanAccessRight.ReadWrite">
            <summary>Allows full read and write access to the loans of users at the same
            level in the organization hierarchy.</summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.User">
            <summary>
            Represents a single Encompass user.
            </summary>
            <example>
The following code retrieves a user from the Encompass Server, modifies
its name and email address and saves it back to the server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Open the user "tony"
      User user = session.Users.GetUser("tony");
      
      // Change the user's name and email address
      user.FirstName = "Tony";
      user.LastName = "Johnson";
      user.Email = "tony@mycompany.com";
      
      // Save the user back to the server
      user.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.IUser">
            <summary>
            Interface for User class to support User Management
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.ChangeOrganization(EllieMae.Encompass.BusinessObjects.Users.Organization)">
            <summary>
            Moves the user into a new <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Organization"/>.
            </summary>
            <param name="newOrganization">The organization into which the user
            should be moved.</param>
            <remarks>This method may only be called by users with the Administrator
            persona. Additionally, it may only be called on Users which have already been
            committed to the Encompass Server.
            <p>The change of organization occurrs immediately upon calling this method. It
            is not necessary to invoke <see cref="M:EllieMae.Encompass.BusinessObjects.Users.User.Commit"/> to make this change permanent.</p>
            </remarks>
            <example>
The following code moves all of the Loan Officers into a new Organization
called "Loan Officers" which is placed directly under the root organization.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Fetch the top-level organization
      Organization rootOrg = session.Organizations.GetTopMostOrganization();

      // Create a new suborganization to hold the Loan Officers
      // The organization must be committed before we add users to it.
      Organization loOrg = rootOrg.CreateSuborganization("Loan Officers");
      loOrg.Commit();

      // Get the "Loan Officer" Persona
      Persona lop = session.Users.Personas.GetPersonaByName("Loan Officer");

      // Fetch the list of Loan Officers from the server
      UserList los = session.Users.GetUsersWithPersona(lop, false);

      // For each LO, move the user into the new organization
      foreach (User lo in los)
         lo.ChangeOrganization(loOrg);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.Enable">
            <summary>
            Enables the current user's account
            </summary>
            <remarks>This method can only be invoked by an Administrator. Additionally,
            a free license must be available for this user or an exception will be raised.
            <p>If invoked on an existing user (one for which <see cref="P:EllieMae.Encompass.BusinessObjects.Users.User.IsNew"/> return
            <c>false</c>, the change will occur immediately without a need to call the
            <see cref="M:EllieMae.Encompass.BusinessObjects.Users.User.Commit"/> method.</p></remarks>
            <example>
The following code enables all of the user accounts in the 
"Loan Officers" organization.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Fetch the "Loan Officers" organization(s)
      OrganizationList orgs = session.Organizations.GetOrganizationsByName("Loan Officers");

      foreach (Organization org in orgs)
      {
         // Fetch all of the users from the organization
         UserList users = org.GetUsers();

         // For each LO, move the user into the new organization
         foreach (User user in users)
         {
            if (user.Enabled == false)
               user.Enable();
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.Disable">
            <summary>
            Disables the current user's account.
            </summary>
            <remarks>This method can only be invoked by an Administrator.
            <p>If invoked on an existing user (one for which <see cref="P:EllieMae.Encompass.BusinessObjects.Users.User.IsNew"/> return
            <c>false</c>, the change will occur immediately without a need to call the
            <see cref="M:EllieMae.Encompass.BusinessObjects.Users.User.Commit"/> method.</p></remarks>
            <example>
The following code disables all of the user accounts in the 
"Loan Officers" organization.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Fetch the "Loan Officers" organization(s)
      OrganizationList orgs = session.Organizations.GetOrganizationsByName("Loan Officers");

      foreach (Organization org in orgs)
      {
         // Fetch all of the users from the organization
         UserList users = org.GetUsers();

         // For each LO, move the user into the new organization
         foreach (User user in users)
         {
            if (user.Enabled)
               user.Disable();
         }
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.HasAccessTo(EllieMae.Encompass.BusinessObjects.Users.Feature)">
            <summary>
            Determines if the user is authorized to access a given feature.
            </summary>
            <param name="feature">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Feature"/> to check permissions on</param>
            <returns>Returns <c>true</c> if the user has access, <c>false</c> otherwise.</returns>
            <remarks>A user can have access to a <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Feature"/> either by virtue of their
            assigned <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona">Personas</see> or because of rights directly assigned to them.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.GrantAccessTo(EllieMae.Encompass.BusinessObjects.Users.Feature)">
            <summary>
            Grants the user explicit access to a particular feature.
            </summary>
            <param name="feature">The feature to which the user should be granted access.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.RevokeAccessTo(EllieMae.Encompass.BusinessObjects.Users.Feature)">
            <summary>
            Revokes the user's explicitly assigned access to a particular feature.
            </summary>
            <param name="feature">The feature to which the user should be granted revoked.
            This method only revokes access rights that are explicitly assigned to this user. Access rights
            gained through membership in a <see cref="T:EllieMae.Encompass.BusinessObjects.Users.UserGroup"/> are not affected by this method.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.GetCustomDataObject(System.String)">
            <summary>
            Retrieves a custom <see cref="T:EllieMae.Encompass.BusinessObjects.DataObject"/> from the Encompass Server.
            </summary>
            <param name="fileName">The file name in which the object is stored.</param>
            <returns>Returns a <see cref="T:EllieMae.Encompass.BusinessObjects.DataObject"/> containing the data.</returns>
            <remarks>This method can be used to retrieve a custom data object which is stored
            on a per-user basis. Use the <see cref="M:EllieMae.Encompass.BusinessObjects.Users.User.SaveCustomDataObject(System.String,EllieMae.Encompass.BusinessObjects.DataObject)"/> to save a custom
            object to the Encompass Server.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.SaveCustomDataObject(System.String,EllieMae.Encompass.BusinessObjects.DataObject)">
            <summary>
            Saves a custom <see cref="T:EllieMae.Encompass.BusinessObjects.DataObject"/> to the Encompass Server for the specified user.
            </summary>
            <param name="fileName">The file name to which the object will be stored.</param>
            <param name="dataObj">The custom data object to be stored on the Encompass Server.</param>
            <remarks>Use this method to store custom, user-specific data to the Encompass Server.
            Then use the <see cref="M:EllieMae.Encompass.BusinessObjects.Users.User.GetCustomDataObject(System.String)"/> method to later retrieve this object.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.AppendToCustomDataObject(System.String,EllieMae.Encompass.BusinessObjects.DataObject)">
            <summary>
            Appends a <see cref="T:EllieMae.Encompass.BusinessObjects.DataObject"/> to a previously-created custom data object for the specified user.
            </summary>
            <param name="fileName">The file name of the custom data object.</param>
            <param name="dataObj">The custom data object to be appended.</param>
            <remarks>If the specified custom data object does not exist, one will be created
            and the specified content added to it.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.DeleteCustomDataObject(System.String)">
            <summary>
            Deletes a <see cref="T:EllieMae.Encompass.BusinessObjects.DataObject"/> custom data object for the specified user.
            </summary>
            <param name="fileName">The file name of the custom data object.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.Commit">
            <summary>
            Commits the changes to the current user.
            </summary>
            <example>
The following code retrieves a user from the Encompass Server, modifies
its name and email address and saves it back to the server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Open the user "tony"
      User user = session.Users.GetUser("tony");
      
      // Change the user's name and email address
      user.FirstName = "Tony";
      user.LastName = "Johnson";
      user.Email = "tony@mycompany.com";
      
      // Save the user back to the server
      user.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.Delete">
            <summary>
            Deletes the current user.
            </summary>
            <remarks>This method can only be invoked by an Administrator.</remarks>
            <example>
The following code deletes all of the Loan Processors to whom no loans
are currently assigned.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Get "Loan Processor" persona
      Persona lop = session.Users.Personas.GetPersonaByName("Loan Processor");

      // Fetch the list of Loan Processors from the server
      UserList users = session.Users.GetUsersWithPersona(lop, false);

      foreach (User lp in lps)
      {
         // Create the query criterion that specifies an exact match based on the LP's ID
         StringFieldCriterion lpCri = new StringFieldCriterion();
         lpCri.FieldName = "Loan.LoanProcessorID";
         lpCri.Value = lp.ID;
         
         // Run the query to get the list of matching loans
         LoanIdentityList assignedLoans = session.Loans.Query(lpCri);

         // If no loans are assigned, delete the user
         if (assignedLoans.Count == 0)
            lp.Delete();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.Refresh">
            <summary>
            Refreshes the information for the current user.
            </summary>
            <remarks>This method will cause any changes made since the object was last
            committed to be lost. This includes any changes made to the 
            <see cref="P:EllieMae.Encompass.BusinessObjects.Users.User.StateLicenses"/> associated with the user.</remarks>
            <example>
The following code demonstrates the use of the Refresh method by making
several changes to a user and then discarding them.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Retrieve the "officer" user from the server
      User officer = session.Users.GetUser("officer");

      // Make some changes to the object
      officer.FirstName = "New";
      officer.LastName = "Name";

      // Now discard the changes by refreshing the object
      officer.Refresh();

      // Display the name to verify the original value is in place
      Console.WriteLine(officer.FirstName + " " + officer.LastName);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.GetUserGroups">
            <summary>
            Returns the set of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.UserGroup">UserGroups</see> to which the user belongs.
            </summary>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.UserGroupList"/> containing the set of user groups to which
            the user has membership, either through direct assignment or by virtue of its position
            within the organization hierarchy.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.ToString">
            <summary>
            Returns a string representation of the user.
            </summary>
            <returns>The current user's first and last names, separated by a space.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.GetHashCode">
            <summary>
            Provides a hash code value for the user.
            </summary>
            <returns>A hash code that can be used in Hashtable objects.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.Equals(System.Object)">
            <summary>
            Indicates if two User objects represent the same persistent user.
            </summary>
            <param name="obj">The User object to which to compare the current object.</param>
            <returns>Returns <c>true</c> if the users have the same UserID and come from the same
            <see cref="T:EllieMae.Encompass.Client.Session">Session</see>, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.User.Wrap(EllieMae.Encompass.Client.Session,EllieMae.EMLite.RemotingServices.UserInfo)">
            <summary>
            This method is for internal Encompass use only and should not be called from
            your code.
            </summary>
            <exclude/>
        </member>
        <member name="E:EllieMae.Encompass.BusinessObjects.Users.User.Committed">
            <summary>Event indicating that the object has been committed to the server.</summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.ID">
            <summary>
            Gets the user's Encompass Login ID.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.Password">
            <summary>
            Gets or sets the user's login password.
            </summary>
            <remarks>Use this property to modify a user's password. Only the user corresponding to this object or an Administrator can set
            this property.
            <p>When an existing User is retrieved from the Encompass Server, the Password
            property will return an empty string even if the user's password is non-empty.
            This property will only return a non-empty value if a password is set on it during
            the object's lifetime.</p>
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.FirstName">
            <summary>
            Gets or sets the user's first name.
            </summary>
            <remarks>Only the user corresponding to this object or an Administrator can set
            this property.</remarks>
            <example>
The following code retrieves a user from the Encompass Server, modifies
its name and email address and saves it back to the server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Open the user "tony"
      User user = session.Users.GetUser("tony");
      
      // Change the user's name and email address
      user.FirstName = "Tony";
      user.LastName = "Johnson";
      user.Email = "tony@mycompany.com";
      
      // Save the user back to the server
      user.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.MiddleName">
            <summary>
            Gets or sets the user's middle name.
            </summary>
            <remarks>Only the user corresponding to this object or an Administrator can set
            this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.Suffix">
            <summary>
            Gets or sets the user's suffix name.
            </summary>
            <remarks>Only the user corresponding to this object or an Administrator can set
            this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.LastName">
            <summary>
            Gets or sets the user's last name.
            </summary>
            <remarks>Only the user corresponding to this object or an Administrator can set
            this property.</remarks>
            <example>
The following code retrieves a user from the Encompass Server, modifies
its name and email address and saves it back to the server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Open the user "tony"
      User user = session.Users.GetUser("tony");
      
      // Change the user's name and email address
      user.FirstName = "Tony";
      user.LastName = "Johnson";
      user.Email = "tony@mycompany.com";
      
      // Save the user back to the server
      user.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.FullName">
            <summary>
            Gets the full name of the user.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.EmployeeID">
            <summary>
            Gets or sets the user's employee id.
            </summary>
            <remarks>Only the user corresponding to this object or an Administrator can set
            this property.</remarks>
            <example>
The following code retrieves a user from the Encompass Server, modifies
its name and email address and saves it back to the server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Open the user "tony"
      User user = session.Users.GetUser("tony");
      
      // Change the user's name and email address
      user.FirstName = "Tony";
      user.LastName = "Johnson";
      user.Email = "tony@mycompany.com";
      
      // Save the user back to the server
      user.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.Personas">
            <summary>
            Gets the persona(s) assigned to the current user.
            </summary>
            <example>
The following code retrieves all Loan Officers from the Encompass Server and
displays them.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Get the "Loan Officer" Persona
      Persona lop = session.Users.Personas.GetPersonaByName("Loan Officer");

      // Fetch the list of Loan Officers from the server
      UserList los = session.Users.GetUsersWithPersona(lop, false);

      // List all users with Loan Officer persona
      foreach (User lo in los)
      {
         Console.WriteLine(string.Format("{0} {1} ({2})", lo.FirstName, lo.LastName, lo.ID));
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.Email">
            <summary>
            Gets or sets the user's email address.
            </summary>
            <remarks>Only the user corresponding to this object or an Administrator can set
            this property.</remarks>
            <example>
The following code retrieves a user from the Encompass Server, modifies
its name and email address and saves it back to the server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Open the user "tony"
      User user = session.Users.GetUser("tony");
      
      // Change the user's name and email address
      user.FirstName = "Tony";
      user.LastName = "Johnson";
      user.Email = "tony@mycompany.com";
      
      // Save the user back to the server
      user.Commit();

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.Phone">
            <summary>
            Gets or sets the user's phone number.
            </summary>
            <remarks>Only the user corresponding to this object or an Administrator can set
            this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.CellPhone">
            <summary>
            Gets or sets the user's cell phone number.
            </summary>
            <remarks>Only the user corresponding to this object or an Administrator can set
            this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.Fax">
            <summary>
            Gets or sets the user's fax number.
            </summary>
            <remarks>Only the user corresponding to this object or an Administrator can set
            this property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.WorkingFolder">
            <summary>
            Gets or sets the user's working folder.
            </summary>
            <remarks>The currently logged in user must have Administrator privileges to set this
            property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.RequirePasswordChange">
            <summary>
            Gets or sets if the user must change their password at the next login.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.PasswordChangedDate">
            <summary>
            Gets the latest password change date to proactively inform my users about their expiring password
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.AccountLocked">
            <summary>
            Gets or sets whether the user is prohibited for logging into their account.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.CHUMID">
            <summary>
            Gets or sets the CHUM ID for the user
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.NMLSOriginatorID">
            <summary>
            Gets or sets the NMLS Loan Originator ID for the user
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.NMLSExpirationDate">
            <summary>
            Gets or sets the NMLS Loan Originator ID for the user
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.SubordinateLoanAccessRight">
            <summary>
            Gets or sets the default access rights that the user has when accessing the
            loans of his subordinates.
            </summary>
            <remarks>The currently logged in user must have Administrator privileges to set this
            property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.PeerLoanAccessRight">
            <summary>
            Gets or sets the default access rights that the user has when accessing the
            loans of his subordinates.
            </summary>
            <remarks>The currently logged in user must have Administrator privileges to set this
            property.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.StateLicenses">
            <summary>
            Fetches the collection of state licensing information for the user.
            </summary>
            <example>
The following code fetches all of the loans for which a loan officer has
been assigned and, for each, verifies that the LO is licensed to originate loans in
the state in which the subject property resides.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Query;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Create a query to find all loans with a non-empty loan officer
      StringFieldCriterion loCri = new StringFieldCriterion();
      loCri.FieldName = "Loan.LoanOfficerID";
      loCri.Value = "";
      loCri.Include = false;

      // Fetch the loans that match the criteria
      LoanIdentityList ids = session.Loans.Query(loCri);

      foreach (LoanIdentity id in ids)
      {
         // Open the loan identified by the id
         Loan loan = session.Loans.Open(id.Guid);

         // Fetch the Loan Officer for this loan
         User lo = session.Users.GetUser(loan.LoanOfficerID);

         // Get the subject property state for the loan, which is field 14
         string propertyState = loan.Fields["14"].FormattedValue;

         if ((propertyState != "") && (lo != null))
         {
            // Check if the loan officer is licensed in that state
            StateLicense license = lo.StateLicenses[propertyState];

            if ((license == null) || !license.Enabled)
               Console.WriteLine("The loan '" + loan.Guid + "' is assigned to an unlicensed LO");
         }

         // Close the loan
         loan.Close();
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.OrganizationID">
            <summary>
            Gets the ID of the <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Organization"/> to which the user belongs.
            </summary>
            <example>
The following code prints out the names of the organizations which contain
one or more Loan Officer.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class UserManager
{
   public static void Main()
   {
      // Open the session to the remote server. We will need to be logged 
      // in as an Administrator to modify the user accounts.
      Session session = new Session();
      session.Start("myserver", "admin", "adminpwd");

      // Get the "Loan Officer" Persona
      Persona lop = session.Users.Personas.GetPersonaByName("Loan Officer");

      // Fetch the list of Loan Officers from the server
      UserList los = session.Users.GetUsersWithPersona(lop, false);

      // For each LO, fetch the organization in which the user belongs
      // and print is name
      foreach (User lo in los)
      {
         // Retrieve the organization
         Organization org = session.Organizations.GetOrganization(lo.OrganizationID);

         // Write the name to the console
         Console.WriteLine(org.Name);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.FailedLoginAttempts">
            <summary>
            Gets the failed login attempts for AE User.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="User.xml" path="Examples/Example[@name=&quot;User.FailedLoginAttempts&quot;]/*"/>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.Enabled">
            <summary>
            Gets a flag indicating id the user's account is enabled.
            </summary>
            <remarks>To enable or disable a user's account use the <see cref="M:EllieMae.Encompass.BusinessObjects.Users.User.Enable"/>
            and <see cref="M:EllieMae.Encompass.BusinessObjects.Users.User.Disable"/> methods, respectively.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.User.IsNew">
            <summary>
            A flag indicating if the user is new and yet to be committed to the database.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.UserGroup">
            <summary>
            Represents a User Group within Encompass, which can be used to assign access rights to users.
            </summary>
            <remarks>User Groups are used to assign a single set of access rights to group of users,
            eliminating the need to assign rights on a user-by-user basis.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.IUserGroup">
            <summary>
            Interface for UserGroup class
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserGroup.GetUsers">
            <summary>
            Returns a collection of all users in the group.
            </summary>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.UserList"/> containing the <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User">Users</see>
            associated with this group. This includes both users directly assigned to the group as
            well as users who belong to oganizations assigned to the group.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserGroup.AddUser(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Adds a user to the group.
            </summary>
            <param name="userToAdd">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/> to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserGroup.AddOrganization(EllieMae.Encompass.BusinessObjects.Users.Organization,System.Boolean)">
            <summary>
            Adds a branch of the organization hierarchy to the User Group.
            </summary>
            <param name="orgToAdd">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Organization"/> to be added to the group.</param>
            <param name="includeChildren">Indicates if the children of the specified organization
            are also included in the group.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserGroup.RemoveUser(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Removes a user from the User Group.
            </summary>
            <param name="userToRemove">The user to be removed.</param>
            <remarks>Note that if a user is included in a group implicitly (i.e. based on their
            place in the organization hierarchy), this method will not remove them from the group.
            This method will remove users who were explicitly added to the group only.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserGroup.RemoveOrganization(EllieMae.Encompass.BusinessObjects.Users.Organization)">
            <summary>
            Removes the specified organization from the group.
            </summary>
            <param name="orgToRemove">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Organization"/> to be removed.</param>
            <remarks>If the specified organization was added such that all of its children
            are also included in the group, removing the organization will also remove all of
            its children.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserGroup.ToString">
            <summary>
            Provides a string representation of the object.
            </summary>
            <returns>Returns the <see cref="P:EllieMae.Encompass.BusinessObjects.Users.UserGroup.Name"/> of the group.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserGroup.Equals(System.Object)">
            <summary>
            Determines if two UserGroup objects represent the same group.
            </summary>
            <param name="obj">The UserGroup against which to compare.</param>
            <returns>Returns <c>true</c> if the two objects represent the same group,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserGroup.GetHashCode">
            <summary>
            Provides a hash code for the group.
            </summary>
            <returns>Returns the <see cref="P:EllieMae.Encompass.BusinessObjects.Users.UserGroup.ID"/> of the current group.</returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.UserGroup.ID">
            <summary>
            Gets the unique identifier for the user group.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.UserGroup.Name">
            <summary>
            Returns the name of the user group.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.UserGroups">
            <summary>
            Summary description for UserGroups.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.IUserGroups">
            <summary>
            Interface for UserGroups class
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserGroups.GetGroupByID(System.Int32)">
            <summary>
            Retrieves a User Group using it's unique ID.
            </summary>
            <param name="groupId">The ID of the group to be retrieved.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.UserGroup"/> with the specified ID, or <c>null</c>
            if no group with the specified ID is found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserGroups.GetGroupByName(System.String)">
            <summary>
            Retrieves a User Group using its name.
            </summary>
            <param name="groupName">The name of the desired group.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.UserGroup"/> with the specified name, or <c>null</c>
            if no group with the specified name is found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserGroups.GetEnumerator">
            <summary>
            Returns an enumerator for iterating over the groups in the collection.
            </summary>
            <returns>Returns an enumerator for the collection.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserGroups.Refresh">
            <summary>
            Refreshes the UserGroup information to ensure it reflects what is in the Encompass
            system.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.UserGroups.Count">
            <summary>
            Returns the number of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.UserGroup"/> objects defined in Encompass.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.UserGroups.Item(System.Int32)">
            <summary>
            Retrieves a <see cref="T:EllieMae.Encompass.BusinessObjects.Users.UserGroup"/> by index from the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.UserGroups.AllUsers">
            <summary>
            Returns the "All Users" group.
            </summary>
            <remarks>This group automatically includes every user in Encompass and cannot
            have its membership modified.</remarks>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.UserPersonas">
            <summary>
            Represents the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/> types that are assigned to a <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.IUserPersonas">
            <summary>
            Interface for Persona class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserPersonas.Add(EllieMae.Encompass.BusinessObjects.Users.Persona)">
            <summary>
            Adds a persona to the collection.
            </summary>
            <param name="p">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/> to be added.</param>
            <remarks>Each persona can be added at most once to this collection.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserPersonas.AddRange(EllieMae.Encompass.Collections.PersonaList)">
            <summary>
            Adds a collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/> objects to the user's persona list.
            </summary>
            <param name="personas">A enumerable collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/> objects.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserPersonas.Replace(EllieMae.Encompass.Collections.PersonaList)">
            <summary>
            Replaces the set of personas with a new set.
            </summary>
            <param name="personas">The set of personas used to replace the current personas.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserPersonas.Remove(EllieMae.Encompass.BusinessObjects.Users.Persona)">
            <summary>
            Removes a <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/> from the collection.
            </summary>
            <param name="p">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/> to be removed.</param>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserPersonas.Clear">
            <summary>
            Clears the list of assigned personas.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserPersonas.Contains(EllieMae.Encompass.BusinessObjects.Users.Persona)">
            <summary>
            Determines if a persona is contained in the collection.
            </summary>
            <param name="p">The persona to check against.</param>
            <returns>Returns <c>true</c> if the <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/> is in the collection,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.UserPersonas.GetEnumerator">
            <summary>
            Provides a enumerator for the collection.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.UserPersonas.Count">
            <summary>
            Returns the number of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/> objects in the collection.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.UserPersonas.Item(System.Int32)">
            <summary>
            Returns a <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona"/> from the collection by index.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.Users">
            <summary>
            Provides methods for accessing the Encompass users database.
            </summary>
            <example>
The following code lists all of the currently defined users on the
Encompass server along with their personas.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the list of all users
      UserList users = session.Users.GetAllUsers();

      for (int i = 0; i < users.Count; i++)
      {
         Console.WriteLine("User " + users[i].ID + " has personas:");
         foreach (Persona persona in users[i].Personas)
            Console.WriteLine("\t" + persona.Name);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.BusinessObjects.Users.IUsers">
            <summary>
            Interface for Users class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Users.GetAllUsers">
            <summary>
            Returns a list of all defined users.
            </summary>
            <returns>A <see cref="T:EllieMae.Encompass.Collections.UserList">UserList</see>
            containing the <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User">User</see> objects.</returns>
            <example>
The following code lists all of the currently defined users on the
Encompass server along with their personas.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the list of all users
      UserList users = session.Users.GetAllUsers();

      for (int i = 0; i < users.Count; i++)
      {
         Console.WriteLine("User " + users[i].ID + " has personas:");
         foreach (Persona persona in users[i].Personas)
            Console.WriteLine("\t" + persona.Name);
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Users.GetUsersWithPersona(EllieMae.Encompass.BusinessObjects.Users.Persona,System.Boolean)">
            <summary>
            Returns a list of users who are assigned a specified Persona.
            </summary>
            <param name="persona">The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona">Persona</see> of the desired users.</param>
            <param name="exactMatch">A flag to indicate if a user should be returned only
            if his assigned persona exactly matches the one specified.</param>
            <returns>A <see cref="T:EllieMae.Encompass.Collections.UserList">UserList</see>
            containing the requested <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User">User</see> obejcts.</returns>
            <example>
The following code lists all of the currently defined Loan Officers.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Get the "Loan Officer" Persona
      Persona lo = session.Users.Personas.GetPersonaByName("Loan Officer");

      // Fetch the list of Loan Officers from the server
      UserList users = session.Users.GetUsersWithPersona(lo, false);

      for (int i = 0; i < users.Count; i++)
      {
         Console.WriteLine("User " + users[i].ID + " has personas:");
         foreach (Persona persona in users[i].Personas)
            Console.WriteLine("\t" + persona.Name);    
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Users.GetUser(System.String)">
            <summary>
            Retrieves the specified user from the Encompass server.
            </summary>
            <param name="userId">The Encompass Login ID for the desired user.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User">User</see> object for the requested user, or
            null if no such user exists.</returns>
            <example>
The following code lists opens the Loan Officer currently associated with
a loan.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch the loan for the specified GUID
      Loan loan = session.Loans.Open(args[0]);

      // Get the LOID field, which contains the User ID of the Loan
      // Officer, if one has been assigned.
      string loid = loan.Fields["LOID"].FormattedValue;

      if (loid != "")
      {
         // Retrieve the Loan Officer's user information
         User lo = session.Users.GetUser(loid);
         Console.WriteLine("The Loan Officer is " + lo.FirstName + " " + lo.LastName);
      }
      else
      {
         Console.WriteLine("No Loan Officer has been assigned to this loan.");
      }

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Users.GetExternalUserByEmailandSiteID(System.String,System.String)">
            <summary>
            Retrieves the specified user from the Encompass server.
            </summary>
            <param name="loginEmail">The login email for the desired user.</param>
            <param name="SiteID">The site ID for the desired user.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.ExternalUser">ExternalUser</see> object for the requested user, or
            null if no such user exists.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Users.GetExternalUserByExternalID(System.String)">
            <summary>
            Retrieves the specified user from the Encompass server.
            </summary>
            <param name="externalUserID">The externaluserID for the desired user.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.ExternalUser">ExternalUser</see> object for the requested user, or
            null if no such user exists.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Users.GetExternalUserByContactID(System.String)">
            <summary>
            Retrieves the specified user from the Encompass server.
            </summary>
            <param name="contactID">The contactID for the desired user.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.ExternalUser">ExternalUser</see> object for the requested user, or
            null if no such user exists.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Users.ValidateExternalUserBySiteID(System.String,System.String,System.String)">
            <summary>
            Retrieves the specified user from the Encompass server.
            </summary>
            <param name="loginEmail">The login email for the desired user.</param>
            <param name="password">The login password for the desired user.</param>
            <param name="siteID">The login siteID for the desired user.</param>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.ExternalUser">ExternalUser</see> object for the requested user, or
            null if no such user exists.</returns>
        </member>
        <member name="M:EllieMae.Encompass.BusinessObjects.Users.Users.GetTPOWCAEView(EllieMae.Encompass.BusinessObjects.Users.User,System.Int32)">
            <summary>
            Gets data view for TPO. This method is for internal use only.
            </summary>
            <param name="aeUser">AE user</param>
            <param name="urlID">url id</param>
            <returns>Array of objects</returns>
            <remarks>This method is intended for internal use only and should not be called by external
            applications.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Users.Groups">
            <summary>
            Gets the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.UserGroup">UserGroups</see> which are defined in the
            Encompass system.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.BusinessObjects.Users.Users.Personas">
            <summary>
            Gets the collection of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona">Personas</see> which are defined in the
            Encompass system.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.ConnectionException">
            <summary>
            Exception that indicates that the client was unable to establish a connection
            to a remote Encompass Server.
            </summary>
            <remarks>COM-based clients can identify this exception by comparing the
            HRESULT stored in the error information to the value <c>0x80042203</c>.
            </remarks>
        </member>
        <member name="T:EllieMae.Encompass.Client.ConnectionMonitorEventType">
            <summary>
            Enumeration defining the possible connection events.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.ConnectionMonitorEventType.Accepted">
            <summary>A new connection was accepted from a client.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.ConnectionMonitorEventType.Rejected">
            <summary>A new connection was rejected from a client.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.ConnectionMonitorEventType.Closed">
            <summary>A client connection was closed.</summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.ConnectionMonitorEventHandler">
            <summary>
            Delegate for connection events from the <see cref="T:EllieMae.Encompass.Client.ServerEvents"/> class.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.ConnectionMonitorEventArgs">
            <summary>
            Event argument class for the <see cref="E:EllieMae.Encompass.Client.ServerEvents.ConnectionMonitor"/> event.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.IConnectionMonitorEventArgs">
            <summary>
            Interface for the ConnectionEventArgs class
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.Client.ConnectionMonitorEventArgs.EventType">
            <summary>
            Gets the type of connection event that has occurred.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.ConnectionMonitorEventArgs.ClientIPAddress">
            <summary>
            Gets the IP address of the client machine.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.DataExchange">
            <summary>
            Provides methods for exchanging data with other Encompass clients.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.IDataExchange">
            <summary>
            Represents the interface for the DataObject object.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Client.DataExchange.PostDataToUser(System.String,System.Object)">
            <summary>
            Performs a data exchange with another user.
            </summary>
            <param name="userId">The ID of the user to receive the data.</param>
            <param name="data">The data to be posted.</param>
            <returns>Returns the number of sessions to which the data was sent.</returns>
            <remarks>The data being posted must be a simple data type (string, number, etc.)
            or can be any serializable .NET class that the recipient is able to deserialize.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.Client.DataExchange.PostDataToAll(System.Object)">
            <summary>
            Performs a data exchange with all users connected to the Encompass server.
            </summary>
            <param name="data">The data to be posted.</param>
            <returns>Returns the number of sessions to which the data was sent.</returns>
            <remarks>The data being posted must be a simple data type (string, number, etc.)
            or can be any serializable .NET class that the recipient is able to deserialize.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.Client.DataExchange.PostDataToSession(System.String,System.Object)">
            <summary>
            Performs a data exchange with all users connected to the Encompass server.
            </summary>
            <param name="serverSessionId">The ServerSessionID of the session to receive the data.</param>
            <param name="data">The data to be posted.</param>
            <returns>Returns the number of sessions to which the data was sent.</returns>
            <remarks>The data being posted must be a simple data type (string, number, etc.)
            or can be any serializable .NET class that the recipient is able to deserialize.
            This method requries the ServerSessionID from the Session and not the ID.
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.Client.DataExchange.GetCustomDataObject(System.String)">
            <summary>
            Gets a custom data file from the Encompass Server.
            </summary>
            <param name="fileName">The name of the file to retrieve.</param>
            <returns>Returns a byte array containing the data from the remote file.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Client.DataExchange.SaveCustomDataObject(System.String,EllieMae.Encompass.BusinessObjects.DataObject)">
            <summary>
            Saves a custom data file to the Encompass Server.
            </summary>
            <param name="fileName">The name of the file to save.</param>
            <param name="data">A byte array containing the data to be saved.</param>
        </member>
        <member name="M:EllieMae.Encompass.Client.DataExchange.AppendToCustomDataObject(System.String,EllieMae.Encompass.BusinessObjects.DataObject)">
            <summary>
            Appends data to a previously-created custom data file.
            </summary>
            <param name="fileName">The name of the file to which the data will be appended.</param>
            <param name="data">The DataObject containing the data to be saved.</param>
            <remarks>If the specified custom data object does not already exist, it will be created and
            the provided data will be added to it.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.Client.DataExchange.DeleteCustomDataObject(System.String)">
            <summary>
            Saves a custom data file to the Encompass Server.
            </summary>
            <param name="fileName">The name of the file to delete.</param>
        </member>
        <member name="E:EllieMae.Encompass.Client.DataExchange.DataReceived">
            <summary>
            An event used for data exchange between Encompass clients.
            </summary>
            <remarks>The DataReceived event can be used to take advantage of Encompass's internal
            messaging system to send custom data between Encompass sessions. A message is sent
            using one of the methods <see cref="M:EllieMae.Encompass.Client.DataExchange.PostDataToUser(System.String,System.Object)"/>, <see cref="M:EllieMae.Encompass.Client.DataExchange.PostDataToSession(System.String,System.Object)"/>
            or <see cref="M:EllieMae.Encompass.Client.DataExchange.PostDataToAll(System.Object)"/>. If you have subscribed to this event, you can then
            receive this message and interpret the contents in whatever way makes sense to you.
            The Encompass application does not use this event so it is made available solely
            for use by custom application developers who need to transmit data between clients.
            </remarks>
        </member>
        <member name="T:EllieMae.Encompass.Client.DataExchangeEventHandler">
            <summary>
            Event handler delegate for the Disconnected event on the <see cref="T:EllieMae.Encompass.Client.Session">Session</see>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.DataExchangeEventArgs">
            <summary>
            Represents the event arguments for the <see cref="P:EllieMae.Encompass.Client.Session.DataExchange"/> event.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.IDataExchangeEventArgs">
            <summary>
            Interface for DataExchangeEventArgs class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.Client.DataExchangeEventArgs.Data">
            <summary>
            Gets the data portion of the exchange.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.DataExchangeEventArgs.Source">
            <summary>
            Gets the information identifying the session from which the exchange originated.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.DisconnectedEventHandler">
            <summary>
            Event handler delegate for the Disconnected event on the <see cref="T:EllieMae.Encompass.Client.Session">Session</see>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.DisconnectReason">
            <summary>
            Defines the possible disconnection causes for a <see cref="T:EllieMae.Encompass.Client.Session">Session</see>.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.DisconnectReason.SessionDisposed">
            <summary>The session was terminated by calling the End() method.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.DisconnectReason.ConnectionError">
            <summary>The session was terminated due to a connection failure with the server.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.DisconnectReason.TerminatedByServer">
            <summary>The session was terminated by the server.</summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.DisconnectedEventArgs">
            <summary>
            Defines the arguments passed into the Disconnected event on the <see cref="T:EllieMae.Encompass.Client.Session">Session</see>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.IDisconnectedEventArgs">
            <summary>
            Interface for DisconnectedEventArgs class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.Client.DisconnectedEventArgs.Reason">
            <summary>
            Gets the reason why the session was disconnected.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.ExceptionMonitorEventHandler">
            <summary>
            Delegate for exception events from the <see cref="T:EllieMae.Encompass.Client.ServerEvents"/> class.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.ExceptionMonitorEventArgs">
            <summary>
            Event argument class for the <see cref="E:EllieMae.Encompass.Client.ServerEvents.ExceptionMonitor"/> event.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.IExceptionMonitorEventArgs">
            <summary>
            Interface for the ConnectionEventArgs class
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.Client.ExceptionMonitorEventArgs.Exception">
            <summary>
            Gets the exception that triggered this event.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.ISessionEvents">
            <summary>
            Provides a COM source interface to permit COM clients to receive events from the
            Session class.
            </summary>
            <exclude/>
        </member>
        <member name="T:EllieMae.Encompass.Client.LicenseMonitorEventType">
            <summary>
            Enumeration of the types of license events available in the <see cref="T:EllieMae.Encompass.Client.LicenseMonitorEventArgs"/>.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LicenseMonitorEventType.Granted">
            <summary>License has been granted to a user</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LicenseMonitorEventType.Denied">
            <summary>License has been denied to a user</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LicenseMonitorEventType.Released">
            <summary>License has been released by user</summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.LicenseMonitorEventHandler">
            <summary>
            Delegate for license-related events from the <see cref="T:EllieMae.Encompass.Client.ServerEvents"/> class.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.LicenseMonitorEventArgs">
            <summary>
            Event argument class for the <see cref="E:EllieMae.Encompass.Client.ServerEvents.LicenseMonitor"/> event.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.ILicenseMonitorEventArgs">
            <summary>
            Interface for the ConnectionEventArgs class
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.Client.LicenseMonitorEventArgs.EventType">
            <summary>
            Gets the type of connection event that has occurred.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.LicenseMonitorEventArgs.UserID">
            <summary>
            Gets the IP address of the client machine.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.LoanMonitorEventType">
            <summary>
            Enumeration of the loan event types supported by the <see cref="T:EllieMae.Encompass.Client.LoanMonitorEventArgs"/>.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoanMonitorEventType.Opened">
            <summary>Loan has been opened by a user.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoanMonitorEventType.Locked">
            <summary>Loan has been locked by a user.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoanMonitorEventType.Unlocked">
            <summary>Loan has been unlocked by a user.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoanMonitorEventType.Saved">
            <summary>Loan has been saved by a user.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoanMonitorEventType.Imported">
            <summary>Loan has been imported by a user.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoanMonitorEventType.Exported">
            <summary>Loan has been exported by a user.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoanMonitorEventType.PermissionsChanged">
            <summary>Loan permissions have been changed by a user.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoanMonitorEventType.Closed">
            <summary>Loan has been closed by a user.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoanMonitorEventType.Created">
            <summary>Loan has been created by a user.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoanMonitorEventType.Moved">
            <summary>Loan has been moved by a user.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoanMonitorEventType.Deleted">
            <summary>Loan has been deleted by a user.</summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.LoanMonitorEventHandler">
            <summary>
            Delegate for connection events from the <see cref="T:EllieMae.Encompass.Client.ServerEvents"/> class.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.LoanMonitorEventArgs">
            <summary>
            Event argument class for the <see cref="E:EllieMae.Encompass.Client.ServerEvents.LoanMonitor"/> event.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.ILoanMonitorEventArgs">
            <summary>
            Interface for the ConnectionEventArgs class
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.Client.LoanMonitorEventArgs.EventType">
            <summary>
            Gets the type of connection event that has occurred.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.LoanMonitorEventArgs.SessionInformation">
            <summary>
            Gets the IP address of the client machine.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.LoanMonitorEventArgs.LoanIdentity">
            <summary>
            Gets the identity of the loan being acted upon.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.LoginErrorType">
            <summary>
            Enumeration of the possible login failure reasons.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoginErrorType.UserNotFound">
            <summary>UserID is invalid</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoginErrorType.InvalidPassword">
            <summary>Password provided does not match stored value</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoginErrorType.UserDiabled">
            <summary>User's account is disabled</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoginErrorType.LoginsDisabled">
            <summary>All logins are currently disabled on the server</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoginErrorType.ServerError">
            <summary>Internal server failure during login</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoginErrorType.UserLocked">
            <summary>User's account is locked</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoginErrorType.InvalidPersona">
            <summary>User's persona is not defined properly</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoginErrorType.ConcurrentEditingOfflineNotAllowed">
            <summary>The user is not allowed to concurrently edit while offline</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoginErrorType.IPBlocked">
            <summary>User's IP address has been blocked</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoginErrorType.ServerBusy">
            <summary>Server is currently busy</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.LoginErrorType.APIUserRestricted">
            <summary>API user cannot login</summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.LoginException">
            <summary>
            Exception indicating a failed login to an Encompass Server or offline system.
            </summary>
            <remarks>A login failure may occur if an invalid user ID or password is used, the user's
            account has been disabled, the server's license limit has been exceeded, etc.
            The exception's Message property will indicate the exact cause of the error.
            <p>COM-based application can identify this exception using the HRESULT value 0x80042104.</p>
            </remarks>
        </member>
        <member name="T:EllieMae.Encompass.Client.ILoginException">
            <summary>
            Interface for the LoginException class
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.Client.LoginException.UserID">
            <summary>
            Gets the UserID used during the failed login attempt.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.LoginException.ClientHostname">
            <summary>
            Gets the name of the machine from which the login request was received.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.LoginException.ClientIPAddress">
            <summary>
            Gets the IP address from which the login request was received.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.LoginException.ApplicationName">
            <summary>
            Gets the name of the application from which the request was received.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.LoginException.WindowsUserName">
            <summary>
            Gets the Windows Username of the account under which the client is logged in.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.LoginException.ErrorType">
            <summary>
            Gets the type of Login error which occurred.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.ServerEvents">
            <summary>
            Provides access to global server events.
            </summary>
            <remarks>Using the ServerEvents class it is possible to monitor server-wide events
            such as logins, license management and loan actions (e.g. users opening or closing a loan).
            To receive these events your code must subscribe to one or more of the event handlers
            provided by this class. Each event handler is meant to provide information on different
            types of activities on the server.
            <p>Note that if your company uses multiple Encompass Servers, only the events that occur
            on the server to which the connection is made will be received. To receive events for
            all of your Encompass servers you must establish a <see cref="T:EllieMae.Encompass.Client.Session"/> with each server
            and subscribe to its events.</p>
            </remarks>
            <example>
The following code opens a session to the Encompass Server and starts monitoring
for session-related events. Any events detected are display on the console.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;

class ServerMonitor
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Start monitoring session-related event
      session.ServerEvents.SessionMonitor += new SessionMonitorEventHandler(ServerEvents_SessionMonitor);

      // Suspend indefinitely
      Console.ReadLine();

      // End the session to gracefully disconnect from the server
      session.End();
   }
   
   private static void ServerEvents_SessionMonitor(object sender, SessionMonitorEventArgs e)
   {
      Console.WriteLine("Session " + e.SessionInformation.SessionID + 
         " (" + e.SessionInformation.ClientHostname + "/" + 
         e.SessionInformation.ClientIPAddress + "): " + e.EventType + 
         " for user " + e.SessionInformation.UserID);
   }
   
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.Client.IServerEvents">
            <summary>
            Interface for Session class.
            </summary>
            <exclude/>
        </member>
        <member name="E:EllieMae.Encompass.Client.ServerEvents.ConnectionMonitor">
            <summary>
            Provides notification of low-level connection events on the Encompass Server.
            </summary>
            <remarks>A connection events is fired whenever a new TCP/IP connections is initiated from
            a remote client machine. Additionally, an evet is fired when the connection is closed,
            although the event will often trail the actual closing of the connection by several
            minutes as the server is setup to allow a client to reconnect in the event of a low-level
            connection failure.</remarks>
        </member>
        <member name="E:EllieMae.Encompass.Client.ServerEvents.ExceptionMonitor">
            <summary>
            Provides notification of error and other exception-type events on the Encompass Server.
            </summary>
            <remarks>Most exception events will occur only when an unhandled exception occurs within
            the Encompass Server. However, you can also use this handler to catch <see cref="T:EllieMae.Encompass.Client.LoginException"/>
            events so you can monitor failed logins to your Encompass server.</remarks>
            <example>
The following code opens a session to the Encompass Server and starts monitoring
for exception-related events, in particular those that deal with failed logins.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;

class ServerMonitor
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Start monitoring exception-related event
      session.ServerEvents.ExceptionMonitor += new ExceptionMonitorEventHandler(ServerEvents_ExceptionMonitor);

      // Suspend indefinitely
      Console.ReadLine();

      // End the session to gracefully disconnect from the server
      session.End();
   }
   
   private static void ServerEvents_ExceptionMonitor(object sender, ExceptionMonitorEventArgs e)
   {
      // Check if the exception is a LoginException. If so, log that exception.
      LoginException ex = e.Exception as LoginException;

      if (ex != null)
      {
         Console.WriteLine("A login attempt for user '" + ex.UserID + "' from client " + ex.ClientIPAddress
            + " has failed. The reason was: " + ex.ErrorType);
      }
   }
   
}
]]>
</code>
</example>
        </member>
        <member name="E:EllieMae.Encompass.Client.ServerEvents.LicenseMonitor">
            <summary>
            Provides notification of licensing-related events on the Encompass Server.
            </summary>
            <remarks>When a client connection is made the Encompass Server attempts to allocate
            a license to it from the license pool. These event indicate the success or failure of that
            process as well as notifying you when a license is released back to the pool. You can
            use these event to track your license usage over time.</remarks>
        </member>
        <member name="E:EllieMae.Encompass.Client.ServerEvents.LoanMonitor">
            <summary>
            Provides notification of loan-related events on the Encompass Server.
            </summary>
            <remarks>Use the loan monitor events to track when loans are opened, saved,
            closed, imported, etc. Whenever such an action occurs, the server raises an
            event which can be captured and acted upon. The event information includes both
            information on the user who performed the event as well as the loan on which the
            action was taken.
            <p>Using the LoanMonitor event, it is possible to set up real-time synchronization
            with an external data system. The example below demonstrates how this can be done.</p>
            </remarks>
            <example>
The following code demonstrates how you can watch for changes to any loan in
Encompass and, when one occurs, extract data from the affected loan. This data
could then be saved into a remote system as a form of real-time synchronization.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;

class ServerMonitor
{
   // Declare the session globally so it can be accessed in the event handler
   static Session session = null;
   
   public static void Main()
   {
      // Open the session to the remote server
      session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Start monitoring loan-related event
      session.ServerEvents.LoanMonitor += new LoanMonitorEventHandler(ServerEvents_LoanMonitor);

      // Suspend indefinitely
      Console.ReadLine();

      // End the session to gracefully disconnect from the server
      session.End();
   }
   
   private static void ServerEvents_LoanMonitor(object sender, LoanMonitorEventArgs e)
   {
      // When a loan is saved, open the loan and retrieve its information
      if (e.EventType == LoanMonitorEventType.Saved)
      {
         Loan loan = session.Loans.Open(e.LoanIdentity.Guid);
         Console.WriteLine("The loan amount for loan " + loan.Guid + " is: " + loan.Fields["1109"].FormattedValue);
         loan.Close();
      }
   }
   
}
]]>
</code>
</example>
        </member>
        <member name="E:EllieMae.Encompass.Client.ServerEvents.SessionMonitor">
            <summary>
            Provides notification of session-related events on the Encompass Server.
            </summary>
            <remarks>Session monitoring allows you to monitor user activity in the Encompass
            Server. Whenever a user logs in or out (or their session is otherwise terminated),
            a session event occurs.</remarks>
            <example>
The following code opens a session to the Encompass Server and starts monitoring
for session-related events. Any events detected are display on the console.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;

class ServerMonitor
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Start monitoring session-related event
      session.ServerEvents.SessionMonitor += new SessionMonitorEventHandler(ServerEvents_SessionMonitor);

      // Suspend indefinitely
      Console.ReadLine();

      // End the session to gracefully disconnect from the server
      session.End();
   }
   
   private static void ServerEvents_SessionMonitor(object sender, SessionMonitorEventArgs e)
   {
      Console.WriteLine("Session " + e.SessionInformation.SessionID + 
         " (" + e.SessionInformation.ClientHostname + "/" + 
         e.SessionInformation.ClientIPAddress + "): " + e.EventType + 
         " for user " + e.SessionInformation.UserID);
   }
   
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.Client.IServerEventsInterface">
            <summary>
            Provides a COM source interface to permit COM clients to receive events from the
            ServerEvents class.
            </summary>
            <exclude/>
        </member>
        <member name="T:EllieMae.Encompass.Client.ServerMessageEventHandler">
            <summary>
            Event handler delegate for the MessageArrived event on the <see cref="T:EllieMae.Encompass.Client.Session">Session</see>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.ServerMessageEventArgs">
            <summary>
            Defines the arguments passed into the MessageArrived event on the <see cref="T:EllieMae.Encompass.Client.Session">Session</see>.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.IServerMessageEventArgs">
            <summary>
            Interface for ServerMessageEventArgs class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Client.ServerMessageEventArgs.ToString">
            <summary>
            Provides a string representation of the source and text of the message.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EllieMae.Encompass.Client.ServerMessageEventArgs.Source">
            <summary>
            Gets the User ID of the user who sent the message.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.ServerMessageEventArgs.Text">
            <summary>
            Gets the text of the message.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.EncompassEdition">
            <summary>
            An enumeration of the software editions accesible through the API.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.EncompassEdition.Unknown">
            <summary>Unknown software edition</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.EncompassEdition.Broker">
            <summary>Broker Edition</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.EncompassEdition.Banker">
            <summary>Banker Edition</summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.Session">
            <summary>
            Represents a single client connection to an Encompass Server or to an Offline
            Encompass database.
            </summary>
            <remarks>The Session object represents the entry point for an Encompass
            client session. The client application uses this object to establish a login session
            with the server and then to subsequently access object data from the
            server.
            <p>Session instances, as well as instances of any other class within the EncompassObjects
            API, are not thread-safe. If you wish to use the objects from multiple threads, 
            you will need to protect the objects to safeguard against concurrent access.</p>
            </remarks>
            <example>
The following code opens a session to a remote Encompass Server using a TCP/IP
connection on port 11081. It then opens a loan using the specified GUID value.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch a loan from the session
      Loan loan = session.Loans.Open("{9885d88a-78af-44a7-977d-5d5fd6e41a96}");
	
      if (loan == null)
         Console.WriteLine("Loan not found");
      else
         Console.WriteLine("Successfully opened loan " + loan.LoanNumber);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.Client.ISession">
            <summary>
            Interface for Session class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Client.Session.#ctor">
            <summary>
            Constructs a new, disconnected session.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Client.Session.#ctor(EllieMae.EMLite.Client.IConnection,EllieMae.EMLite.ClientServer.ISessionStartupInfo,System.String,System.String)">
            <summary>
            Constructs a session from an existing Connection object
            </summary>
            <param name="conn">The underlying connection to wrap this Session around.</param>
            <param name="startupInfo">The session starup information.</param>
            <param name="userPassword">The password for the session.</param>
            <param name="serverUri">The Encompass Server URI.</param>
        </member>
        <member name="M:EllieMae.Encompass.Client.Session.Start(System.String,System.String,System.String)">
            <summary>
            Starts a session with a remote Encompass Server.
            </summary>
            <param name="serverUri">The URI of the remote server. This URI should include the
            protocol to use (tcp or http), the hostname/port number of the remote server and,
            in the case of an HTTP server, the virtual root at which the server resides.</param>
            <param name="userId">The Encompass login ID for the current user.</param>
            <param name="password">The password for the current user.</param>
            <remarks>
            When starting a remote session, care should be taken to catch the VersionException
            if it is thrown. This exception indicates that the Encompass versions on the client
            and server are incompatible. The client or server will need to be updated with the
            correct software version in order to log in again.
            </remarks>
            <exception cref="T:EllieMae.Encompass.Client.ConnectionException">
            Indicates that the client was unable to establish a connection to the remote 
            Encompass Server.
            </exception>
            <exception cref="T:EllieMae.Encompass.Client.VersionException">
            Indicates that Encompass API on the client (local) computer is incompatible with
            the version of the Encompass Server.
            </exception>
            <exception cref="T:EllieMae.Encompass.Client.LoginException">
            Indicates that the server was unable to satisfy the login request. This may be due to
            an invalid user ID or password, the user's account being disabled, etc.
            </exception>
            <example>
The following code opens a session to a remote Encompass Server using a TCP/IP
connection on port 11081. It then opens a loan using the specified GUID value.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch a loan from the session
      Loan loan = session.Loans.Open("{9885d88a-78af-44a7-977d-5d5fd6e41a96}");
	
      if (loan == null)
         Console.WriteLine("Loan not found");
      else
         Console.WriteLine("Successfully opened loan " + loan.LoanNumber);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.Client.Session.StartOffline(System.String,System.String)">
            <summary>
            Starts an offline session with the local Encompass database.
            </summary>
            <param name="userId">The Encompass login ID for the current user.</param>
            <param name="password">The password for the current user.</param>
            <exception cref="T:EllieMae.Encompass.Client.LoginException">
            Indicates that the server was unable to satisfy the login request. This may be due to
            an invalid user ID or password, the user's account being disabled, etc.
            </exception>
            <example>
The following code opens a session to the offline Encompass database. 
It then opens a loan using the specified GUID value.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.StartOffline("mary", "maryspwd");

      // Fetch a loan from the session
      Loan loan = session.Loans.Open("{9885d88a-78af-44a7-977d-5d5fd6e41a96}");
	
      if (loan == null)
         Console.WriteLine("Loan not found");
      else
         Console.WriteLine("Successfully opened loan " + loan.LoanNumber);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.Client.Session.StartInstance(System.String,System.String,System.String)">
            <summary>
            Starts an Encompass Session in a named system instance.
            </summary>
            <param name="userId">The Encompass login ID for the current user.</param>
            <param name="password">The password for the current user.</param>
            <param name="instanceName">The name of the system instance.</param>
            <remarks>This method is intended for internal use by Encompass only and should not
            be invoked directly from user code.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.Client.Session.System#IDisposable#Dispose">
            <summary>
            Disposes of the current session.
            </summary>
            <remarks>Any subsequent calls on this Session object or any objects
            retrieved from this Session will fail after calling the Dispose() method.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.Client.Session.End">
            <summary>
            Ends the current session.
            </summary>
            <remarks>Any subsequent calls on this Session object or any objects
            retrieved from this Session will fail after calling the End() method.
            A session cannot be reused, thus any subsequent attempt to re-start
            the session will result in an exception.</remarks>
            <example>
The following code opens a session to a remote Encompass Server using a TCP/IP
connection on port 11081. It then opens a loan using the specified GUID value.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch a loan from the session
      Loan loan = session.Loans.Open("{9885d88a-78af-44a7-977d-5d5fd6e41a96}");
	
      if (loan == null)
         Console.WriteLine("Loan not found");
      else
         Console.WriteLine("Successfully opened loan " + loan.LoanNumber);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.Client.Session.GetServerTime">
            <summary>
            Returns the current time using the server's timezone.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Client.Session.GetCurrentUser">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/> who is currently logged in.
            </summary>
            <returns>The <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User"/> representing the logged in user.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Client.Session.ImpersonateUser(System.String)">
            <summary>
            Modifies the session to impersonate a different User account.
            </summary>
            <param name="userId">The UserID of the user to impersonate.</param>
            <remarks>The session must be started by a "root administrator"
            in order to perform impersonation. Use the RestoreIdentity() method to return the
            effective User ID of the session to the desired value.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.Client.Session.RestoreIdentity">
            <summary>
            Restores the identity of the session's logged in user after a call to
            <see cref="M:EllieMae.Encompass.Client.Session.ImpersonateUser(System.String)"/>.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Client.Session.Wrap(EllieMae.EMLite.Client.IConnection,EllieMae.EMLite.ClientServer.ISessionStartupInfo,System.String,System.String)">
            <summary>
            This method is for internal Encompass use only and should not be called from
            your code.
            </summary>
            <exclude/>
        </member>
        <member name="E:EllieMae.Encompass.Client.Session.Disconnected">
            <summary>
            An event which is raised when the session is disconnected from the server.
            </summary>
            <example>
The following code opens a session to a remote Encompass server and attaches an
event handler to the Disconnected event. When the client session is disconnected
from the server, whether due to a connection error, an administrator forcibly
terminating the session or the Session.End() method being called, the event gets
fired.
<code>
 <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("remoteserver", "mary", "maryspwd");

      // Add an event handler to listen for asynchronous messages
      session.Disconnected += new DisconnectedEventHandler(sessionDisconnected);

      // Wait indefinitely
      Console.ReadLine();

      // End the session to gracefully disconnect from the server
      session.End();

      // Wait for a second newline
      Console.ReadLine();
   }

   // Event handler for the Disconnected session event
   private static void sessionDisconnected(object sender, DisconnectedEventArgs e)
   {
      Console.WriteLine("The session has been disconnected");
   }
}
]]>
</code>
</example>
        </member>
        <member name="E:EllieMae.Encompass.Client.Session.MessageArrived">
            <summary>
            An event which is raised when a message arrives from the server for the current
            session.
            </summary>
            <example>
The following code opens a session to a remote Encompass server and attaches an
event handler to the MessageArrived event. When an event occurs, a message is 
written to the console.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("remoteserver", "mary", "maryspwd");

      // Add an event handler to listen for asynchronous messages
      session.MessageArrived += new ServerMessageEventHandler(sessionMessageArrived);

      // Wait indefinitely
      Console.ReadLine();

      // End the session to gracefully disconnect from the server
      session.End();
   }

   // Event handler for the MessageArrived event
   private static void sessionMessageArrived(object sender, ServerMessageEventArgs e)
   {
      Console.WriteLine("Message arrived: " + e.Text);
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.UserID">
            <summary>
            Gets the Encompass login ID for the current session.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.ClientID">
            <summary>
            Gets the ClientID from the server to which the connection is made.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.SystemID">
            <summary>
            Returns a unique identifier for the Encompass system to which the session
            is connected.
            </summary>
            <remarks>The system identifier is created when Encompass is installed
            and remains the same for all time (unless physically re-created). Additionally,
            in environment that use multiple Encompass servers, this identifier will
            be the same regardless of the server to which you connect.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.ServerID">
            <summary>
            Returns the unique identifier for the Encompass Server instance.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.ServerURI">
            <summary>
            Gets the server name and protocol information for the current session.
            </summary>
            <remarks>If the session is started with a call to StartOffline(),
            this property will return <c>null</c>.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.ID">
            <summary>
            Gets a unique session identifier (GUID) for the current session.
            </summary>
            <remarks>This value is guaranteed to be unique across all time
            and all Encompass Server instances.</remarks>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.ServerSessionID">
            <summary>
            Gets the unique for the current server session.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.EncompassEdition">
            <summary>
            Allows the caller to determine which edition of the Encompass software is installed
            on the local computer.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.Loans">
            <summary>
            Provides access to the loan-related operations provided by the connected
            server.
            </summary>
            <example>
The following code opens a session to a remote Encompass Server using a TCP/IP
connection on port 11081. It then opens a loan using the specified GUID value.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.BusinessObjects.Loans;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Fetch a loan from the session
      Loan loan = session.Loans.Open("{9885d88a-78af-44a7-977d-5d5fd6e41a96}");
	
      if (loan == null)
         Console.WriteLine("Loan not found");
      else
         Console.WriteLine("Successfully opened loan " + loan.LoanNumber);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.Calendar">
            <summary>
            Provides access to the current user's Calendar.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="Session.xml" path="Examples/Example[@name=&quot;Session.Calendar&quot;]/*"/>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.Contacts">
            <summary>
            Provides access to the contacts-related operations provided by the connected
            server.
            </summary>
            <example>
The following code opens a session to a remote Encompass server and prints out 
a list of all of the Business Contacts defined on the server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.Contacts;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("remoteserver", "mary", "maryspwd");

      // Retrieve the list of Business Contacts
      ContactList contacts = session.Contacts.GetAll(ContactType.Biz);
      
      for (int i = 0; i < contacts.Count; i++)
         Console.WriteLine(contacts[i].FirstName + " " + contacts[i].LastName);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.Users">
            <summary>
            Provides access to the user database on the Encompass server.
            </summary>
            <example>
The following code opens a session to a remote Encompass server and prints out 
all of the users defined on the server.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.BusinessObjects.Users;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("remoteserver", "mary", "maryspwd");

      // Retrieve the list of Business Contacts
      UserList users = session.Users.GetAllUsers();
      
      for (int i = 0; i < users.Count; i++)
         Console.WriteLine(users[i].FirstName + " " + users[i].LastName);

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.Organizations">
            <summary>
            Provides access to the organization hierarchy on the Encompass server.
            </summary>
            <!-- No matching elements were found for the following include tag --><include file="Session.xml" path="Examples/Example[@name=&quot;Session.Organizations&quot;]/*"/>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.ServerEvents">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.Client.Session.ServerEvents"/> object, allowing the session to subcribe to events
            from the Encompass server.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.DataExchange">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.Client.Session.DataExchange"/> object, allowing the session to pass data to another
            Encompass session on the same server.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.Reports">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.Client.Session.Reports"/> object, which provide access to efficient reporting functions.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.SystemSettings">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.Client.Session.Reports"/> object, which provide access to efficient reporting functions.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.CorrespondentMaster">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.Client.Session.CorrespondentMaster"/> object, which provide access to Correspondent Master objects.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.IsConnected">
            <summary>
            Gets a boolean indicating if the session is currently connected either to a remote
            Encompass Server or to the local, offline database.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.CorrespondentTradeService">
            <summary>
            Provides access to the organization hierarchy on the Encompass server.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.GSECommitmentService">
            <summary>
            Provides access to the organization hierarchy on the Encompass server.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.LockDeskSettingsService">
            <summary>
            Provides access to the organization hierarchy on the Encompass server.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.LoanTradeService">
            <summary>
            Gets the <see cref="T:EllieMae.Encompass.BusinessObjects.TradeManagement.LoanTrade"/> object, which provide access to Loan Trade objects.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.SecurityTradeService">
            <summary>
            Gets the <see cref="P:EllieMae.Encompass.Client.Session.SecurityTradeService"/> object, which provide access to Securty Trade objects.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.EncompassProgramDirectory">
            <summary>
            Provides the directory in which the Encompass program files are stored.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.EncompassDataDirectory">
            <summary>
            Provides the directory in which the local EncompassData files are stored.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.Session.EpassDataDirectory">
            <summary>
            Provides the directory in which the Encompass program files are stored.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.SessionInformation">
            <summary>
            Provides descriptive information about an Encompass Session.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.ISessionInformation">
            <summary>
            Interface for the SessionInformation class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.Client.SessionInformation.SessionID">
            <summary>
            Gets the unique session ID for the client's session.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.SessionInformation.UserID">
            <summary>
            Gets the User ID for the logged in user.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.SessionInformation.ClientHostname">
            <summary>
            Gets the name of the machine from which the user is logged in.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.SessionInformation.ClientIPAddress">
            <summary>
            Gets the IP address of the machine from which the user is logged in.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.SessionInformation.LoginTime">
            <summary>
            Gets the time at which this session was started.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.SessionMonitorEventType">
            <summary>
            Enumeration of session event types supported by the <see cref="T:EllieMae.Encompass.Client.SessionMonitorEventArgs"/>.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.SessionMonitorEventType.Login">
            <summary>Session has been started</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.SessionMonitorEventType.Logout">
            <summary>Session has been closed by user.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Client.SessionMonitorEventType.Terminated">
            <summary>Session has been closed due to disconnect or forceful termination.</summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.SessionMonitorEventHandler">
            <summary>
            Delegate for connection events from the <see cref="T:EllieMae.Encompass.Client.ServerEvents"/> class.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.SessionMonitorEventArgs">
            <summary>
            Event argument class for the <see cref="E:EllieMae.Encompass.Client.ServerEvents.SessionMonitor"/> event.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.ISessionMonitorEventArgs">
            <summary>
            Interface for the ConnectionEventArgs class
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.Client.SessionMonitorEventArgs.EventType">
            <summary>
            Gets the type of connection event that has occurred.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.SessionMonitorEventArgs.SessionInformation">
            <summary>
            Gets the IP address of the client machine.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Client.VersionException">
            <summary>
            Exception that indicates that an attempt was made to connect to an Encompass Server
            which has an incompatible version number.
            </summary>
            <remarks>Encompass requires that the client and server be running the same
            software version in order to ensure compatibility. If an attempt is made to
            connect to a server which is running a different version of Encompass (whether
            newer or older), this exception will be raised and the session will not be started.
            <p>This exception can be identified in COM-based applications using the 
            HRESULT value 0x80042202.</p>
            </remarks>
        </member>
        <member name="P:EllieMae.Encompass.Client.VersionException.ClientVersion">
            <summary>
            Gets the Encompass software version of the local (client) machine.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Client.VersionException.ServerVersion">
            <summary>
            Gets the Encompass software version running on the remote server.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.AppointmentList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Calendar.Appointment">Appointment</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IAppointmentList">
            <summary>
            Interface for AppointmentList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AppointmentList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AppointmentList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AppointmentList.Add(EllieMae.Encompass.BusinessObjects.Calendar.Appointment)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AppointmentList.Contains(EllieMae.Encompass.BusinessObjects.Calendar.Appointment)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AppointmentList.IndexOf(EllieMae.Encompass.BusinessObjects.Calendar.Appointment)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AppointmentList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Calendar.Appointment)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AppointmentList.Remove(EllieMae.Encompass.BusinessObjects.Calendar.Appointment)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AppointmentList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.AppointmentList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.AttachmentList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Attachment">Attachment</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IAttachmentList">
            <summary>
            Interface for AttachmentList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AttachmentList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AttachmentList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AttachmentList.Add(EllieMae.Encompass.BusinessObjects.Loans.Attachment)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AttachmentList.Contains(EllieMae.Encompass.BusinessObjects.Loans.Attachment)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AttachmentList.IndexOf(EllieMae.Encompass.BusinessObjects.Loans.Attachment)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AttachmentList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Loans.Attachment)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AttachmentList.Remove(EllieMae.Encompass.BusinessObjects.Loans.Attachment)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AttachmentList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.AttachmentList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.AuditTrailEntryList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.AuditTrailEntry">AuditTrailEntry</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IAuditTrailEntryList">
            <summary>
            Interface for AuditTrailEntryList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AuditTrailEntryList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AuditTrailEntryList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AuditTrailEntryList.Add(EllieMae.Encompass.BusinessObjects.Loans.AuditTrailEntry)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AuditTrailEntryList.Contains(EllieMae.Encompass.BusinessObjects.Loans.AuditTrailEntry)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AuditTrailEntryList.IndexOf(EllieMae.Encompass.BusinessObjects.Loans.AuditTrailEntry)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AuditTrailEntryList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Loans.AuditTrailEntry)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AuditTrailEntryList.Remove(EllieMae.Encompass.BusinessObjects.Loans.AuditTrailEntry)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.AuditTrailEntryList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.AuditTrailEntryList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.BizContactList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BizContact">BizContact</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IBizContactList">
            <summary>
            Interface for BizContactList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BizContactList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BizContactList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BizContactList.Add(EllieMae.Encompass.BusinessObjects.Contacts.BizContact)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BizContactList.Contains(EllieMae.Encompass.BusinessObjects.Contacts.BizContact)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BizContactList.IndexOf(EllieMae.Encompass.BusinessObjects.Contacts.BizContact)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BizContactList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Contacts.BizContact)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BizContactList.Remove(EllieMae.Encompass.BusinessObjects.Contacts.BizContact)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BizContactList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.BizContactList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.BorrowerContactList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact">BorrowerContact</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IBorrowerContactList">
            <summary>
            Interface for BorrowerContactList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BorrowerContactList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BorrowerContactList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BorrowerContactList.Add(EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BorrowerContactList.Contains(EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BorrowerContactList.IndexOf(EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BorrowerContactList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BorrowerContactList.Remove(EllieMae.Encompass.BusinessObjects.Contacts.BorrowerContact)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BorrowerContactList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.BorrowerContactList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.BorrowerPairList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair">BorrowerPair</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IBorrowerPairList">
            <summary>
            Interface for BorrowerPairList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BorrowerPairList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BorrowerPairList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BorrowerPairList.Add(EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BorrowerPairList.Contains(EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BorrowerPairList.IndexOf(EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BorrowerPairList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BorrowerPairList.Remove(EllieMae.Encompass.BusinessObjects.Loans.BorrowerPair)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.BorrowerPairList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.BorrowerPairList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ContactEventList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactEvent">ContactEvent</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IContactEventList">
            <summary>
            Interface for ContactEventList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactEventList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactEventList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactEventList.Add(EllieMae.Encompass.BusinessObjects.Contacts.ContactEvent)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactEventList.Contains(EllieMae.Encompass.BusinessObjects.Contacts.ContactEvent)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactEventList.IndexOf(EllieMae.Encompass.BusinessObjects.Contacts.ContactEvent)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactEventList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Contacts.ContactEvent)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactEventList.Remove(EllieMae.Encompass.BusinessObjects.Contacts.ContactEvent)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactEventList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.ContactEventList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ContactList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.Contact">Contact</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IContactList">
            <summary>
            Interface for ContactList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactList.Add(EllieMae.Encompass.BusinessObjects.Contacts.Contact)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactList.Contains(EllieMae.Encompass.BusinessObjects.Contacts.Contact)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactList.IndexOf(EllieMae.Encompass.BusinessObjects.Contacts.Contact)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Contacts.Contact)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactList.Remove(EllieMae.Encompass.BusinessObjects.Contacts.Contact)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.ContactList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ContactNoteList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactNote">ContactNote</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IContactNoteList">
            <summary>
            Interface for ContactNoteList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactNoteList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactNoteList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactNoteList.Add(EllieMae.Encompass.BusinessObjects.Contacts.ContactNote)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactNoteList.Contains(EllieMae.Encompass.BusinessObjects.Contacts.ContactNote)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactNoteList.IndexOf(EllieMae.Encompass.BusinessObjects.Contacts.ContactNote)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactNoteList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Contacts.ContactNote)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactNoteList.Remove(EllieMae.Encompass.BusinessObjects.Contacts.ContactNote)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactNoteList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.ContactNoteList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ContactOpportunityList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity">ContactOpportunity</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IContactOpportunityList">
            <summary>
            Interface for ContactOpportunityList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactOpportunityList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactOpportunityList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactOpportunityList.Add(EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactOpportunityList.Contains(EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactOpportunityList.IndexOf(EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactOpportunityList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactOpportunityList.Remove(EllieMae.Encompass.BusinessObjects.Contacts.ContactOpportunity)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ContactOpportunityList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.ContactOpportunityList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.FieldDescriptorList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor">FieldDescriptor</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IFieldDescriptorList">
            <summary>
            Interface for FieldDescriptorList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.FieldDescriptorList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.FieldDescriptorList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.FieldDescriptorList.Add(EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.FieldDescriptorList.Contains(EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.FieldDescriptorList.IndexOf(EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.FieldDescriptorList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.FieldDescriptorList.Remove(EllieMae.Encompass.BusinessObjects.Loans.FieldDescriptor)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.FieldDescriptorList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.FieldDescriptorList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IntegerList">
            <summary>
            Represents a list of integers.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IIntegerList">
            <summary>
            Interface for IntegerList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.IntegerList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.IntegerList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.IntegerList.Add(System.Int32)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.IntegerList.Contains(System.Int32)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.IntegerList.IndexOf(System.Int32)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.IntegerList.Insert(System.Int32,System.Int32)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.IntegerList.Remove(System.Int32)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.IntegerList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.IntegerList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.LoanAssociateList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate">LoanAssociate</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ILoanAssociateList">
            <summary>
            Interface for LoanAssociateList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanAssociateList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanAssociateList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanAssociateList.Add(EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanAssociateList.Contains(EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanAssociateList.IndexOf(EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanAssociateList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanAssociateList.Remove(EllieMae.Encompass.BusinessObjects.Loans.LoanAssociate)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanAssociateList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.LoanAssociateList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.LoanContactRelationshipList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship"/>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ILoanContactRelationshipList">
            <summary>
            Interface for LoanContactRelationshipList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanContactRelationshipList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanContactRelationshipList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanContactRelationshipList.Add(EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanContactRelationshipList.Contains(EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanContactRelationshipList.IndexOf(EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanContactRelationshipList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanContactRelationshipList.Remove(EllieMae.Encompass.BusinessObjects.Loans.LoanContactRelationship)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanContactRelationshipList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.LoanContactRelationshipList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.LoanFolderList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanFolder">LoanFolder</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ILoanFolderList">
            <summary>
            Interface for LoanFolderList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanFolderList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanFolderList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanFolderList.Add(EllieMae.Encompass.BusinessObjects.Loans.LoanFolder)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanFolderList.Contains(EllieMae.Encompass.BusinessObjects.Loans.LoanFolder)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanFolderList.IndexOf(EllieMae.Encompass.BusinessObjects.Loans.LoanFolder)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanFolderList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Loans.LoanFolder)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanFolderList.Remove(EllieMae.Encompass.BusinessObjects.Loans.LoanFolder)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanFolderList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.LoanFolderList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.LoanIdentityList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.LoanIdentity">LoanIdentity</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ILoanIdentityList">
            <summary>
            Interface for LoanIdentityList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanIdentityList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanIdentityList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanIdentityList.Add(EllieMae.Encompass.BusinessObjects.Loans.LoanIdentity)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanIdentityList.Contains(EllieMae.Encompass.BusinessObjects.Loans.LoanIdentity)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanIdentityList.IndexOf(EllieMae.Encompass.BusinessObjects.Loans.LoanIdentity)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanIdentityList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Loans.LoanIdentity)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanIdentityList.Remove(EllieMae.Encompass.BusinessObjects.Loans.LoanIdentity)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanIdentityList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.LoanIdentityList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.LoanReportDataList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.Reporting.LoanReportData">LoanReportData</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ILoanReportDataList">
            <summary>
            Interface for LoanReportDataList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanReportDataList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanReportDataList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanReportDataList.Add(EllieMae.Encompass.Reporting.LoanReportData)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanReportDataList.AddRange(System.Collections.ICollection)">
            <summary>
            Adds multiple items to the list.
            </summary>
            <param name="values"></param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanReportDataList.Contains(EllieMae.Encompass.Reporting.LoanReportData)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanReportDataList.IndexOf(EllieMae.Encompass.Reporting.LoanReportData)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanReportDataList.Insert(System.Int32,EllieMae.Encompass.Reporting.LoanReportData)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanReportDataList.Remove(EllieMae.Encompass.Reporting.LoanReportData)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LoanReportDataList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.LoanReportDataList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.LogEntryList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry"/>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ILogEntryList">
            <summary>
            Interface for LogEntryList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LogEntryList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LogEntryList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LogEntryList.Add(EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LogEntryList.Contains(EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LogEntryList.IndexOf(EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LogEntryList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LogEntryList.Remove(EllieMae.Encompass.BusinessObjects.Loans.Logging.LogEntry)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.LogEntryList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.LogEntryList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.OrganizationList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Organization">Organization</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IOrganizationList">
            <summary>
            Interface for OrganizationList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.OrganizationList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.OrganizationList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.OrganizationList.Add(EllieMae.Encompass.BusinessObjects.Users.Organization)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.OrganizationList.Contains(EllieMae.Encompass.BusinessObjects.Users.Organization)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.OrganizationList.IndexOf(EllieMae.Encompass.BusinessObjects.Users.Organization)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.OrganizationList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Users.Organization)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.OrganizationList.Remove(EllieMae.Encompass.BusinessObjects.Users.Organization)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.OrganizationList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.OrganizationList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.PersonaList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.Persona">Persona</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IPersonaList">
            <summary>
            Interface for PersonaList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.PersonaList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.PersonaList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.PersonaList.Add(EllieMae.Encompass.BusinessObjects.Users.Persona)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.PersonaList.Contains(EllieMae.Encompass.BusinessObjects.Users.Persona)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.PersonaList.IndexOf(EllieMae.Encompass.BusinessObjects.Users.Persona)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.PersonaList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Users.Persona)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.PersonaList.Remove(EllieMae.Encompass.BusinessObjects.Users.Persona)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.PersonaList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.PersonaList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.PipelineDataList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.PipelineData">PipelineData</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IPipelineDataList">
            <summary>
            Interface for PipelineDataList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.PipelineDataList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.PipelineDataList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.PipelineDataList.Add(EllieMae.Encompass.BusinessObjects.Loans.PipelineData)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.PipelineDataList.Contains(EllieMae.Encompass.BusinessObjects.Loans.PipelineData)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.PipelineDataList.IndexOf(EllieMae.Encompass.BusinessObjects.Loans.PipelineData)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.PipelineDataList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Loans.PipelineData)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.PipelineDataList.Remove(EllieMae.Encompass.BusinessObjects.Loans.PipelineData)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.PipelineDataList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.PipelineDataList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.RoleList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Role">Role</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IRoleList">
            <summary>
            Interface for RoleList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.RoleList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.RoleList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.RoleList.Add(EllieMae.Encompass.BusinessObjects.Loans.Role)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.RoleList.Contains(EllieMae.Encompass.BusinessObjects.Loans.Role)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.RoleList.IndexOf(EllieMae.Encompass.BusinessObjects.Loans.Role)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.RoleList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Loans.Role)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.RoleList.Remove(EllieMae.Encompass.BusinessObjects.Loans.Role)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.RoleList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.RoleList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ServicingTransactionList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction">ServicingTransaction</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IServicingTransactionList">
            <summary>
            Interface for ServicingTransactionList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ServicingTransactionList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ServicingTransactionList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ServicingTransactionList.Add(EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ServicingTransactionList.Contains(EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ServicingTransactionList.IndexOf(EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ServicingTransactionList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ServicingTransactionList.Remove(EllieMae.Encompass.BusinessObjects.Loans.Servicing.ServicingTransaction)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.ServicingTransactionList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.ServicingTransactionList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.SortCriterionList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.Query.SortCriterion">SortCriterion</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.ISortCriterionList">
            <summary>
            Interface for SortCriterionList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.SortCriterionList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.SortCriterionList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.SortCriterionList.Add(EllieMae.Encompass.Query.SortCriterion)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.SortCriterionList.Contains(EllieMae.Encompass.Query.SortCriterion)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.SortCriterionList.IndexOf(EllieMae.Encompass.Query.SortCriterion)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.SortCriterionList.Insert(System.Int32,EllieMae.Encompass.Query.SortCriterion)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.SortCriterionList.Remove(EllieMae.Encompass.Query.SortCriterion)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.SortCriterionList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.SortCriterionList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.UserGroupList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.UserGroup">UserGroup</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IUserGroupList">
            <summary>
            Interface for UserGroupList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.UserGroupList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.UserGroupList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.UserGroupList.Add(EllieMae.Encompass.BusinessObjects.Users.UserGroup)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.UserGroupList.Contains(EllieMae.Encompass.BusinessObjects.Users.UserGroup)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.UserGroupList.IndexOf(EllieMae.Encompass.BusinessObjects.Users.UserGroup)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.UserGroupList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Users.UserGroup)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.UserGroupList.Remove(EllieMae.Encompass.BusinessObjects.Users.UserGroup)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.UserGroupList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.UserGroupList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.UserList">
            <summary>
            Represents a list of <see cref="T:EllieMae.Encompass.BusinessObjects.Users.User">User</see>
            objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Collections.IUserList">
            <summary>
            Interface for UserList class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Collections.UserList.#ctor">
            <summary>
            Constructs a new, empty list.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Collections.UserList.#ctor(System.Collections.IList)">
            <summary>
            Constructs a list initialized from the specified source.
            </summary>
            <param name="source">The list of items copied into the new object.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.UserList.Add(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Adds an item to the list.
            </summary>
            <param name="value">The item to be added.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.UserList.Contains(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Determines if the list contains the specified item.
            </summary>
            <param name="value">The item to search for in the list.</param>
            <returns>Returns a boolean indication if the specified item is in the list.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.UserList.IndexOf(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Returns the index of the specified item.
            </summary>
            <param name="value">The value to search for in the list.</param>
            <returns>The index of the specified item, or -1 if not found.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Collections.UserList.Insert(System.Int32,EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Inserts a new item into the list at the specified index.
            </summary>
            <param name="index">The index at which the item will be inserted.</param>
            <param name="value">The item to be inserted.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.UserList.Remove(EllieMae.Encompass.BusinessObjects.Users.User)">
            <summary>
            Removes an item from the list.
            </summary>
            <param name="value">The item to be removed from the list.</param>
        </member>
        <member name="M:EllieMae.Encompass.Collections.UserList.ToArray">
            <summary>
            Converts the list to an Array.
            </summary>
            <returns>An array containing the items from the list.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Collections.UserList.Item(System.Int32)">
            <summary>
            Provides access to an item from the list using its index within the list.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.TablesAndFees.FeeManagementSettings">
            <summary>
            Provides access to settings under Fee Management.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.TablesAndFees.FeeManagementSettings.Fees">
            <summary>
            Returns the collection of fees
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.TablesAndFees.TablesFeesSettings">
            <summary>
            Provides access to settings under Tables and Fees.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.TablesAndFees.TablesFeesSettings.FeeManagement">
            <summary>
            Provides access to Fee Management settings.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Cursors.CursorEnumerator">
            <summary>
            Used for fast enumeration over a Cursor object.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.EncompassSettings">
            <summary>
            Provides access to basic configuration information for the current Encompass installation.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Configuration.IEncompassSettings">
            <summary>
            Interface for the EncompassSettings class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.EncompassSettings.EncompassDataDirectory">
            <summary>
            Gets the path of the local EncompassData folder.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Configuration.EncompassSettings.EncompassProgramDirectory">
            <summary>
            Gets the path of the local Encompass application folder.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Licensing.LicenseException">
            <summary>
            Exception used to notify clients that a licensing-related error has occurred.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Licensing.LicenseFile">
            <summary>
            Summary description for LicenseFile.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Licensing.LicenseManager">
            <summary>
            Provides methods for managing the Encompass SDK license. This class is meant for
            use primarilly within the Encompass SDK Licensing Tools; however, developers may
            use this class to provide increased control over client licensing.
            </summary>
            <example>
The following code demonstrates how to regenerate the Encompass SDK license 
when the current license is no longer valid.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Licensing;

class LicenseGenerator
{
   public static void Main(string[] args)
   {
      // Construct a license manager so we can check the current machine's license
      // and renegerate if necessary.
      LicenseManager mngr = new LicenseManager();
      
      // Check the license, with auto renewal disabled so we can do it manually
      if (!mngr.ValidateLicense(false))
      {
         // In order to perform use RefreshLicense(), a license key must already exist on this computer
         if (mngr.LicenseKeyExists())
         {
            try
            {
               mngr.RefreshLicense();
               Console.WriteLine("License refreshed successfully");
            }
            catch
            {
               Console.WriteLine("License refresh failed");
            }
         }
         else
         {
            try
            {
               // Generate a new license with your SDK License Key
               mngr.GenerateLicense("YourCompanyLicenseKey");
               Console.WriteLine("License generated successfully");
            }
            catch
            {
               Console.WriteLine("License generation failed");
            }
         }
      }
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.Licensing.ILicenseManager">
            <summary>
            Interface for LicenseManager class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseManager.#ctor">
            <summary>
            Constructs a new LicenseManager object.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseManager.GetEncompassVersion(System.Boolean)">
            <summary>
            Returns the current version of Encompass.
            </summary>
            <param name="includeHotfixLevel">Indicates if the version number should include the hotfix revision
            number as the fourth digit of the version.</param>
            <returns>If the <c>includeHotfixLevel</c> parameter is <c>true</c>, it returns 
            the version of Encompass as a string in the format 
            <c>&lt;MajorVersion&gt;.&lt;MinorVersion&gt;.&lt;Revision&gt;.&lt;HotfixLevel&gt;</c>, 
            e.g. "6.0.1.3". If the <c>includeHotfixLevel</c> is <c>false</c>, then the HotfixLevel
            value will be omitted from the version number, e.g. "6.0.1".</returns>
            <remarks>An Encompass client and Encompass server are considered to be compatible if and
            only if their major, minor and revision values are the same. The hotfix level does not play
            into the compatibility between client and server.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseManager.GenerateLicense(System.String)">
            <summary>
            Generates a license for the current machine based on the supplied License Key.
            </summary>
            <param name="licenseKey">The license key with which to register the SDK.</param>
            <remarks>A current connection to the Internet must exist in order to license
            the Encompass API. If the method returns without throwing an exception,
            then a license has been successfully installed on the current computer.</remarks>
            <example>
The following code demonstrates how to regenerate the Encompass SDK license 
when the current license is no longer valid.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Licensing;

class LicenseGenerator
{
   public static void Main(string[] args)
   {
      // Construct a license manager so we can check the current machine's license
      // and renegerate if necessary.
      LicenseManager mngr = new LicenseManager();
      
      // Check the license, with auto renewal disabled so we can do it manually
      if (!mngr.ValidateLicense(false))
      {
         // In order to perform use RefreshLicense(), a license key must already exist on this computer
         if (mngr.LicenseKeyExists())
         {
            try
            {
               mngr.RefreshLicense();
               Console.WriteLine("License refreshed successfully");
            }
            catch
            {
               Console.WriteLine("License refresh failed");
            }
         }
         else
         {
            try
            {
               // Generate a new license with your SDK License Key
               mngr.GenerateLicense("YourCompanyLicenseKey");
               Console.WriteLine("License generated successfully");
            }
            catch
            {
               Console.WriteLine("License generation failed");
            }
         }
      }
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseManager.RefreshLicense">
            <summary>
            Attempts to refresh the existing license for the current version of the Encompass
            software.
            </summary>
            <remarks>A current connection to the Internet must exist in order to license
            the Encompass API. If the method returns without throwing an exception,
            then a license has been successfully installed on the current computer.</remarks>
            <example>
The following code demonstrates how to regenerate the Encompass SDK license 
when the current license is no longer valid.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Licensing;

class LicenseGenerator
{
   public static void Main(string[] args)
   {
      // Construct a license manager so we can check the current machine's license
      // and renegerate if necessary.
      LicenseManager mngr = new LicenseManager();
      
      // Check the license, with auto renewal disabled so we can do it manually
      if (!mngr.ValidateLicense(false))
      {
         // In order to perform use RefreshLicense(), a license key must already exist on this computer
         if (mngr.LicenseKeyExists())
         {
            try
            {
               mngr.RefreshLicense();
               Console.WriteLine("License refreshed successfully");
            }
            catch
            {
               Console.WriteLine("License refresh failed");
            }
         }
         else
         {
            try
            {
               // Generate a new license with your SDK License Key
               mngr.GenerateLicense("YourCompanyLicenseKey");
               Console.WriteLine("License generated successfully");
            }
            catch
            {
               Console.WriteLine("License generation failed");
            }
         }
      }
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseManager.LicenseKeyExists">
            <summary>
            Indicates if the current machine has a previously registered license key.
            </summary>
            <returns>A flag indicating if a license key exists on this machine.</returns>
            <remarks>A return value of <c>true</c> does not indicate if the license key
            is valid or that the SDK will function. It simply indicates that a license
            key is present on this machine.</remarks>
            <example>
The following code demonstrates how to regenerate the Encompass SDK license 
when the current license is no longer valid.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Licensing;

class LicenseGenerator
{
   public static void Main(string[] args)
   {
      // Construct a license manager so we can check the current machine's license
      // and renegerate if necessary.
      LicenseManager mngr = new LicenseManager();
      
      // Check the license, with auto renewal disabled so we can do it manually
      if (!mngr.ValidateLicense(false))
      {
         // In order to perform use RefreshLicense(), a license key must already exist on this computer
         if (mngr.LicenseKeyExists())
         {
            try
            {
               mngr.RefreshLicense();
               Console.WriteLine("License refreshed successfully");
            }
            catch
            {
               Console.WriteLine("License refresh failed");
            }
         }
         else
         {
            try
            {
               // Generate a new license with your SDK License Key
               mngr.GenerateLicense("YourCompanyLicenseKey");
               Console.WriteLine("License generated successfully");
            }
            catch
            {
               Console.WriteLine("License generation failed");
            }
         }
      }
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseManager.ValidateLicense(System.Boolean)">
            <summary>
            Validates the current machine's license.
            </summary>
            <param name="autoRefresh">Indicates is the License Manager should attempt to
            refresh the current license, by invoking <see cref="M:EllieMae.Encompass.Licensing.LicenseManager.RefreshLicense">RefreshLicense()</see>, 
            if the computer's current license is determined to be invalid but a previously-
            registered license key is found.</param>
            <returns>Returns a boolean indicating if the current machine has a valid 
            license.</returns>
            <example>
The following code demonstrates how to regenerate the Encompass SDK license 
when the current license is no longer valid.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Licensing;

class LicenseGenerator
{
   public static void Main(string[] args)
   {
      // Construct a license manager so we can check the current machine's license
      // and renegerate if necessary.
      LicenseManager mngr = new LicenseManager();
      
      // Check the license, with auto renewal disabled so we can do it manually
      if (!mngr.ValidateLicense(false))
      {
         // In order to perform use RefreshLicense(), a license key must already exist on this computer
         if (mngr.LicenseKeyExists())
         {
            try
            {
               mngr.RefreshLicense();
               Console.WriteLine("License refreshed successfully");
            }
            catch
            {
               Console.WriteLine("License refresh failed");
            }
         }
         else
         {
            try
            {
               // Generate a new license with your SDK License Key
               mngr.GenerateLicense("YourCompanyLicenseKey");
               Console.WriteLine("License generated successfully");
            }
            catch
            {
               Console.WriteLine("License generation failed");
            }
         }
      }
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseManager.AuthorizeSession(EllieMae.EMLite.ClientServer.ISessionStartupInfo)">
            <summary>
            Authorizes the Encompass Session to ensure it can be used.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseManager.isMacAddressInList(System.String[],System.String)">
            <summary>
            Looks for a MAC address in a list of MAC addresses
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseManager.GetMacAddresses(System.Boolean)">
            <summary>
            Retrieves the MAC address info for the current system.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Licensing.LicenseService">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.#ctor">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.RegisterInstall(System.String,System.String,System.String[])">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.BeginRegisterInstall(System.String,System.String,System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.EndRegisterInstall(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.RegisterInstallAsync(System.String,System.String,System.String[])">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.RegisterInstallAsync(System.String,System.String,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.RegisterInstall2(System.String,System.String,System.String[])">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.BeginRegisterInstall2(System.String,System.String,System.String[],System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.EndRegisterInstall2(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.RegisterInstall2Async(System.String,System.String,System.String[])">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.RegisterInstall2Async(System.String,System.String,System.String[],System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.GetUpdate(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.BeginGetUpdate(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.EndGetUpdate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.GetUpdateAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.GetUpdateAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.ValidateUpdate(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.BeginValidateUpdate(System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.EndValidateUpdate(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.ValidateUpdateAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.ValidateUpdateAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.ValidateExport(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.BeginValidateExport(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.EndValidateExport(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.ValidateExportAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.ValidateExportAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.AuthorizeSession(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.BeginAuthorizeSession(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.AsyncCallback,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.EndAuthorizeSession(System.IAsyncResult)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.AuthorizeSessionAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.AuthorizeSessionAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.Encompass.Licensing.LicenseService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:EllieMae.Encompass.Licensing.LicenseService.RegisterInstallCompleted">
            <remarks/>
        </member>
        <member name="E:EllieMae.Encompass.Licensing.LicenseService.RegisterInstall2Completed">
            <remarks/>
        </member>
        <member name="E:EllieMae.Encompass.Licensing.LicenseService.GetUpdateCompleted">
            <remarks/>
        </member>
        <member name="E:EllieMae.Encompass.Licensing.LicenseService.ValidateUpdateCompleted">
            <remarks/>
        </member>
        <member name="E:EllieMae.Encompass.Licensing.LicenseService.ValidateExportCompleted">
            <remarks/>
        </member>
        <member name="E:EllieMae.Encompass.Licensing.LicenseService.AuthorizeSessionCompleted">
            <remarks/>
        </member>
        <member name="T:EllieMae.Encompass.Licensing.ApiRegistrationInfo">
            <remarks/>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.Licensing.ApiRegistrationInfo.ClientID">
            <remarks/>
        </member>
        <member name="P:EllieMae.Encompass.Licensing.ApiRegistrationInfo.AutoAuthorizeSessions">
            <remarks/>
        </member>
        <member name="T:EllieMae.Encompass.Licensing.RegisterInstallCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:EllieMae.Encompass.Licensing.RegisterInstallCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:EllieMae.Encompass.Licensing.RegisterInstallCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:EllieMae.Encompass.Licensing.RegisterInstall2CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:EllieMae.Encompass.Licensing.RegisterInstall2CompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:EllieMae.Encompass.Licensing.RegisterInstall2CompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:EllieMae.Encompass.Licensing.GetUpdateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:EllieMae.Encompass.Licensing.GetUpdateCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:EllieMae.Encompass.Licensing.GetUpdateCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:EllieMae.Encompass.Licensing.ValidateUpdateCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:EllieMae.Encompass.Licensing.ValidateExportCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:EllieMae.Encompass.Licensing.AuthorizeSessionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:EllieMae.Encompass.Licensing.AuthorizeSessionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:EllieMae.Encompass.Licensing.AuthorizeSessionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:EllieMae.Encompass.Query.BooleanLogicCriterion">
            <summary>
            Represents a Query Criterion which is composed of two subcriteria joined by either
            an AND or OR logic.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Query.QueryCriterion">
            <summary>
            Provides a base class for all query criterion classes.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Query.IQueryCriterion">
            <summary>
            Interface for QueryCriterion class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Query.QueryCriterion.And(EllieMae.Encompass.Query.QueryCriterion)">
            <summary>
            Combines the current query criterion with the one provided using boolean AND
            logic to produce a composite criterion.
            </summary>
            <param name="criterion">The query criterion that will act as the right hand
            side of the boolean operation.</param>
            <returns>A new query criterion object representing the logical AND of
            the current and specified criteria.</returns>
            <example>
The following example demonstrates how to combine criterion objects using
the And() and Or() methods into a complex query.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // We first want to look for Business Partners who are appraisers
      NumericFieldCriterion catCri = new NumericFieldCriterion();
      catCri.FieldName = "Contact.CategoryID";
      catCri.Value = session.Contacts.BizCategories.GetItemByName("Appraiser").ID;
      
      // Now we want the Fees to be either greater than $350 or less than $250
      NumericFieldCriterion feeCriHigh = new NumericFieldCriterion();
      feeCriHigh.FieldName = "Contact.Fees";
      feeCriHigh.Value = 350;
      feeCriHigh.MatchType = OrdinalFieldMatchType.GreaterThan;

      NumericFieldCriterion feeCriLow = new NumericFieldCriterion();
      feeCriLow.FieldName = "Contact.Fees";
      feeCriLow.Value = 250;
      feeCriLow.MatchType = OrdinalFieldMatchType.LessThan;

      // Join the fee criteria with OR logic
      QueryCriterion feeCri = feeCriHigh.Or(feeCriLow);

      // Next, join the the fee criteria with the category criteria
      QueryCriterion allCri = catCri.And(feeCri);

      // Query for the matching contacts and then print their names
      ContactList contacts = session.Contacts.Query(allCri, ContactLoanMatchType.None, ContactType.Biz);

      // Print the names of the matching contacts
      for (int i = 0; i < contacts.Count; i++)
         Console.WriteLine(contacts[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.Query.QueryCriterion.Or(EllieMae.Encompass.Query.QueryCriterion)">
            <summary>
            Combines the current query criterion with the one provided using boolean OR
            logic to produce a composite criterion.
            </summary>
            <param name="criterion">The query criterion that will act as the right hand
            side of the boolean operation.</param>
            <returns>A new query criterion object representing the logical OR of
            the current and specified criteria.</returns>
            <example>
The following example demonstrates how to combine criterion objects using
the And() and Or() methods into a complex query.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // We first want to look for Business Partners who are appraisers
      NumericFieldCriterion catCri = new NumericFieldCriterion();
      catCri.FieldName = "Contact.CategoryID";
      catCri.Value = session.Contacts.BizCategories.GetItemByName("Appraiser").ID;
      
      // Now we want the Fees to be either greater than $350 or less than $250
      NumericFieldCriterion feeCriHigh = new NumericFieldCriterion();
      feeCriHigh.FieldName = "Contact.Fees";
      feeCriHigh.Value = 350;
      feeCriHigh.MatchType = OrdinalFieldMatchType.GreaterThan;

      NumericFieldCriterion feeCriLow = new NumericFieldCriterion();
      feeCriLow.FieldName = "Contact.Fees";
      feeCriLow.Value = 250;
      feeCriLow.MatchType = OrdinalFieldMatchType.LessThan;

      // Join the fee criteria with OR logic
      QueryCriterion feeCri = feeCriHigh.Or(feeCriLow);

      // Next, join the the fee criteria with the category criteria
      QueryCriterion allCri = catCri.And(feeCri);

      // Query for the matching contacts and then print their names
      ContactList contacts = session.Contacts.Query(allCri, ContactLoanMatchType.None, ContactType.Biz);

      // Print the names of the matching contacts
      for (int i = 0; i < contacts.Count; i++)
         Console.WriteLine(contacts[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.Query.QueryCriterion.Clone">
            <summary>
            Creates an exact duplicate of the object by performing a deep copy.
            </summary>
            <returns>Returns a deep copy of the current criterion object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Query.QueryCriterion.Unwrap">
            <summary>
            This method is meant only to be used by the Encompass application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EllieMae.Encompass.Query.BooleanLogicCriterion.#ctor(EllieMae.EMLite.ClientServer.Query.BinaryOperator,EllieMae.Encompass.Query.QueryCriterion,EllieMae.Encompass.Query.QueryCriterion)">
            <summary>
            Constructs a new BooleanLogicCriterion object by combining the specified subcriteria
            with the specified boolean operation.
            </summary>
            <param name="op">The operation (AND or OR) to be applied to the subcriteria.</param>
            <param name="lhs">The query criterion that represents the left hand side of 
            the boolean operation.</param>
            <param name="rhs">The query criterion that represents the right hand side of
            the boolean operation.</param>
        </member>
        <member name="M:EllieMae.Encompass.Query.BooleanLogicCriterion.Clone">
            <summary>
            Creates an exact duplicate of the object by performing a deep copy.
            </summary>
            <returns>Returns a deep copy of the current criterion object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Query.BooleanLogicCriterion.Unwrap">
            <summary>
            Not intended for use outside of the Encompass API.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EllieMae.Encompass.Query.DateFieldCriterion">
            <summary>
            Represents a single query criterion based on a DateTime value.
            </summary>
            <example>
The following example selects all Loans which have closed in the current year 
where the property is in California.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the date field Criterion for the Loan Closed data
      DateFieldCriterion cloCri = new DateFieldCriterion();
      cloCri.FieldName = "Loan.DateClosed";
      cloCri.Value = DateTime.Now;
      cloCri.MatchType = OrdinalFieldMatchType.Equals;
      cloCri.Precision = DateFieldMatchPrecision.Year;

      StringFieldCriterion staCri = new StringFieldCriterion();
      staCri.FieldName = "Loan.State";
      staCri.Value = "CA";
      staCri.MatchType = StringFieldMatchType.CaseInsensitive;

      // Perform the query against the loans
      LoanIdentityList ids = session.Loans.Query(cloCri.And(staCri));

      // Print the names of the matching loans
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.Query.IDateFieldCriterion">
            <summary>
            Interface for DateFieldCriterion class.
            </summary>
            <exclude/>
        </member>
        <member name="F:EllieMae.Encompass.Query.DateFieldCriterion.EmptyDate">
            <summary>
            A DateTime value which can be used to match against empty date fields.
            </summary>
            <remarks>When the <see cref="P:EllieMae.Encompass.Query.DateFieldCriterion.Value"/> of a DateFieldCriterion is set to <c>EmptyDate</c>,
            all records that do not contain a valid date value will be matched. To search for
            fields with non-empty dates, use the <see cref="F:EllieMae.Encompass.Query.DateFieldCriterion.NonEmptyDate"/> value. In both cases,
            the <see cref="P:EllieMae.Encompass.Query.DateFieldCriterion.MatchType"/> property must be set to <see cref="F:EllieMae.Encompass.Query.OrdinalFieldMatchType.Equals"/>
            </remarks>
        </member>
        <member name="F:EllieMae.Encompass.Query.DateFieldCriterion.NonEmptyDate">
            <summary>
            A DateTime value which can be used to match against non-empty date fields.
            </summary>
            <remarks>When the <see cref="P:EllieMae.Encompass.Query.DateFieldCriterion.Value"/> of a DateFieldCriterion is set to <c>NonEmptyDate</c>,
            all records that contain a valid date value will be matched. To search for
            fields without a date value set, use the <see cref="F:EllieMae.Encompass.Query.DateFieldCriterion.EmptyDate"/> value. In both cases,
            the <see cref="P:EllieMae.Encompass.Query.DateFieldCriterion.MatchType"/> property must be set to <see cref="F:EllieMae.Encompass.Query.OrdinalFieldMatchType.Equals"/>
            </remarks>
        </member>
        <member name="M:EllieMae.Encompass.Query.DateFieldCriterion.#ctor">
            <summary>
            Constructs an empty DateFieldCriterion object.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Query.DateFieldCriterion.#ctor(System.String,System.DateTime,EllieMae.Encompass.Query.OrdinalFieldMatchType,EllieMae.Encompass.Query.DateFieldMatchPrecision)">
            <summary>
            Constructs a new DateFieldCriterion object by providing initial values
            for all the fields.
            </summary>
            <param name="fieldName">The name of the field against which to query</param>
            <param name="value">The value again which the test will be performed.</param>
            <param name="matchType">The desired ordinal relationship between the specified
            value and the field value.</param>
            <param name="precision">The precision with which the comparison is made.</param>
            <example>
The following example performs a query on the Loan database using the 
DateFieldCriterion to retrieve all loans for which the rate lock expires
on or after March 1, 2004.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the date field Criterion for the Lock Expiration Date
      DateFieldCriterion cri = new DateFieldCriterion("Loan.LockExpirationDate",
         new DateTime(2004, 3, 1), OrdinalFieldMatchType.GreaterThanOrEquals,
         DateFieldMatchPrecision.Day);

      // Perform the query against the loans
      LoanIdentityList ids = session.Loans.Query(cri);

      // Print the names of the matching loans
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.Query.DateFieldCriterion.EllieMae#Encompass#Query#IDateFieldCriterion#SetEmptyDateValue">
            <summary>
            Sets the criterion to match empty date value.
            </summary>
            <remarks>This method is equivalent to setting the <see cref="P:EllieMae.Encompass.Query.DateFieldCriterion.Value"/> property to the
            <see cref="F:EllieMae.Encompass.Query.DateFieldCriterion.EmptyDate"/> value, which is used to represent an empty date field. To
            search for non-empty date values, use the <see cref="M:EllieMae.Encompass.Query.IDateFieldCriterion.SetNonEmptyDateValue"/> method.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.Query.DateFieldCriterion.EllieMae#Encompass#Query#IDateFieldCriterion#SetNonEmptyDateValue">
            <summary>
            Sets the criterion to match non-empty date value.
            </summary>
            <remarks>This method is equivalent to setting the <see cref="P:EllieMae.Encompass.Query.DateFieldCriterion.Value"/> property to the
            <see cref="F:EllieMae.Encompass.Query.DateFieldCriterion.NonEmptyDate"/> value, which is used to represent a non-empty date field. To
            search for empty date values, use the <see cref="M:EllieMae.Encompass.Query.IDateFieldCriterion.SetEmptyDateValue"/> method.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.Query.DateFieldCriterion.Clone">
            <summary>
            Creates an exact duplicate of the object by performing a deep copy.
            </summary>
            <returns>Returns a deep copy of the current criterion object.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Query.DateFieldCriterion.FieldName">
            <summary>
            Gets or sets the name of the field to which this criterion applies.
            </summary>
            <example>
The following example selects all Loans which have closed in the current year 
where the property is in California.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the date field Criterion for the Loan Closed data
      DateFieldCriterion cloCri = new DateFieldCriterion();
      cloCri.FieldName = "Loan.DateClosed";
      cloCri.Value = DateTime.Now;
      cloCri.MatchType = OrdinalFieldMatchType.Equals;
      cloCri.Precision = DateFieldMatchPrecision.Year;

      StringFieldCriterion staCri = new StringFieldCriterion();
      staCri.FieldName = "Loan.State";
      staCri.Value = "CA";
      staCri.MatchType = StringFieldMatchType.CaseInsensitive;

      // Perform the query against the loans
      LoanIdentityList ids = session.Loans.Query(cloCri.And(staCri));

      // Print the names of the matching loans
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.Query.DateFieldCriterion.Value">
            <summary>
            Gets or sets the value against which the field will be tested.
            </summary>
            <remarks>
            <p>To match records that contain any valid date value, set this property 
            to the value specified by <see cref="F:EllieMae.Encompass.Query.DateFieldCriterion.NonEmptyDate"/>. Conversely, to match records which do not
            contain a valid date, use <see cref="F:EllieMae.Encompass.Query.DateFieldCriterion.EmptyDate"/>. Users of the COM interface will need 
            to use the methods <see cref="M:EllieMae.Encompass.Query.IDateFieldCriterion.SetEmptyDateValue"/> and 
            <see cref="M:EllieMae.Encompass.Query.IDateFieldCriterion.SetNonEmptyDateValue"/> for this purpose since the DateTime 
            values represented by the constants fall outside the range allowed by COM.</p>
            </remarks>
            <example>
The following example selects all Loans which have closed in the current year 
where the property is in California.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the date field Criterion for the Loan Closed data
      DateFieldCriterion cloCri = new DateFieldCriterion();
      cloCri.FieldName = "Loan.DateClosed";
      cloCri.Value = DateTime.Now;
      cloCri.MatchType = OrdinalFieldMatchType.Equals;
      cloCri.Precision = DateFieldMatchPrecision.Year;

      StringFieldCriterion staCri = new StringFieldCriterion();
      staCri.FieldName = "Loan.State";
      staCri.Value = "CA";
      staCri.MatchType = StringFieldMatchType.CaseInsensitive;

      // Perform the query against the loans
      LoanIdentityList ids = session.Loans.Query(cloCri.And(staCri));

      // Print the names of the matching loans
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.Query.DateFieldCriterion.MatchType">
            <summary>
            Gets or sets the desired ordinal relation between the specified value and the
            value of the field being queried.
            </summary>
            <example>
The following example selects all Loans which have closed in the current year 
where the property is in California.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the date field Criterion for the Loan Closed data
      DateFieldCriterion cloCri = new DateFieldCriterion();
      cloCri.FieldName = "Loan.DateClosed";
      cloCri.Value = DateTime.Now;
      cloCri.MatchType = OrdinalFieldMatchType.Equals;
      cloCri.Precision = DateFieldMatchPrecision.Year;

      StringFieldCriterion staCri = new StringFieldCriterion();
      staCri.FieldName = "Loan.State";
      staCri.Value = "CA";
      staCri.MatchType = StringFieldMatchType.CaseInsensitive;

      // Perform the query against the loans
      LoanIdentityList ids = session.Loans.Query(cloCri.And(staCri));

      // Print the names of the matching loans
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.Query.DateFieldCriterion.Precision">
            <summary>
            Gets or sets the precision with which the date comparison is made.
            </summary>
            <remarks>This field permits dates/times to be compared so that only a 
            portion of the date is relevant (e.g. to find items which occurred on
            the same day or in the same month as the one specified).</remarks>
            <example>
The following example selects all Loans which have closed in the current year 
where the property is in California.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the date field Criterion for the Loan Closed data
      DateFieldCriterion cloCri = new DateFieldCriterion();
      cloCri.FieldName = "Loan.DateClosed";
      cloCri.Value = DateTime.Now;
      cloCri.MatchType = OrdinalFieldMatchType.Equals;
      cloCri.Precision = DateFieldMatchPrecision.Year;

      StringFieldCriterion staCri = new StringFieldCriterion();
      staCri.FieldName = "Loan.State";
      staCri.Value = "CA";
      staCri.MatchType = StringFieldMatchType.CaseInsensitive;

      // Perform the query against the loans
      LoanIdentityList ids = session.Loans.Query(cloCri.And(staCri));

      // Print the names of the matching loans
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.Query.NumericFieldCriterion">
            <summary>
            Represents a single query criterion based on a numeric field value.
            </summary>
            <example>
The following example selects all Loans which have an amount of at least
$200,000 and a term of exactly 30 years. 
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the criterion for the Loan Amount
      NumericFieldCriterion amtCri = new NumericFieldCriterion();
      amtCri.FieldName = "Loan.LoanAmount";
      amtCri.Value = 200000;
      amtCri.MatchType = OrdinalFieldMatchType.GreaterThanOrEquals;

      NumericFieldCriterion termCri = new NumericFieldCriterion();
      termCri.FieldName = "Loan.Term";
      termCri.Value = 360;
      termCri.MatchType = OrdinalFieldMatchType.Equals;

      // Perform the query against the loans
      LoanIdentityList ids = session.Loans.Query(termCri.And(amtCri));

      // Print the names of the matching loans
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.Query.INumericFieldCriterion">
            <summary>
            Interface for NumericFieldCriterion class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Query.NumericFieldCriterion.#ctor">
            <summary>
            Constructs an empty NumericFieldCriterion object.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Query.NumericFieldCriterion.#ctor(System.String,System.Double,EllieMae.Encompass.Query.OrdinalFieldMatchType)">
            <summary>
            Constructs a new NumericFieldCriterion object by providing initial values
            for all the fields.
            </summary>
            <param name="fieldName">The name of the field against which to query</param>
            <param name="value">The value again which the test will be performed.</param>
            <param name="matchType">The desired ordinal relationship between the specified
            value and the field value.</param>
            <example>
The following example performs a query on the Loan database using the 
NumericFieldCriterion to retrieve all loans for which the rate is greater
than 5.75%.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the numeric field criterion for the Loan Rate
      NumericFieldCriterion cri = new NumericFieldCriterion("Loan.LoanRate",
         5.75, OrdinalFieldMatchType.GreaterThan);

      // Perform the query against the loans
      LoanIdentityList ids = session.Loans.Query(cri);

      // Print the names of the matching loans
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.Query.NumericFieldCriterion.Clone">
            <summary>
            Creates an exact duplicate of the object by performing a deep copy.
            </summary>
            <returns>Returns a deep copy of the current criterion object.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Query.NumericFieldCriterion.FieldName">
            <summary>
            Gets or sets the name of the field to which this criterion applies.
            </summary>
            <example>
The following example selects all Loans which have an amount of at least
$200,000 and a term of exactly 30 years. 
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the criterion for the Loan Amount
      NumericFieldCriterion amtCri = new NumericFieldCriterion();
      amtCri.FieldName = "Loan.LoanAmount";
      amtCri.Value = 200000;
      amtCri.MatchType = OrdinalFieldMatchType.GreaterThanOrEquals;

      NumericFieldCriterion termCri = new NumericFieldCriterion();
      termCri.FieldName = "Loan.Term";
      termCri.Value = 360;
      termCri.MatchType = OrdinalFieldMatchType.Equals;

      // Perform the query against the loans
      LoanIdentityList ids = session.Loans.Query(termCri.And(amtCri));

      // Print the names of the matching loans
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.Query.NumericFieldCriterion.Value">
            <summary>
            Gets or sets the value against which the field will be tested.
            </summary>
            <example>
The following example selects all Loans which have an amount of at least
$200,000 and a term of exactly 30 years. 
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the criterion for the Loan Amount
      NumericFieldCriterion amtCri = new NumericFieldCriterion();
      amtCri.FieldName = "Loan.LoanAmount";
      amtCri.Value = 200000;
      amtCri.MatchType = OrdinalFieldMatchType.GreaterThanOrEquals;

      NumericFieldCriterion termCri = new NumericFieldCriterion();
      termCri.FieldName = "Loan.Term";
      termCri.Value = 360;
      termCri.MatchType = OrdinalFieldMatchType.Equals;

      // Perform the query against the loans
      LoanIdentityList ids = session.Loans.Query(termCri.And(amtCri));

      // Print the names of the matching loans
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.Query.NumericFieldCriterion.MatchType">
            <summary>
            Gets or sets the desired ordinal relation between the specified value and the
            value of the field being queried.
            </summary>
            <example>
The following example selects all Loans which have an amount of at least
$200,000 and a term of exactly 30 years. 
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the criterion for the Loan Amount
      NumericFieldCriterion amtCri = new NumericFieldCriterion();
      amtCri.FieldName = "Loan.LoanAmount";
      amtCri.Value = 200000;
      amtCri.MatchType = OrdinalFieldMatchType.GreaterThanOrEquals;

      NumericFieldCriterion termCri = new NumericFieldCriterion();
      termCri.FieldName = "Loan.Term";
      termCri.Value = 360;
      termCri.MatchType = OrdinalFieldMatchType.Equals;

      // Perform the query against the loans
      LoanIdentityList ids = session.Loans.Query(termCri.And(amtCri));

      // Print the names of the matching loans
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.Query.StringFieldMatchType">
            <summary>
            Identifies the type of match to performed between a string criterion and the field values.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.StringFieldMatchType.Exact">
            <summary>An exact match (including case) is required.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.StringFieldMatchType.CaseInsensitive">
            <summary>An exact match (excluding case) is required.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.StringFieldMatchType.StartsWith">
            <summary>The field value must start with the specified substring (case insensitive).</summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.StringFieldMatchType.Contains">
            <summary>The field value must contain the specified substring (case insensitive).</summary>
        </member>
        <member name="T:EllieMae.Encompass.Query.OrdinalFieldMatchType">
            <summary>
            Identifies the desired ordinal relationship between a numeric or date criterion and
            the field values against which the criterion applies.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.OrdinalFieldMatchType.Equals">
            <summary>An exact match is required.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.OrdinalFieldMatchType.NotEquals">
            <summary>The field value must not match the specified criterion value.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.OrdinalFieldMatchType.GreaterThan">
            <summary>The field value must be greater than the specified criterion value.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.OrdinalFieldMatchType.GreaterThanOrEquals">
            <summary>The field value must be greater than or equal to the specified criterion value.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.OrdinalFieldMatchType.LessThan">
            <summary>The field value must be less than the specified criterion value.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.OrdinalFieldMatchType.LessThanOrEquals">
            <summary>The field value must be less than or equal to the specified criterion value.</summary>
        </member>
        <member name="T:EllieMae.Encompass.Query.DateFieldMatchPrecision">
            <summary>
            Identifies the precision with which a DateTime value must match the value of the field
            to which the criterion applies.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.DateFieldMatchPrecision.Exact">
            <summary>Date and time must match exactly.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.DateFieldMatchPrecision.Day">
            <summary>Only the date portion must match exactly (i.e. time is ignored).</summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.DateFieldMatchPrecision.Month">
            <summary>Only the month and year must match.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.DateFieldMatchPrecision.Year">
            <summary>Only the year must match.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.DateFieldMatchPrecision.Recurring">
            <summary>Only the day and month must match. This is useful for querying fields that
            represent recurring dates such as birthdays or anniversaries.</summary>
        </member>
        <member name="T:EllieMae.Encompass.Query.SortOrder">
            <summary>
            Defines the sort orders permitted when retrieving sortable data.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.SortOrder.Ascending">
            <summary>Items sorted in ascending order</summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.SortOrder.Descending">
            <summary>Items sorted in descending order</summary>
        </member>
        <member name="T:EllieMae.Encompass.Query.DataConversion">
            <summary>
            Defines how field values should be converted from one type to another.
            </summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.DataConversion.None">
            <summary>No conversion is applied -- the field's native type is used.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.DataConversion.Numeric">
            <summary>The field's value is converted to its numeric equivalent.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.DataConversion.DateTime">
            <summary>The field's value is converted to a date/time value.</summary>
        </member>
        <member name="F:EllieMae.Encompass.Query.DataConversion.Text">
            <summary>The field's value is converted to a string.</summary>
        </member>
        <member name="T:EllieMae.Encompass.Query.SortCriterion">
            <summary>
            Represents a field in the sort order of a returned set of data.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Query.ISortCriterion">
            <summary>
            Interface for SortCriterion class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Query.SortCriterion.#ctor">
            <summary>
            Default constructor for an empty SortCriterion object.
            </summary>
            <remarks>The <see cref="P:EllieMae.Encompass.Query.SortCriterion.FieldName"/> property must be set in order for
            this criterion object to be valid.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.Query.SortCriterion.#ctor(System.String)">
            <summary>
            Constructor for a SortCriterion using a specified field.
            </summary>
            <param name="fieldName">The field on which to sort the records.</param>
            <remarks>By default, the sort order created is in ascending order.</remarks>
        </member>
        <member name="M:EllieMae.Encompass.Query.SortCriterion.#ctor(System.String,EllieMae.Encompass.Query.SortOrder)">
            <summary>
            Constructor for a SortCriterion where both the field name and order are specified.
            </summary>
            <param name="fieldName">The field on which to sort the records.</param>
            <param name="sortOrder">The order in which to sort the records, either
            <see cref="F:EllieMae.Encompass.Query.SortOrder.Ascending"/> or 
            <see cref="F:EllieMae.Encompass.Query.SortOrder.Descending"/>.</param>
        </member>
        <member name="M:EllieMae.Encompass.Query.SortCriterion.#ctor(System.String,EllieMae.Encompass.Query.SortOrder,EllieMae.Encompass.Query.DataConversion)">
            <summary>
            Constructor for a SortCriterion where both the field name and order are specified.
            </summary>
            <param name="fieldName">The field on which to sort the records.</param>
            <param name="sortOrder">The order in which to sort the records, either
            <see cref="F:EllieMae.Encompass.Query.SortOrder.Ascending"/> or 
            <see cref="F:EllieMae.Encompass.Query.SortOrder.Descending"/>.</param>
            <param name="conversion">The conversion, if any, which should be applied
            to the data field in order to modify the behavior of the sort.</param>
        </member>
        <member name="M:EllieMae.Encompass.Query.SortCriterion.Unwrap">
            <summary>
            This method is meant solely for internal use by Encompass.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EllieMae.Encompass.Query.SortCriterion.FieldName">
            <summary>
            Gets or sets the canonical name of the field on which to sort.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Query.SortCriterion.SortOrder">
            <summary>
            Gets or sets the ordering used for this field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Query.SortCriterion.Conversion">
            <summary>
            Gets the data conversion to be applied to the field values to perform the sort.
            </summary>
            <remarks>
            Setting the conversion method for a sort criterion can be useful when you
            wish to compare the values in a format which is not its default. For example,
            if you wish to sort a numeric field alphabetically using its string representation.
            </remarks>
        </member>
        <member name="T:EllieMae.Encompass.Query.StringFieldCriterion">
            <summary>
            Represents a single query criterion based on a string field value.
            </summary>
            <example>
The following example selects all Loans for which the Borrower's last
name or the Coborrower's last name begins with the character 'S'. 
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the string field Criterion for the Loan Purpose
      StringFieldCriterion borCri = new StringFieldCriterion();
      borCri.FieldName = "Loan.BorrowerLastName";
      borCri.Value = "S";
      borCri.MatchType = StringFieldMatchType.StartsWith;

      // Create the string field Criterion for the Loan Purpose
      StringFieldCriterion cobCri = new StringFieldCriterion();
      cobCri.FieldName = "Loan.CoBorrowerLastName";
      cobCri.Value = "S";
      cobCri.MatchType = StringFieldMatchType.StartsWith;

      // Perform the query against the loans
      LoanIdentityList ids = session.Loans.Query(borCri.Or(cobCri));

      // Print the names of the matching loans
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.Query.IStringFieldCriterion">
            <summary>
            Interface for StringFieldCriterion class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Query.StringFieldCriterion.#ctor">
            <summary>
            Constructs an empty NumericFieldCriterion object.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Query.StringFieldCriterion.#ctor(System.String,System.String,EllieMae.Encompass.Query.StringFieldMatchType,System.Boolean)">
            <summary>
            Constructs a new NumericFieldCriterion object by providing initial values
            for all the fields.
            </summary>
            <param name="fieldName">The name of the field against which to query</param>
            <param name="value">The value again which the test will be performed.</param>
            <param name="matchType">The desired string relationship between the specified
            value and the field value.</param>
            <param name="include">A flag indicating if the criterion represents an
            inclusion rule or an exclusion rule.</param>
            <example>
The following example performs a query on the Loan database using the 
StringFieldCriterion to specify that all loans that are for the purpose
of a no-cash-out refinance should be selected.
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the string field Criterion for the Loan Purpose
      StringFieldCriterion cri = new StringFieldCriterion("Loan.LoanPurpose",
         "NoCash-Out Refinance", StringFieldMatchType.Exact, true);

      // Perform the query against the loans
      LoanIdentityList ids = session.Loans.Query(cri);

      // Print the names of the matching loans
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="M:EllieMae.Encompass.Query.StringFieldCriterion.Clone">
            <summary>
            Creates an exact duplicate of the object by performing a deep copy.
            </summary>
            <returns>Returns a deep copy of the current criterion object.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Query.StringFieldCriterion.FieldName">
            <summary>
            Gets or sets the name of the field to which this criterion applies.
            </summary>
            <example>
The following example selects all Loans for which the Borrower's last
name or the Coborrower's last name begins with the character 'S'. 
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the string field Criterion for the Loan Purpose
      StringFieldCriterion borCri = new StringFieldCriterion();
      borCri.FieldName = "Loan.BorrowerLastName";
      borCri.Value = "S";
      borCri.MatchType = StringFieldMatchType.StartsWith;

      // Create the string field Criterion for the Loan Purpose
      StringFieldCriterion cobCri = new StringFieldCriterion();
      cobCri.FieldName = "Loan.CoBorrowerLastName";
      cobCri.Value = "S";
      cobCri.MatchType = StringFieldMatchType.StartsWith;

      // Perform the query against the loans
      LoanIdentityList ids = session.Loans.Query(borCri.Or(cobCri));

      // Print the names of the matching loans
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.Query.StringFieldCriterion.Value">
            <summary>
            Gets or sets the value against which the field will be tested.
            </summary>
            <example>
The following example selects all Loans for which the Borrower's last
name or the Coborrower's last name begins with the character 'S'. 
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the string field Criterion for the Loan Purpose
      StringFieldCriterion borCri = new StringFieldCriterion();
      borCri.FieldName = "Loan.BorrowerLastName";
      borCri.Value = "S";
      borCri.MatchType = StringFieldMatchType.StartsWith;

      // Create the string field Criterion for the Loan Purpose
      StringFieldCriterion cobCri = new StringFieldCriterion();
      cobCri.FieldName = "Loan.CoBorrowerLastName";
      cobCri.Value = "S";
      cobCri.MatchType = StringFieldMatchType.StartsWith;

      // Perform the query against the loans
      LoanIdentityList ids = session.Loans.Query(borCri.Or(cobCri));

      // Print the names of the matching loans
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.Query.StringFieldCriterion.MatchType">
            <summary>
            Gets or sets the desired string comparison method to be applied between the
            specified value and the field value.
            </summary>
            <example>
The following example selects all Loans for which the Borrower's last
name or the Coborrower's last name begins with the character 'S'. 
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the string field Criterion for the Loan Purpose
      StringFieldCriterion borCri = new StringFieldCriterion();
      borCri.FieldName = "Loan.BorrowerLastName";
      borCri.Value = "S";
      borCri.MatchType = StringFieldMatchType.StartsWith;

      // Create the string field Criterion for the Loan Purpose
      StringFieldCriterion cobCri = new StringFieldCriterion();
      cobCri.FieldName = "Loan.CoBorrowerLastName";
      cobCri.Value = "S";
      cobCri.MatchType = StringFieldMatchType.StartsWith;

      // Perform the query against the loans
      LoanIdentityList ids = session.Loans.Query(borCri.Or(cobCri));

      // Print the names of the matching loans
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="P:EllieMae.Encompass.Query.StringFieldCriterion.Include">
            <summary>
            A flag indicating if this criterion represents an inclusion or exclusion rule.
            </summary>
            <example>
The following example selects all Loans which are not for the purchase of
a property. 
<code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.BusinessObjects;
using EllieMae.Encompass.Query;

class LoanReader
{
   public static void Main()
   {
      // Open the session to the remote server
      Session session = new Session();
      session.Start("myserver", "mary", "maryspwd");

      // Create the string field Criterion for the Loan Purpose
      StringFieldCriterion cri = new StringFieldCriterion();
      cri.FieldName = "Loan.LoanPurpose";
      cri.Value = "Purchase";
      cri.MatchType = StringFieldMatchType.Exact;
      cri.Include = false;

      // Perform the query against the loans
      LoanIdentityList ids = session.Loans.Query(cri);

      // Print the names of the matching loans
      for (int i = 0; i < ids.Count; i++)
         Console.WriteLine(ids[i].ToString());

      // End the session to gracefully disconnect from the server
      session.End();
   }
}
]]>
</code>
</example>
        </member>
        <member name="T:EllieMae.Encompass.Reporting.LoanReportCursor">
            <summary>
            Represents a Cursor used for fast retrieval and iteration over a set of
            <see cref="T:EllieMae.Encompass.Reporting.LoanReportData"/> objects.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Reporting.ILoanReportCursor">
            <summary>
            Interface for LoanReportCursor class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Reporting.LoanReportCursor.GetItem(System.Int32)">
            <summary>
            Retrieves the item from the cursor at the specified index.
            </summary>
            <param name="index">Index of the item to be retrieved (with 0 as the first
            index).</param>
            <returns>Returns the specified <see cref="T:EllieMae.Encompass.Reporting.LoanReportData"/> object.</returns>
        </member>
        <member name="M:EllieMae.Encompass.Reporting.LoanReportCursor.GetItems(System.Int32,System.Int32)">
            <summary>
            Retrieves a subset of the cursor items starting at a specified index.
            </summary>
            <param name="startIndex">The index at which to start the subset.</param>
            <param name="count">The number of items to retrieve</param>
            <returns>Returns an array containing the <see cref="T:EllieMae.EMLite.DataEngine.PipelineData"/> objects 
            within the specified range</returns>
        </member>
        <member name="T:EllieMae.Encompass.Reporting.LoanReportData">
            <summary>
            Provides access to the data for a single loan returned by running a report.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Reporting.ILoanReportData">
            <summary>
            Interface for LoanReportData class.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Reporting.LoanReportData.GetFieldNames">
            <summary>
            Provides a list of all of the available fields in the data object.
            </summary>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.StringList"/> containing all of the field names
            for which this data object contains a value.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Reporting.LoanReportData.Guid">
            <summary>
            Gets the GUID of the loan associated with this data object.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Reporting.LoanReportData.Item(System.String)">
            <summary>
            Retrieves the value for a field included in the report
            </summary>
            <param name="fieldName">The name of the field to be retrieved.</param>
            <returns>The value of the field.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Reporting.LoanReportData.EllieMae#Encompass#Reporting#ILoanReportData#Item(System.String)">
            <summary>
            Provides an implementation of the ILoanReportData.this method
            </summary>
            <param name="fieldName"></param>
            <returns></returns>
            <exclude/>
        </member>
        <member name="T:EllieMae.Encompass.Reporting.ReportingFieldDescriptor">
            <summary>
            Represents the metadata for a field in the Reporting Database.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Reporting.IReportingFieldDescriptor">
            <summary>
            Interface for LoanReportData class.
            </summary>
            <exclude/>
        </member>
        <member name="P:EllieMae.Encompass.Reporting.ReportingFieldDescriptor.FieldID">
            <summary>
            Gets the Field ID for the field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Reporting.ReportingFieldDescriptor.BorrowerPair">
            <summary>
            Returns the Borrower Pair index for the field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Reporting.ReportingFieldDescriptor.CanonicalName">
            <summary>
            Returns the canonical name of the field to be used in queries.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Reporting.ReportingFieldDescriptor.TableName">
            <summary>
            Returns the name of the underlying SQL table that stores this field
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Reporting.ReportingFieldDescriptor.ColumnName">
            <summary>
            Returns the name of the column in the SQL table in which this data is stored.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Reporting.ReportingFieldDescriptor.Auditable">
            <summary>
            Indicates if the Audit Trail is enabled for this field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Reporting.ReportingFieldDescriptor.Description">
            <summary>
            Gets the Description for the field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Reporting.ReportingFieldDescriptor.FieldType">
            <summary>
            Get the FieldType for the field.
            </summary>
        </member>
        <member name="P:EllieMae.Encompass.Reporting.ReportingFieldDescriptor.FieldSize">
            <summary>
            Gets the FieldSize for the field.
            </summary>
        </member>
        <member name="T:EllieMae.Encompass.Reporting.Reports">
            <summary>
            Provides an interface for running reports against the Loans in Encompass.
            </summary>
            <example>
      The following code demonstrates opening a <see>LoanReportCursor</see> to
      retrieve all loans that match a specified set of criteria. In the example, a very
      small set of field are retrieved for each loan, maximizing the efficiency of the call.
      Additionally, the code demonstrates how to properly include fields from the 
      Reporting Database into your report, either in the list of selected fields, as
      part of the query filter or even within the sort order of the returned data set.
      <code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.Reporting;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.Query;

class ReportExample
{
    public static void Main()
    {
        // Open the session to the remote server
        Session session = new Session();
        session.Start("myserver", "mary", "maryspwd");

        // Load a list with the fields to be selected
        StringList fields = new StringList();
        fields.Add("Loan.BorrowerLastName");
        fields.Add("Loan.LoanNumber");
        fields.Add("Loan.LoanOfficerID");

        // You can include a field from the reporting database, if you have
        // previously configured the database to include this field. In this example,
        // we will assume that field 1014 has been previously added to the reporting
        // database.
        string qualRateFieldName = Reports.ReportingDatabaseCanonicalPrefix + "1014";
        fields.Add(qualRateFieldName);

        // Now build the criteria for the selection of the loans.
        // This criteria can also include reporting database fields.
        NumericFieldCriterion laCri = new NumericFieldCriterion();
        laCri.FieldName = "Loan.LoanAmount";
        laCri.Value = 100000;
        laCri.MatchType = OrdinalFieldMatchType.GreaterThanOrEquals;

        // Our second criterion uses the "Gross Rent" field (field 1005), which we will
        // assume has previously been added to the reporting database.
        NumericFieldCriterion rentCri = new NumericFieldCriterion();
        rentCri.FieldName = Reports.ReportingDatabaseCanonicalPrefix + "1005";
        rentCri.Value = 800;
        rentCri.MatchType = OrdinalFieldMatchType.LessThan;

        // Combine into a single criterion
        QueryCriterion queryCri = laCri.And(rentCri);

        // Now build the sort order for the result set, which we'll base on the
        // borrower's last name. Again, we could use fields from the reporting database
        // here just as we did above.
        SortCriterionList sortOrder = new SortCriterionList();
        sortOrder.Add(new SortCriterion("Loan.BorrowerLastName"));

        // Open a new cursor with the result set
        LoanReportCursor cur = session.Reports.OpenReportCursor(fields, queryCri, sortOrder);
        // LoanReportCursor cur = session.Reports.OpenReportCursor(true, fields, queryCri, sortOrder); // Pull data from External Reporting Database (ERDB)

        // Iterate over the results, displaying the relevant field values
        foreach (LoanReportData data in cur)
        {
            Console.WriteLine("Results for loan " + data.Guid + ":");
            Console.WriteLine("  Borrower Last Name = " + data["Loan.BorrowerLastName"]);
            Console.WriteLine("  Loan Number = " + data["Loan.LoanNumber"]);
            Console.WriteLine("  Loan Officer = " + data["Loan.LoanOfficerID"]);
            Console.WriteLine("  Qual Rate = " + data[qualRateFieldName]);
        }
    }
}
]]>
          </code>
    </example>
        </member>
        <member name="T:EllieMae.Encompass.Reporting.IReports">
            <summary>
            Interface for LoanReports class.
            </summary>
            <exclude/>
        </member>
        <member name="F:EllieMae.Encompass.Reporting.Reports.ReportingDatabaseCanonicalPrefix">
            <summary>
            Provides the prefix for a canonical field name that references a field in the
            reporting database.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Reporting.Reports.OpenReportCursor(EllieMae.Encompass.Collections.StringList,EllieMae.Encompass.Query.QueryCriterion,EllieMae.Encompass.Collections.SortCriterionList)">
            <summary>
            Executes a query against the list of loans an opens a report cursor with the results.
            </summary>
            <param name="fieldsToRetrieve">A <see cref="T:EllieMae.Encompass.Collections.StringList"/> containing the list of canonical
            field names to be retrieved from the server.</param>
            <param name="filter">A <see cref="T:EllieMae.Encompass.Query.QueryCriterion"/> defining the filter, if any, to be applied
            to the query.</param>
            <param name="sortOrder">An option <see cref="T:EllieMae.Encompass.Collections.SortCriterionList"/> specifying the order in
            which the results should be returned.</param>
            <returns>
            Returns a <see cref="T:EllieMae.Encompass.Reporting.LoanReportCursor"/> containing the results for the specified query.
            </returns>
            <remarks>
            <p>This method provides a very efficient means of retrieving a fixed set of field values from
            an user-defined set of loans. The list of fields specified in the <c>fieldsToRetrieve</c>
            parameter must use the Canonical Field Name format defined in the <i>SDK Programmer's Guide.</i>
            As a result, you can only retrieve field values which are represented by one of the 
            pre-defined canonical field names or which you have added into the Reporting Database feature
            of Encompass.</p>
            <p>For more information on the use of this method, see the "Advanced Reporting" section of
            the Encompass SDK Programmer's Guide.</p>
            </remarks>
            <example>
      The following code demonstrates opening a <see>LoanReportCursor</see> to
      retrieve all loans that match a specified set of criteria. In the example, a very
      small set of field are retrieved for each loan, maximizing the efficiency of the call.
      Additionally, the code demonstrates how to properly include fields from the 
      Reporting Database into your report, either in the list of selected fields, as
      part of the query filter or even within the sort order of the returned data set.
      <code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.Reporting;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.Query;

class ReportExample
{
    public static void Main()
    {
        // Open the session to the remote server
        Session session = new Session();
        session.Start("myserver", "mary", "maryspwd");

        // Load a list with the fields to be selected
        StringList fields = new StringList();
        fields.Add("Loan.BorrowerLastName");
        fields.Add("Loan.LoanNumber");
        fields.Add("Loan.LoanOfficerID");

        // You can include a field from the reporting database, if you have
        // previously configured the database to include this field. In this example,
        // we will assume that field 1014 has been previously added to the reporting
        // database.
        string qualRateFieldName = Reports.ReportingDatabaseCanonicalPrefix + "1014";
        fields.Add(qualRateFieldName);

        // Now build the criteria for the selection of the loans.
        // This criteria can also include reporting database fields.
        NumericFieldCriterion laCri = new NumericFieldCriterion();
        laCri.FieldName = "Loan.LoanAmount";
        laCri.Value = 100000;
        laCri.MatchType = OrdinalFieldMatchType.GreaterThanOrEquals;

        // Our second criterion uses the "Gross Rent" field (field 1005), which we will
        // assume has previously been added to the reporting database.
        NumericFieldCriterion rentCri = new NumericFieldCriterion();
        rentCri.FieldName = Reports.ReportingDatabaseCanonicalPrefix + "1005";
        rentCri.Value = 800;
        rentCri.MatchType = OrdinalFieldMatchType.LessThan;

        // Combine into a single criterion
        QueryCriterion queryCri = laCri.And(rentCri);

        // Now build the sort order for the result set, which we'll base on the
        // borrower's last name. Again, we could use fields from the reporting database
        // here just as we did above.
        SortCriterionList sortOrder = new SortCriterionList();
        sortOrder.Add(new SortCriterion("Loan.BorrowerLastName"));

        // Open a new cursor with the result set
        LoanReportCursor cur = session.Reports.OpenReportCursor(fields, queryCri, sortOrder);
        // LoanReportCursor cur = session.Reports.OpenReportCursor(true, fields, queryCri, sortOrder); // Pull data from External Reporting Database (ERDB)

        // Iterate over the results, displaying the relevant field values
        foreach (LoanReportData data in cur)
        {
            Console.WriteLine("Results for loan " + data.Guid + ":");
            Console.WriteLine("  Borrower Last Name = " + data["Loan.BorrowerLastName"]);
            Console.WriteLine("  Loan Number = " + data["Loan.LoanNumber"]);
            Console.WriteLine("  Loan Officer = " + data["Loan.LoanOfficerID"]);
            Console.WriteLine("  Qual Rate = " + data[qualRateFieldName]);
        }
    }
}
]]>
          </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.Reporting.Reports.OpenReportCursor(System.Boolean,EllieMae.Encompass.Collections.StringList,EllieMae.Encompass.Query.QueryCriterion,EllieMae.Encompass.Collections.SortCriterionList)">
            <summary>
            Executes a query against the list of loans an opens a report cursor with the results.
            </summary>
            <param name="fromERDB">A boolean flag indicating if the data should be pulled from the External Reporting Database (ERDB).</param>
            <param name="fieldsToRetrieve">A <see cref="T:EllieMae.Encompass.Collections.StringList"/> containing the list of canonical
            field names to be retrieved from the server.</param>
            <param name="filter">A <see cref="T:EllieMae.Encompass.Query.QueryCriterion"/> defining the filter, if any, to be applied
            to the query.</param>
            <param name="sortOrder">An option <see cref="T:EllieMae.Encompass.Collections.SortCriterionList"/> specifying the order in
            which the results should be returned.</param>
            <returns>
            Returns a <see cref="T:EllieMae.Encompass.Reporting.LoanReportCursor"/> containing the results for the specified query.
            </returns>
            <remarks>
            <p>This method provides a very efficient means of retrieving a fixed set of field values from
            an user-defined set of loans. The list of fields specified in the <c>fieldsToRetrieve</c>
            parameter must use the Canonical Field Name format defined in the <i>SDK Programmer's Guide.</i>
            As a result, you can only retrieve field values which are represented by one of the 
            pre-defined canonical field names or which you have added into the Reporting Database feature
            of Encompass.</p>
            <p>For more information on the use of this method, see the "Advanced Reporting" section of
            the Encompass SDK Programmer's Guide.</p>
            </remarks>
            <example>
      The following code demonstrates opening a <see>LoanReportCursor</see> to
      retrieve all loans that match a specified set of criteria. In the example, a very
      small set of field are retrieved for each loan, maximizing the efficiency of the call.
      Additionally, the code demonstrates how to properly include fields from the 
      Reporting Database into your report, either in the list of selected fields, as
      part of the query filter or even within the sort order of the returned data set.
      <code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.Reporting;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.Query;

class ReportExample
{
    public static void Main()
    {
        // Open the session to the remote server
        Session session = new Session();
        session.Start("myserver", "mary", "maryspwd");

        // Load a list with the fields to be selected
        StringList fields = new StringList();
        fields.Add("Loan.BorrowerLastName");
        fields.Add("Loan.LoanNumber");
        fields.Add("Loan.LoanOfficerID");

        // You can include a field from the reporting database, if you have
        // previously configured the database to include this field. In this example,
        // we will assume that field 1014 has been previously added to the reporting
        // database.
        string qualRateFieldName = Reports.ReportingDatabaseCanonicalPrefix + "1014";
        fields.Add(qualRateFieldName);

        // Now build the criteria for the selection of the loans.
        // This criteria can also include reporting database fields.
        NumericFieldCriterion laCri = new NumericFieldCriterion();
        laCri.FieldName = "Loan.LoanAmount";
        laCri.Value = 100000;
        laCri.MatchType = OrdinalFieldMatchType.GreaterThanOrEquals;

        // Our second criterion uses the "Gross Rent" field (field 1005), which we will
        // assume has previously been added to the reporting database.
        NumericFieldCriterion rentCri = new NumericFieldCriterion();
        rentCri.FieldName = Reports.ReportingDatabaseCanonicalPrefix + "1005";
        rentCri.Value = 800;
        rentCri.MatchType = OrdinalFieldMatchType.LessThan;

        // Combine into a single criterion
        QueryCriterion queryCri = laCri.And(rentCri);

        // Now build the sort order for the result set, which we'll base on the
        // borrower's last name. Again, we could use fields from the reporting database
        // here just as we did above.
        SortCriterionList sortOrder = new SortCriterionList();
        sortOrder.Add(new SortCriterion("Loan.BorrowerLastName"));

        // Open a new cursor with the result set
        LoanReportCursor cur = session.Reports.OpenReportCursor(fields, queryCri, sortOrder);
        // LoanReportCursor cur = session.Reports.OpenReportCursor(true, fields, queryCri, sortOrder); // Pull data from External Reporting Database (ERDB)

        // Iterate over the results, displaying the relevant field values
        foreach (LoanReportData data in cur)
        {
            Console.WriteLine("Results for loan " + data.Guid + ":");
            Console.WriteLine("  Borrower Last Name = " + data["Loan.BorrowerLastName"]);
            Console.WriteLine("  Loan Number = " + data["Loan.LoanNumber"]);
            Console.WriteLine("  Loan Officer = " + data["Loan.LoanOfficerID"]);
            Console.WriteLine("  Qual Rate = " + data[qualRateFieldName]);
        }
    }
}
]]>
          </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.Reporting.Reports.OpenReportCursor(EllieMae.Encompass.Collections.StringList,EllieMae.Encompass.Query.QueryCriterion)">
            <summary>
            Executes a query against the list of loans an opens a report cursor with the results.
            </summary>
            <param name="fieldsToRetrieve">A <see cref="T:EllieMae.Encompass.Collections.StringList"/> containing the list of canonical
            field names to be retrieved from the server.</param>
            <param name="filter">A <see cref="T:EllieMae.Encompass.Query.QueryCriterion"/> defining the filter, if any, to be applied
            to the query.</param>
            <returns>
            Returns a <see cref="T:EllieMae.Encompass.Reporting.LoanReportCursor"/> containing the results for the specified query.
            </returns>
            <remarks>
            <p>For information on how to use this method, see <see cref="M:EllieMae.Encompass.Reporting.Reports.OpenReportCursor(EllieMae.Encompass.Collections.StringList,EllieMae.Encompass.Query.QueryCriterion,EllieMae.Encompass.Collections.SortCriterionList)"/>.</p>
            </remarks>
            <example>
      The following code demonstrates opening a <see>LoanReportCursor</see> to
      retrieve all loans that match a specified set of criteria. In the example, a very
      small set of field are retrieved for each loan, maximizing the efficiency of the call.
      Additionally, the code demonstrates how to properly include fields from the 
      Reporting Database into your report, either in the list of selected fields, as
      part of the query filter or even within the sort order of the returned data set.
      <code>
<![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.Reporting;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.Query;

class ReportExample
{
    public static void Main()
    {
        // Open the session to the remote server
        Session session = new Session();
        session.Start("myserver", "mary", "maryspwd");

        // Load a list with the fields to be selected
        StringList fields = new StringList();
        fields.Add("Loan.BorrowerLastName");
        fields.Add("Loan.LoanNumber");
        fields.Add("Loan.LoanOfficerID");

        // You can include a field from the reporting database, if you have
        // previously configured the database to include this field. In this example,
        // we will assume that field 1014 has been previously added to the reporting
        // database.
        string qualRateFieldName = Reports.ReportingDatabaseCanonicalPrefix + "1014";
        fields.Add(qualRateFieldName);

        // Now build the criteria for the selection of the loans.
        // This criteria can also include reporting database fields.
        NumericFieldCriterion laCri = new NumericFieldCriterion();
        laCri.FieldName = "Loan.LoanAmount";
        laCri.Value = 100000;
        laCri.MatchType = OrdinalFieldMatchType.GreaterThanOrEquals;

        // Our second criterion uses the "Gross Rent" field (field 1005), which we will
        // assume has previously been added to the reporting database.
        NumericFieldCriterion rentCri = new NumericFieldCriterion();
        rentCri.FieldName = Reports.ReportingDatabaseCanonicalPrefix + "1005";
        rentCri.Value = 800;
        rentCri.MatchType = OrdinalFieldMatchType.LessThan;

        // Combine into a single criterion
        QueryCriterion queryCri = laCri.And(rentCri);

        // Now build the sort order for the result set, which we'll base on the
        // borrower's last name. Again, we could use fields from the reporting database
        // here just as we did above.
        SortCriterionList sortOrder = new SortCriterionList();
        sortOrder.Add(new SortCriterion("Loan.BorrowerLastName"));

        // Open a new cursor with the result set
        LoanReportCursor cur = session.Reports.OpenReportCursor(fields, queryCri, sortOrder);
        // LoanReportCursor cur = session.Reports.OpenReportCursor(true, fields, queryCri, sortOrder); // Pull data from External Reporting Database (ERDB)

        // Iterate over the results, displaying the relevant field values
        foreach (LoanReportData data in cur)
        {
            Console.WriteLine("Results for loan " + data.Guid + ":");
            Console.WriteLine("  Borrower Last Name = " + data["Loan.BorrowerLastName"]);
            Console.WriteLine("  Loan Number = " + data["Loan.LoanNumber"]);
            Console.WriteLine("  Loan Officer = " + data["Loan.LoanOfficerID"]);
            Console.WriteLine("  Qual Rate = " + data[qualRateFieldName]);
        }
    }
}
]]>
          </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.Reporting.Reports.SelectReportingFieldsForLoans(EllieMae.Encompass.Collections.StringList,EllieMae.Encompass.Collections.StringList)">
            <summary>
            Retrieves the values of a specific set of fields for one or more loans.
            </summary>
            <param name="loanGuids">The list of GUIDs for the selected set of loans.</param>
            <param name="fieldsToRetrieve">The list of canonical fields names to be retrieved from the server.</param>
            <returns>Returns a <see cref="T:EllieMae.Encompass.Collections.LoanReportDataList"/> containing the field values for the 
            specified loans.</returns>
            <remarks>
            <p>The order of the result set matches the order of the loan GUIDs specified in the 
            <c>loanGuids</c> parameter.</p>
            <p>The list of fields specified in the <c>fieldsToRetrieve</c>
            parameter must use the Canonical Field Name format defined in the <i>SDK Programmer's Guide.</i>
            As a result, you can only retrieve field values which are represented by one of the 
            pre-defined canonical field names or which you have added into the Reporting Database feature
            of Encompass.</p>
            <p>Note that if the number of GUIDs passed to this function becomes large, then it will become
            increasingly inefficient. Instead, use the <see cref="M:EllieMae.Encompass.Reporting.Reports.OpenReportCursor(EllieMae.Encompass.Collections.StringList,EllieMae.Encompass.Query.QueryCriterion,EllieMae.Encompass.Collections.SortCriterionList)"/> method for a more
            efficient means to selecting field values for a large set of loans.</p>
            </remarks>
            <example>
      The following code retrieves a set of database fields for a pre-defined
      set of loans. In this example, we include a field from the Reporting
      Database to demonstrate how the reporting can be extended beyond the default
      fields provided by Encompas.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.Reporting;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.Query;

class ReportExample
{
    public static void Main()
    {
        // Open the session to the remote server
        Session session = new Session();
        session.Start("myserver", "mary", "maryspwd");

				// Create the list of loan Guids
				StringList guids = new StringList();
				guids.Add("{ec0d2d36-a824-4f48-87a1-4c0ab410d545}");
				guids.Add("{8616a90b-8fdc-43de-aea6-05167a332e82}");
				guids.Add("{9e28208a-010f-4d88-b10f-da508b22db34}");

				// Load a list with the fields to be selected
				StringList fields = new StringList();
				fields.Add("Loan.BorrowerLastName");
				fields.Add("Loan.LoanNumber");
				fields.Add("Loan.LoanOfficerID");

				// You can include a field from the reporting database, if you have 
				// previously configured the database to include this field. In this example,
				// we will assume that field 1014 has been previously added to the reporting
				// database.
				string qualRateFieldName = Reports.ReportingDatabaseCanonicalPrefix + "1014";
				fields.Add(qualRateFieldName);

				// Open a new cursor with the result set
				LoanReportDataList dataList = session.Reports.SelectReportingFieldsForLoans(guids, fields);

				// Iterate over the results, displaying the relevant field values. Note that
				// the results are returned in the order that the GUIDs were specified
				// in the guids collection.
				foreach (LoanReportData data in dataList)
				{
					Console.WriteLine("Results for loan " + data.Guid + ":");
					Console.WriteLine("  Borrower Last Name = " + data["Loan.BorrowerLastName"]);
					Console.WriteLine("  Loan Number = " + data["Loan.LoanNumber"]);
					Console.WriteLine("  Loan Officer = " + data["Loan.LoanOfficerID"]);
					Console.WriteLine("  Qual Rate = " + data[qualRateFieldName]);
				}
    }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.Reporting.Reports.SelectReportingFieldsForLoan(System.String,EllieMae.Encompass.Collections.StringList)">
            <summary>
            Retrieves a set of field values for a single loan.
            </summary>
            <param name="loanGuid">The GUID of the specified loan.</param>
            <param name="fieldsToRetrieve">The list of canonical field names to be retrieved.</param>
            <returns>
            Returns a <see cref="T:EllieMae.Encompass.Reporting.LoanReportData"/> object containing the field values specified or
            <c>null</c> if no such loan exists.
            </returns>
            <example>
      The following code retrieves a set of database fields for a pre-defined
      set of loans. In this example, we include a field from the Reporting
      Database to demonstrate how the reporting can be extended beyond the default
      fields provided by Encompas.
      <code>
        <![CDATA[
using System;
using System.IO;
using EllieMae.Encompass.Client;
using EllieMae.Encompass.Reporting;
using EllieMae.Encompass.Collections;
using EllieMae.Encompass.Query;

class ReportExample
{
    public static void Main()
    {
        // Open the session to the remote server
        Session session = new Session();
        session.Start("myserver", "mary", "maryspwd");

				// Create the list of loan Guids
				StringList guids = new StringList();
				guids.Add("{ec0d2d36-a824-4f48-87a1-4c0ab410d545}");
				guids.Add("{8616a90b-8fdc-43de-aea6-05167a332e82}");
				guids.Add("{9e28208a-010f-4d88-b10f-da508b22db34}");

				// Load a list with the fields to be selected
				StringList fields = new StringList();
				fields.Add("Loan.BorrowerLastName");
				fields.Add("Loan.LoanNumber");
				fields.Add("Loan.LoanOfficerID");

				// You can include a field from the reporting database, if you have 
				// previously configured the database to include this field. In this example,
				// we will assume that field 1014 has been previously added to the reporting
				// database.
				string qualRateFieldName = Reports.ReportingDatabaseCanonicalPrefix + "1014";
				fields.Add(qualRateFieldName);

				// Open a new cursor with the result set
				LoanReportDataList dataList = session.Reports.SelectReportingFieldsForLoans(guids, fields);

				// Iterate over the results, displaying the relevant field values. Note that
				// the results are returned in the order that the GUIDs were specified
				// in the guids collection.
				foreach (LoanReportData data in dataList)
				{
					Console.WriteLine("Results for loan " + data.Guid + ":");
					Console.WriteLine("  Borrower Last Name = " + data["Loan.BorrowerLastName"]);
					Console.WriteLine("  Loan Number = " + data["Loan.LoanNumber"]);
					Console.WriteLine("  Loan Officer = " + data["Loan.LoanOfficerID"]);
					Console.WriteLine("  Qual Rate = " + data[qualRateFieldName]);
				}
    }
}
]]>
      </code>
    </example>
        </member>
        <member name="M:EllieMae.Encompass.Reporting.Reports.GetReportingDatabaseFields">
            <summary>
            Returns the list of fields in the Reporting Database.
            </summary>
        </member>
        <member name="M:EllieMae.Encompass.Reporting.Reports.GetReportingDatabaseFields(System.Boolean)">
            <summary>
            Returns the list of fields in the Reporting Database.
            </summary>
            <param name="useERDB">Indicates if the list of fields should be pulled from the External
            Reporting Database.</param>
        </member>
        <member name="T:EllieMae.Encompass.SmartClient.SmartClientInitializer">
            <summary>
            Provides internal functionality to support the Encompass SmartClient deployment model.
            </summary>
            <remarks>This class is for internal use only.</remarks>
            <exclude/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.SmartClientService">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.#ctor">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.GetSCPackageInfo(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.GetSCPackageInfoAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.GetSCPackageInfoAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.GetClientInfo(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.GetClientInfoAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.GetClientInfoAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.LetEMDoUupdates(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.LetEMDoUupdatesAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.LetEMDoUupdatesAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.DoUpdatesByClient(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.DoUpdatesByClientAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.DoUpdatesByClientAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.UpdateSelfHostedClientInfo(System.String,System.String,System.String,System.String,System.String,System.Char,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.UpdateSelfHostedClientInfoAsync(System.String,System.String,System.String,System.String,System.String,System.Char,System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.UpdateSelfHostedClientInfoAsync(System.String,System.String,System.String,System.String,System.String,System.Char,System.String,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.UpdateClientInfo(System.String,System.String,System.String,System.String,System.String,System.Char,System.String,System.Boolean,System.Boolean,EllieMae.EncompassAPI.WebServices.NameValuePair[])">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.UpdateClientInfoAsync(System.String,System.String,System.String,System.String,System.String,System.Char,System.String,System.Boolean,System.Boolean,EllieMae.EncompassAPI.WebServices.NameValuePair[])">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.UpdateClientInfoAsync(System.String,System.String,System.String,System.String,System.String,System.Char,System.String,System.Boolean,System.Boolean,EllieMae.EncompassAPI.WebServices.NameValuePair[],System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.InstallSmartClient(System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.InstallSmartClientAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.InstallSmartClientAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.GetAttributes(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.GetAttributesAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.GetAttributesAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.GetAttribute(System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.GetAttributeAsync(System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.GetAttributeAsync(System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:EllieMae.EncompassAPI.WebServices.SmartClientService.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:EllieMae.EncompassAPI.WebServices.SmartClientService.GetSCPackageInfoCompleted">
            <remarks/>
        </member>
        <member name="E:EllieMae.EncompassAPI.WebServices.SmartClientService.GetClientInfoCompleted">
            <remarks/>
        </member>
        <member name="E:EllieMae.EncompassAPI.WebServices.SmartClientService.LetEMDoUupdatesCompleted">
            <remarks/>
        </member>
        <member name="E:EllieMae.EncompassAPI.WebServices.SmartClientService.DoUpdatesByClientCompleted">
            <remarks/>
        </member>
        <member name="E:EllieMae.EncompassAPI.WebServices.SmartClientService.UpdateSelfHostedClientInfoCompleted">
            <remarks/>
        </member>
        <member name="E:EllieMae.EncompassAPI.WebServices.SmartClientService.UpdateClientInfoCompleted">
            <remarks/>
        </member>
        <member name="E:EllieMae.EncompassAPI.WebServices.SmartClientService.InstallSmartClientCompleted">
            <remarks/>
        </member>
        <member name="E:EllieMae.EncompassAPI.WebServices.SmartClientService.GetAttributesCompleted">
            <remarks/>
        </member>
        <member name="E:EllieMae.EncompassAPI.WebServices.SmartClientService.GetAttributeCompleted">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.SCPackageInfo">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.SCPackageInfo.InstallUrlID">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.SCPackageInfo.EncVersion">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.SCPackageInfo.Description">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.SCPackageInfo.ReleaseDate">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.SCPackageInfo.ReleaseNotesURL">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.SCPackageInfo.IsCurrent">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.NameValuePair">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.NameValuePair.Name">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.NameValuePair.Value">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.ReturnResult">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.ReturnResult.ReturnCode">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.ReturnResult.Description">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.ReturnResult.InstallUrlID">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.ReturnResult.UpdateByEM">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.ReturnResult.TestCIDs">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.ReturnCode">
            <remarks/>
        </member>
        <member name="F:EllieMae.EncompassAPI.WebServices.ReturnCode.Success">
            <remarks/>
        </member>
        <member name="F:EllieMae.EncompassAPI.WebServices.ReturnCode.AuthenticationFailed">
            <remarks/>
        </member>
        <member name="F:EllieMae.EncompassAPI.WebServices.ReturnCode.UnhandledError">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.GetSCPackageInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.GetSCPackageInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.GetSCPackageInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.GetClientInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.GetClientInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.GetClientInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.LetEMDoUupdatesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.LetEMDoUupdatesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.LetEMDoUupdatesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.DoUpdatesByClientCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.DoUpdatesByClientCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.DoUpdatesByClientCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.UpdateSelfHostedClientInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.UpdateSelfHostedClientInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.UpdateSelfHostedClientInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.UpdateClientInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.UpdateClientInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.UpdateClientInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.InstallSmartClientCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.InstallSmartClientCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.InstallSmartClientCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.GetAttributesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.GetAttributesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.GetAttributesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.GetAttributeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:EllieMae.EncompassAPI.WebServices.GetAttributeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:EllieMae.EncompassAPI.WebServices.GetAttributeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:EllieMae.Encompass.Versioning.VersionManager">
            <summary>
            Provides software versioning and update funtionality. This class is meant for
            internal use only.
            </summary>
            <exclude/>
        </member>
        <member name="M:EllieMae.Encompass.Versioning.VersionManager.GetVersionUpgradeURL(System.String)">
            <summary>
            Retrieves the URL of an SDK software update for the specified target version.
            </summary>
            <param name="targetVersion">The Encompass version to which the system
            is to be upgraded.</param>
            <returns>The URL of the installation package for the specified target
            version, if one exists. An empty return value indicates that no update
            exists for the specified version or the update is not version compatible
            with the currently installed version. An exception is thrown if the
            current computer's license does not permit upgrades.</returns>
        </member>
        <member name="P:EllieMae.Encompass.Versioning.VersionManager.CurrentVersion">
            <summary>
            Gets the current version of the SDK installed on the computer.
            </summary>
        </member>
    </members>
</doc>
